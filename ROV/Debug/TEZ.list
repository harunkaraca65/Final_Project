
TEZ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c778  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  0800c908  0800c908  0000d908  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf28  0800cf28  0000e208  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf28  0800cf28  0000df28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf30  0800cf30  0000e208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf30  0800cf30  0000df30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cf34  0800cf34  0000df34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000208  20000000  0800cf38  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e208  2**0
                  CONTENTS
 10 .bss          00000470  20000208  20000208  0000e208  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000678  20000678  0000e208  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e357  00000000  00000000  0000e238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000212d  00000000  00000000  0001c58f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed0  00000000  00000000  0001e6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b92  00000000  00000000  0001f590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023829  00000000  00000000  00020122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000121f4  00000000  00000000  0004394b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da62a  00000000  00000000  00055b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00130169  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056a4  00000000  00000000  001301ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  00135850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c8f0 	.word	0x0800c8f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	0800c8f0 	.word	0x0800c8f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <Joystick_Init>:
SENSOR sensor1; // Sensör 1 nesnesi
SENSOR sensor2; // Sensör 2 nesnesi

// Joystick yapılandırma fonksiyonu
// Bu fonksiyon, joystick'lerin ADC yapılandırmasını yapar.
void Joystick_Init(Joystick* joystick, ADC_HandleTypeDef* hadc, uint32_t y_channel) {
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
    joystick->hadc = hadc; // ADC handle'ını joystick'e atar
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	605a      	str	r2, [r3, #4]
    joystick->Y_Channel = y_channel; // Joystick Y ekseninin kanalını atar
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
    joystick->Y = 0; // Başlangıçta Y ekseni değerini sıfırlar
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2200      	movs	r2, #0
 8001000:	801a      	strh	r2, [r3, #0]
}
 8001002:	bf00      	nop
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <SENSOR_Init>:

// Sensör yapılandırma fonksiyonu
// Bu fonksiyon, sensörlerin ADC yapılandırmasını yapar.
void SENSOR_Init(SENSOR* sensor, ADC_HandleTypeDef* hadc, uint32_t channel) {
 800100e:	b480      	push	{r7}
 8001010:	b085      	sub	sp, #20
 8001012:	af00      	add	r7, sp, #0
 8001014:	60f8      	str	r0, [r7, #12]
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	607a      	str	r2, [r7, #4]
    sensor->hadc = hadc; // ADC handle'ını sensöre atar
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	68ba      	ldr	r2, [r7, #8]
 800101e:	605a      	str	r2, [r3, #4]
    sensor->channel = channel; // Sensörün ADC kanalını atar
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	609a      	str	r2, [r3, #8]
    sensor->value = 0; // Başlangıçta sensör değerini sıfırlar
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	2200      	movs	r2, #0
 800102a:	801a      	strh	r2, [r3, #0]
}
 800102c:	bf00      	nop
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <Read_ADC_Channel>:

// ADC kanalı okuma fonksiyonu
// Bu fonksiyon, belirli bir ADC kanalından veri okur.
uint16_t Read_ADC_Channel(ADC_HandleTypeDef* hadc, uint32_t channel) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
    ADC_ChannelConfTypeDef sConfigPrivate = {0}; // ADC kanal yapılandırma yapısı
 8001042:	f107 030c 	add.w	r3, r7, #12
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
    sConfigPrivate.Channel = channel; // Okunacak kanal belirlenir
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	60fb      	str	r3, [r7, #12]

    // Kanal yapılandırmasını yap
    if (HAL_ADC_ConfigChannel(hadc, &sConfigPrivate) != HAL_OK) {
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	4619      	mov	r1, r3
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f002 fbb6 	bl	80037cc <HAL_ADC_ConfigChannel>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <Read_ADC_Channel+0x32>
        return 0; // Hata durumunda 0 döndür
 8001066:	2300      	movs	r3, #0
 8001068:	e01d      	b.n	80010a6 <Read_ADC_Channel+0x6e>
    }

    // ADC'yi başlat
    if (HAL_ADC_Start(hadc) != HAL_OK) {
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f002 fa10 	bl	8003490 <HAL_ADC_Start>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <Read_ADC_Channel+0x42>
        return 0; // ADC başlatma hatası
 8001076:	2300      	movs	r3, #0
 8001078:	e015      	b.n	80010a6 <Read_ADC_Channel+0x6e>
    }

    // ADC dönüşümünü bekle
    if (HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY) != HAL_OK) {
 800107a:	f04f 31ff 	mov.w	r1, #4294967295
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f002 fb0b 	bl	800369a <HAL_ADC_PollForConversion>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d004      	beq.n	8001094 <Read_ADC_Channel+0x5c>
        HAL_ADC_Stop(hadc); // Hata durumunda ADC'yi durdur
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f002 fad2 	bl	8003634 <HAL_ADC_Stop>
        return 0; // Dönüşüm hatası durumunda 0 döndür
 8001090:	2300      	movs	r3, #0
 8001092:	e008      	b.n	80010a6 <Read_ADC_Channel+0x6e>
    }

    // ADC değerini al
    uint16_t value = HAL_ADC_GetValue(hadc);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f002 fb8b 	bl	80037b0 <HAL_ADC_GetValue>
 800109a:	4603      	mov	r3, r0
 800109c:	83fb      	strh	r3, [r7, #30]

    // ADC'yi durdur
    HAL_ADC_Stop(hadc);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f002 fac8 	bl	8003634 <HAL_ADC_Stop>

    return value; // ADC değerini döndür
 80010a4:	8bfb      	ldrh	r3, [r7, #30]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3720      	adds	r7, #32
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <Joystick_Read>:

// Joystick değerlerini okuma fonksiyonu
// Bu fonksiyon, joystick'in Y ekseninin ADC değerini okur.
void Joystick_Read(Joystick* joystick) {
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
    joystick->Y = Read_ADC_Channel(joystick->hadc, joystick->Y_Channel); // Y eksenini oku
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	4619      	mov	r1, r3
 80010c0:	4610      	mov	r0, r2
 80010c2:	f7ff ffb9 	bl	8001038 <Read_ADC_Channel>
 80010c6:	4603      	mov	r3, r0
 80010c8:	461a      	mov	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	801a      	strh	r2, [r3, #0]
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <SENSOR_Read>:

// Sensör değerlerini okuma fonksiyonu
// Bu fonksiyon, sensörün ADC değerini okur.
void SENSOR_Read(SENSOR* sensor) {
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
    sensor->value = Read_ADC_Channel(sensor->hadc, sensor->channel); // Sensör değerini oku
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685a      	ldr	r2, [r3, #4]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	4619      	mov	r1, r3
 80010e8:	4610      	mov	r0, r2
 80010ea:	f7ff ffa5 	bl	8001038 <Read_ADC_Channel>
 80010ee:	4603      	mov	r3, r0
 80010f0:	461a      	mov	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	801a      	strh	r2, [r3, #0]
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <ADC_System_Init>:

// Sistem başlatma fonksiyonu
// Bu fonksiyon, tüm joystick ve sensörleri başlatır ve yapılandırır.
void ADC_System_Init(void) {
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
    extern ADC_HandleTypeDef hadc1; // Kullanılacak ADC tanımları
    extern ADC_HandleTypeDef hadc2;
    extern ADC_HandleTypeDef hadc3;

    // Joystickler için yapılandırma
    Joystick_Init(&joystick1, &hadc2, ADC_CHANNEL_10); // Joystick 1 için yapılandırma
 8001104:	220a      	movs	r2, #10
 8001106:	490a      	ldr	r1, [pc, #40]	@ (8001130 <ADC_System_Init+0x30>)
 8001108:	480a      	ldr	r0, [pc, #40]	@ (8001134 <ADC_System_Init+0x34>)
 800110a:	f7ff ff6b 	bl	8000fe4 <Joystick_Init>
    Joystick_Init(&joystick2, &hadc3, ADC_CHANNEL_12); // Joystick 2 için yapılandırma
 800110e:	220c      	movs	r2, #12
 8001110:	4909      	ldr	r1, [pc, #36]	@ (8001138 <ADC_System_Init+0x38>)
 8001112:	480a      	ldr	r0, [pc, #40]	@ (800113c <ADC_System_Init+0x3c>)
 8001114:	f7ff ff66 	bl	8000fe4 <Joystick_Init>

    // Sensörler için yapılandırma
    SENSOR_Init(&sensor1, &hadc1, ADC_CHANNEL_11); // Sensör 1 için yapılandırma
 8001118:	220b      	movs	r2, #11
 800111a:	4909      	ldr	r1, [pc, #36]	@ (8001140 <ADC_System_Init+0x40>)
 800111c:	4809      	ldr	r0, [pc, #36]	@ (8001144 <ADC_System_Init+0x44>)
 800111e:	f7ff ff76 	bl	800100e <SENSOR_Init>
    SENSOR_Init(&sensor2, &hadc1, ADC_CHANNEL_13); // Sensör 2 için yapılandırma
 8001122:	220d      	movs	r2, #13
 8001124:	4906      	ldr	r1, [pc, #24]	@ (8001140 <ADC_System_Init+0x40>)
 8001126:	4808      	ldr	r0, [pc, #32]	@ (8001148 <ADC_System_Init+0x48>)
 8001128:	f7ff ff71 	bl	800100e <SENSOR_Init>
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	2000029c 	.word	0x2000029c
 8001134:	20000224 	.word	0x20000224
 8001138:	200002e4 	.word	0x200002e4
 800113c:	20000230 	.word	0x20000230
 8001140:	20000254 	.word	0x20000254
 8001144:	2000023c 	.word	0x2000023c
 8001148:	20000248 	.word	0x20000248

0800114c <ADC_System_Update>:

// Sistem güncelleme fonksiyonu
// Bu fonksiyon, joystick ve sensörlerin değerlerini günceller.
void ADC_System_Update(void) {
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
    // Joystick değerlerini güncelle
    Joystick_Read(&joystick1); // Joystick 1'in değerini oku
 8001150:	4806      	ldr	r0, [pc, #24]	@ (800116c <ADC_System_Update+0x20>)
 8001152:	f7ff ffac 	bl	80010ae <Joystick_Read>
    Joystick_Read(&joystick2); // Joystick 2'nin değerini oku
 8001156:	4806      	ldr	r0, [pc, #24]	@ (8001170 <ADC_System_Update+0x24>)
 8001158:	f7ff ffa9 	bl	80010ae <Joystick_Read>

    // Sensör değerlerini güncelle
    SENSOR_Read(&sensor1); // Sensör 1'in değerini oku
 800115c:	4805      	ldr	r0, [pc, #20]	@ (8001174 <ADC_System_Update+0x28>)
 800115e:	f7ff ffba 	bl	80010d6 <SENSOR_Read>
    SENSOR_Read(&sensor2); // Sensör 2'nin değerini oku
 8001162:	4805      	ldr	r0, [pc, #20]	@ (8001178 <ADC_System_Update+0x2c>)
 8001164:	f7ff ffb7 	bl	80010d6 <SENSOR_Read>
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000224 	.word	0x20000224
 8001170:	20000230 	.word	0x20000230
 8001174:	2000023c 	.word	0x2000023c
 8001178:	20000248 	.word	0x20000248

0800117c <Button_Control>:
#include "main.h"
#include "ADC.h"
void Button_Control(void) {
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
    // Eğer Buton 1 (PA0) basılıysa, Buton 2'yi (PA1) dikkate almayacağız
	if(sensor1.channel<4000||sensor2.channel<4000){
 8001180:	4b42      	ldr	r3, [pc, #264]	@ (800128c <Button_Control+0x110>)
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001188:	d304      	bcc.n	8001194 <Button_Control+0x18>
 800118a:	4b41      	ldr	r3, [pc, #260]	@ (8001290 <Button_Control+0x114>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001192:	d22c      	bcs.n	80011ee <Button_Control+0x72>
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET && HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0) == GPIO_PIN_RESET) {
 8001194:	2101      	movs	r1, #1
 8001196:	483f      	ldr	r0, [pc, #252]	@ (8001294 <Button_Control+0x118>)
 8001198:	f002 ffb8 	bl	800410c <HAL_GPIO_ReadPin>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d171      	bne.n	8001286 <Button_Control+0x10a>
 80011a2:	2101      	movs	r1, #1
 80011a4:	483c      	ldr	r0, [pc, #240]	@ (8001298 <Button_Control+0x11c>)
 80011a6:	f002 ffb1 	bl	800410c <HAL_GPIO_ReadPin>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d16a      	bne.n	8001286 <Button_Control+0x10a>

        // Buton 1 (PA0) basılı (PA0 LOW), Buton 2 etkisiz
        // PA2 (12V DC motor ENA) HIGH yaparak motoru çalıştır
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);  // PA2 HIGH -> Motor aktif (Saat yönünde)
 80011b0:	2201      	movs	r2, #1
 80011b2:	2104      	movs	r1, #4
 80011b4:	4837      	ldr	r0, [pc, #220]	@ (8001294 <Button_Control+0x118>)
 80011b6:	f002 ffc1 	bl	800413c <HAL_GPIO_WritePin>
        // PA3 (ENB) HIGH yaparak motorun saat yönünde dönmesini sağla
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);  // PA3 HIGH -> Motor saat yönünde döner
 80011ba:	2201      	movs	r2, #1
 80011bc:	2108      	movs	r1, #8
 80011be:	4835      	ldr	r0, [pc, #212]	@ (8001294 <Button_Control+0x118>)
 80011c0:	f002 ffbc 	bl	800413c <HAL_GPIO_WritePin>
        // PA4 ve PA5, sağ ve sol doldurma motorlarının ENA'larını aktif yapar
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); // PA4 HIGH -> Sağ doldurma motoru aktif
 80011c4:	2201      	movs	r2, #1
 80011c6:	2110      	movs	r1, #16
 80011c8:	4832      	ldr	r0, [pc, #200]	@ (8001294 <Button_Control+0x118>)
 80011ca:	f002 ffb7 	bl	800413c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // PA5 HIGH -> Sol doldurma motoru aktif
 80011ce:	2201      	movs	r2, #1
 80011d0:	2120      	movs	r1, #32
 80011d2:	4830      	ldr	r0, [pc, #192]	@ (8001294 <Button_Control+0x118>)
 80011d4:	f002 ffb2 	bl	800413c <HAL_GPIO_WritePin>
        // PA6 ve PA7 boşaltma motorlarının ENA'larını pasif yapar
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // PA6 LOW -> Sağ boşaltma motoru pasif
 80011d8:	2200      	movs	r2, #0
 80011da:	2140      	movs	r1, #64	@ 0x40
 80011dc:	482d      	ldr	r0, [pc, #180]	@ (8001294 <Button_Control+0x118>)
 80011de:	f002 ffad 	bl	800413c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // PA7 LOW -> Sol boşaltma motoru pasif
 80011e2:	2200      	movs	r2, #0
 80011e4:	2180      	movs	r1, #128	@ 0x80
 80011e6:	482b      	ldr	r0, [pc, #172]	@ (8001294 <Button_Control+0x118>)
 80011e8:	f002 ffa8 	bl	800413c <HAL_GPIO_WritePin>
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET && HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0) == GPIO_PIN_RESET) {
 80011ec:	e04b      	b.n	8001286 <Button_Control+0x10a>
    }}
    // Eğer Buton 2 (PA1) basılıysa ve ilgili switch'e basılmadıysa, Buton 1'i dikkate almayacağız
    else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET && HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_1) == GPIO_PIN_RESET) {
 80011ee:	2102      	movs	r1, #2
 80011f0:	4828      	ldr	r0, [pc, #160]	@ (8001294 <Button_Control+0x118>)
 80011f2:	f002 ff8b 	bl	800410c <HAL_GPIO_ReadPin>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d125      	bne.n	8001248 <Button_Control+0xcc>
 80011fc:	2102      	movs	r1, #2
 80011fe:	4826      	ldr	r0, [pc, #152]	@ (8001298 <Button_Control+0x11c>)
 8001200:	f002 ff84 	bl	800410c <HAL_GPIO_ReadPin>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d11e      	bne.n	8001248 <Button_Control+0xcc>
        // Buton 2 (PA1) basılı (PA1 LOW), Buton 1 etkisiz
        // PA2 (12V DC motor ENA) HIGH yaparak motoru çalıştır
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); // PA2 HIGH -> Motor aktif (Saat yönünün tersine)
 800120a:	2201      	movs	r2, #1
 800120c:	2104      	movs	r1, #4
 800120e:	4821      	ldr	r0, [pc, #132]	@ (8001294 <Button_Control+0x118>)
 8001210:	f002 ff94 	bl	800413c <HAL_GPIO_WritePin>
        // PA3 (ENB) LOW yaparak motorun saat yönünün tersine dönmesini sağla
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET); // PA3 LOW -> Motor saat yönünün tersine döner
 8001214:	2200      	movs	r2, #0
 8001216:	2108      	movs	r1, #8
 8001218:	481e      	ldr	r0, [pc, #120]	@ (8001294 <Button_Control+0x118>)
 800121a:	f002 ff8f 	bl	800413c <HAL_GPIO_WritePin>
        // PA4 ve PA5, sağ ve sol doldurma motorlarının ENA'larını pasif yapar
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // PA4 LOW -> Sağ doldurma motoru pasif
 800121e:	2200      	movs	r2, #0
 8001220:	2110      	movs	r1, #16
 8001222:	481c      	ldr	r0, [pc, #112]	@ (8001294 <Button_Control+0x118>)
 8001224:	f002 ff8a 	bl	800413c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // PA5 LOW -> Sol doldurma motoru pasif
 8001228:	2200      	movs	r2, #0
 800122a:	2120      	movs	r1, #32
 800122c:	4819      	ldr	r0, [pc, #100]	@ (8001294 <Button_Control+0x118>)
 800122e:	f002 ff85 	bl	800413c <HAL_GPIO_WritePin>
        // PA6 ve PA7 boşaltma motorlarının ENA'larını aktif yapar
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); // PA6 HIGH -> Sağ boşaltma motoru aktif
 8001232:	2201      	movs	r2, #1
 8001234:	2140      	movs	r1, #64	@ 0x40
 8001236:	4817      	ldr	r0, [pc, #92]	@ (8001294 <Button_Control+0x118>)
 8001238:	f002 ff80 	bl	800413c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); // PA7 HIGH -> Sol boşaltma motoru aktif
 800123c:	2201      	movs	r2, #1
 800123e:	2180      	movs	r1, #128	@ 0x80
 8001240:	4814      	ldr	r0, [pc, #80]	@ (8001294 <Button_Control+0x118>)
 8001242:	f002 ff7b 	bl	800413c <HAL_GPIO_WritePin>
 8001246:	e01f      	b.n	8001288 <Button_Control+0x10c>
    }
    else {
        // Her iki buton da serbest bırakıldıysa (PA0 LOW, PA1 LOW)
        // Motor ve pompaların hepsi pasif durumda
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); // PA2 LOW -> Motor pasif
 8001248:	2200      	movs	r2, #0
 800124a:	2104      	movs	r1, #4
 800124c:	4811      	ldr	r0, [pc, #68]	@ (8001294 <Button_Control+0x118>)
 800124e:	f002 ff75 	bl	800413c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET); // PA3 LOW -> Motor yönü pasif
 8001252:	2200      	movs	r2, #0
 8001254:	2108      	movs	r1, #8
 8001256:	480f      	ldr	r0, [pc, #60]	@ (8001294 <Button_Control+0x118>)
 8001258:	f002 ff70 	bl	800413c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // PA4 LOW -> Sağ doldurma motoru pasif
 800125c:	2200      	movs	r2, #0
 800125e:	2110      	movs	r1, #16
 8001260:	480c      	ldr	r0, [pc, #48]	@ (8001294 <Button_Control+0x118>)
 8001262:	f002 ff6b 	bl	800413c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // PA5 LOW -> Sol doldurma motoru pasif
 8001266:	2200      	movs	r2, #0
 8001268:	2120      	movs	r1, #32
 800126a:	480a      	ldr	r0, [pc, #40]	@ (8001294 <Button_Control+0x118>)
 800126c:	f002 ff66 	bl	800413c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // PA6 LOW -> Sağ boşaltma motoru pasif
 8001270:	2200      	movs	r2, #0
 8001272:	2140      	movs	r1, #64	@ 0x40
 8001274:	4807      	ldr	r0, [pc, #28]	@ (8001294 <Button_Control+0x118>)
 8001276:	f002 ff61 	bl	800413c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // PA7 LOW -> Sol boşaltma motoru pasif
 800127a:	2200      	movs	r2, #0
 800127c:	2180      	movs	r1, #128	@ 0x80
 800127e:	4805      	ldr	r0, [pc, #20]	@ (8001294 <Button_Control+0x118>)
 8001280:	f002 ff5c 	bl	800413c <HAL_GPIO_WritePin>
    }
}
 8001284:	e000      	b.n	8001288 <Button_Control+0x10c>
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET && HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0) == GPIO_PIN_RESET) {
 8001286:	bf00      	nop
}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}
 800128c:	2000023c 	.word	0x2000023c
 8001290:	20000248 	.word	0x20000248
 8001294:	40020000 	.word	0x40020000
 8001298:	40021000 	.word	0x40021000

0800129c <map>:
// Bu dizi, daha sonra veri kopyalama veya başka bir işlem için kullanılabilir.
char strCopy[15];

// 'map' fonksiyonu, verilen bir değeri (value) belirtilen giriş aralığından (in_min, in_max) çıkış aralığına (out_min, out_max) dönüştürür.
// Bu, örneğin bir sensör değerini farklı bir ölçekteki değere dönüştürmek için kullanılabilir.
uint16_t map(uint16_t value, float in_min, float in_max, float out_min, float out_max) {
 800129c:	b480      	push	{r7}
 800129e:	b087      	sub	sp, #28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	ed87 0a04 	vstr	s0, [r7, #16]
 80012a8:	edc7 0a03 	vstr	s1, [r7, #12]
 80012ac:	ed87 1a02 	vstr	s2, [r7, #8]
 80012b0:	edc7 1a01 	vstr	s3, [r7, #4]
 80012b4:	82fb      	strh	r3, [r7, #22]
    // Giriş değeri ile giriş aralığı arasındaki farkı, çıkış aralığına göre ölçeklendirir.
    return (value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80012b6:	8afb      	ldrh	r3, [r7, #22]
 80012b8:	ee07 3a90 	vmov	s15, r3
 80012bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012c8:	edd7 6a01 	vldr	s13, [r7, #4]
 80012cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80012d0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80012d4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80012d8:	ed97 7a03 	vldr	s14, [r7, #12]
 80012dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80012e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80012e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80012ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012f4:	ee17 3a90 	vmov	r3, s15
 80012f8:	b29b      	uxth	r3, r3
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	371c      	adds	r7, #28
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <calculate_speed>:

/***************************************SUALTI İTİCİ MOTORLARI***********************/

// Motor hızını hesaplayan fonksiyon
void calculate_speed() {
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
    // Geçen süreyi saniye cinsinden hesapla
    float delta_time = (HAL_GetTick() - prevtime) / 1000.0;
 800130e:	f002 f84b 	bl	80033a8 <HAL_GetTick>
 8001312:	ee07 0a90 	vmov	s15, r0
 8001316:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800131a:	4b1e      	ldr	r3, [pc, #120]	@ (8001394 <calculate_speed+0x8c>)
 800131c:	edd3 7a00 	vldr	s15, [r3]
 8001320:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001324:	ee17 0a90 	vmov	r0, s15
 8001328:	f7ff f90e 	bl	8000548 <__aeabi_f2d>
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	4b19      	ldr	r3, [pc, #100]	@ (8001398 <calculate_speed+0x90>)
 8001332:	f7ff fa8b 	bl	800084c <__aeabi_ddiv>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	f7ff fc53 	bl	8000be8 <__aeabi_d2f>
 8001342:	4603      	mov	r3, r0
 8001344:	607b      	str	r3, [r7, #4]
    // Hızı hesapla (ivmenin integrali)
    v += x_ivme * delta_time;
 8001346:	4b15      	ldr	r3, [pc, #84]	@ (800139c <calculate_speed+0x94>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	ee07 3a90 	vmov	s15, r3
 800134e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001352:	4b13      	ldr	r3, [pc, #76]	@ (80013a0 <calculate_speed+0x98>)
 8001354:	edd3 6a00 	vldr	s13, [r3]
 8001358:	edd7 7a01 	vldr	s15, [r7, #4]
 800135c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001360:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001364:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001368:	ee17 2a90 	vmov	r2, s15
 800136c:	4b0b      	ldr	r3, [pc, #44]	@ (800139c <calculate_speed+0x94>)
 800136e:	601a      	str	r2, [r3, #0]
    // Önceki hız değerini güncelle
    previous_x_ivme = x_ivme;
 8001370:	4b0b      	ldr	r3, [pc, #44]	@ (80013a0 <calculate_speed+0x98>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a0b      	ldr	r2, [pc, #44]	@ (80013a4 <calculate_speed+0x9c>)
 8001376:	6013      	str	r3, [r2, #0]
    // Zamanı güncelle
    prevtime = HAL_GetTick();
 8001378:	f002 f816 	bl	80033a8 <HAL_GetTick>
 800137c:	ee07 0a90 	vmov	s15, r0
 8001380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001384:	4b03      	ldr	r3, [pc, #12]	@ (8001394 <calculate_speed+0x8c>)
 8001386:	edc3 7a00 	vstr	s15, [r3]
    // Bu fonksiyon motorun hızını hesaplar. 'delta_time' motorun hareket ettiği süredeki zaman farkını hesaplar.
    // 'v' değeri, ivme ('x_ivme') ile zaman farkının çarpımıyla güncellenir. 'previous_x_ivme' ivme değeri bir sonraki hesaplama için güncellenir.
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000504 	.word	0x20000504
 8001398:	408f4000 	.word	0x408f4000
 800139c:	20000460 	.word	0x20000460
 80013a0:	200004f4 	.word	0x200004f4
 80013a4:	20000464 	.word	0x20000464

080013a8 <motor_pid_control>:

// PID kontrol algoritmasını uygulayan fonksiyon
void motor_pid_control() {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	ed2d 8b02 	vpush	{d8}
 80013ae:	af00      	add	r7, sp, #0
    // Hata hesapla
    error_motor = desired_speed - v;
 80013b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001464 <motor_pid_control+0xbc>)
 80013b2:	ed93 7a00 	vldr	s14, [r3]
 80013b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001468 <motor_pid_control+0xc0>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	ee07 3a90 	vmov	s15, r3
 80013be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013c6:	4b29      	ldr	r3, [pc, #164]	@ (800146c <motor_pid_control+0xc4>)
 80013c8:	edc3 7a00 	vstr	s15, [r3]
    // İntegral hesapla
    integral_motor += error_motor;
 80013cc:	4b28      	ldr	r3, [pc, #160]	@ (8001470 <motor_pid_control+0xc8>)
 80013ce:	ed93 7a00 	vldr	s14, [r3]
 80013d2:	4b26      	ldr	r3, [pc, #152]	@ (800146c <motor_pid_control+0xc4>)
 80013d4:	edd3 7a00 	vldr	s15, [r3]
 80013d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013dc:	4b24      	ldr	r3, [pc, #144]	@ (8001470 <motor_pid_control+0xc8>)
 80013de:	edc3 7a00 	vstr	s15, [r3]
    // Türev hesapla
    derivative_motor = (error_motor - previous_error_motor) / (HAL_GetTick() - prevtime);
 80013e2:	4b22      	ldr	r3, [pc, #136]	@ (800146c <motor_pid_control+0xc4>)
 80013e4:	ed93 7a00 	vldr	s14, [r3]
 80013e8:	4b22      	ldr	r3, [pc, #136]	@ (8001474 <motor_pid_control+0xcc>)
 80013ea:	edd3 7a00 	vldr	s15, [r3]
 80013ee:	ee37 8a67 	vsub.f32	s16, s14, s15
 80013f2:	f001 ffd9 	bl	80033a8 <HAL_GetTick>
 80013f6:	ee07 0a90 	vmov	s15, r0
 80013fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001478 <motor_pid_control+0xd0>)
 8001400:	edd3 7a00 	vldr	s15, [r3]
 8001404:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001408:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800140c:	4b1b      	ldr	r3, [pc, #108]	@ (800147c <motor_pid_control+0xd4>)
 800140e:	edc3 7a00 	vstr	s15, [r3]
    // PID çıktısını hesapla
    pid_output_motor = Kp_motor * error_motor + Ki_motor * integral_motor + Kd_motor * derivative_motor;
 8001412:	4b1b      	ldr	r3, [pc, #108]	@ (8001480 <motor_pid_control+0xd8>)
 8001414:	ed93 7a00 	vldr	s14, [r3]
 8001418:	4b14      	ldr	r3, [pc, #80]	@ (800146c <motor_pid_control+0xc4>)
 800141a:	edd3 7a00 	vldr	s15, [r3]
 800141e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001422:	4b18      	ldr	r3, [pc, #96]	@ (8001484 <motor_pid_control+0xdc>)
 8001424:	edd3 6a00 	vldr	s13, [r3]
 8001428:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <motor_pid_control+0xc8>)
 800142a:	edd3 7a00 	vldr	s15, [r3]
 800142e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001432:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001436:	4b14      	ldr	r3, [pc, #80]	@ (8001488 <motor_pid_control+0xe0>)
 8001438:	edd3 6a00 	vldr	s13, [r3]
 800143c:	4b0f      	ldr	r3, [pc, #60]	@ (800147c <motor_pid_control+0xd4>)
 800143e:	edd3 7a00 	vldr	s15, [r3]
 8001442:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001446:	ee77 7a27 	vadd.f32	s15, s14, s15
 800144a:	4b10      	ldr	r3, [pc, #64]	@ (800148c <motor_pid_control+0xe4>)
 800144c:	edc3 7a00 	vstr	s15, [r3]
    // Önceki hatayı güncelle
    previous_error_motor = error_motor;
 8001450:	4b06      	ldr	r3, [pc, #24]	@ (800146c <motor_pid_control+0xc4>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a07      	ldr	r2, [pc, #28]	@ (8001474 <motor_pid_control+0xcc>)
 8001456:	6013      	str	r3, [r2, #0]
    // Bu fonksiyon PID kontrol algoritmasını uygular. 'error_motor' motorun mevcut hızından istenilen hıza kadar olan farkı temsil eder.
    // Bu hata, integral ve türev bileşenleriyle birleştirilerek PID çıkışı ('pid_output_motor') hesaplanır.
    // 'previous_error_motor' bir sonraki döngüde kullanılmak üzere güncellenir.
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	ecbd 8b02 	vpop	{d8}
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000000 	.word	0x20000000
 8001468:	20000460 	.word	0x20000460
 800146c:	20000470 	.word	0x20000470
 8001470:	20000468 	.word	0x20000468
 8001474:	20000474 	.word	0x20000474
 8001478:	20000504 	.word	0x20000504
 800147c:	2000046c 	.word	0x2000046c
 8001480:	20000004 	.word	0x20000004
 8001484:	20000008 	.word	0x20000008
 8001488:	2000000c 	.word	0x2000000c
 800148c:	20000478 	.word	0x20000478

08001490 <update_pwm>:

// PWM çıkışını güncelleyen fonksiyon
void update_pwm() {
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
    // Eğer PID çıkışı negatifse, PWM değerini azalt
    if (pid_output_motor < 0) {
 8001494:	4b17      	ldr	r3, [pc, #92]	@ (80014f4 <update_pwm+0x64>)
 8001496:	edd3 7a00 	vldr	s15, [r3]
 800149a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800149e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a2:	d512      	bpl.n	80014ca <update_pwm+0x3a>
        TIM2->CCR1 -= (uint16_t)(-pid_output_motor);
 80014a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014aa:	4a12      	ldr	r2, [pc, #72]	@ (80014f4 <update_pwm+0x64>)
 80014ac:	edd2 7a00 	vldr	s15, [r2]
 80014b0:	eef1 7a67 	vneg.f32	s15, s15
 80014b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014b8:	ee17 2a90 	vmov	r2, s15
 80014bc:	b292      	uxth	r2, r2
 80014be:	4611      	mov	r1, r2
 80014c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014c4:	1a5b      	subs	r3, r3, r1
 80014c6:	6353      	str	r3, [r2, #52]	@ 0x34
        // Eğer PID çıkışı pozitifse, PWM değerini artır
        TIM2->CCR1 += (uint16_t)(pid_output_motor);
    }
    // Bu fonksiyon PWM çıkışını günceller. PID çıkışı negatifse PWM değeri azaltılır, pozitifse artırılır.
    // Bu sayede motorun hızını PID kontrol algoritması ile ayarlayarak istenilen hıza ulaşılır.
}
 80014c8:	e00f      	b.n	80014ea <update_pwm+0x5a>
        TIM2->CCR1 += (uint16_t)(pid_output_motor);
 80014ca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014d0:	4a08      	ldr	r2, [pc, #32]	@ (80014f4 <update_pwm+0x64>)
 80014d2:	edd2 7a00 	vldr	s15, [r2]
 80014d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014da:	ee17 2a90 	vmov	r2, s15
 80014de:	b292      	uxth	r2, r2
 80014e0:	4611      	mov	r1, r2
 80014e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014e6:	440b      	add	r3, r1
 80014e8:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	20000478 	.word	0x20000478

080014f8 <pump_pid_control>:

// Su pompası için PID kontrol fonksiyonu
void pump_pid_control() {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	ed2d 8b02 	vpush	{d8}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
    // Roll hatasını hesapla
    float roll_error = desired_roll - roll;
 8001502:	4b86      	ldr	r3, [pc, #536]	@ (800171c <pump_pid_control+0x224>)
 8001504:	ed93 7a00 	vldr	s14, [r3]
 8001508:	4b85      	ldr	r3, [pc, #532]	@ (8001720 <pump_pid_control+0x228>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	ee07 3a90 	vmov	s15, r3
 8001510:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001514:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001518:	edc7 7a01 	vstr	s15, [r7, #4]
    // İntegral hesapla
    integral_pump += roll_error;
 800151c:	4b81      	ldr	r3, [pc, #516]	@ (8001724 <pump_pid_control+0x22c>)
 800151e:	ed93 7a00 	vldr	s14, [r3]
 8001522:	edd7 7a01 	vldr	s15, [r7, #4]
 8001526:	ee77 7a27 	vadd.f32	s15, s14, s15
 800152a:	4b7e      	ldr	r3, [pc, #504]	@ (8001724 <pump_pid_control+0x22c>)
 800152c:	edc3 7a00 	vstr	s15, [r3]
    // Türev hesapla
    derivative_pump = (roll_error - previous_error_pump) / (HAL_GetTick() - prevtime);
 8001530:	4b7d      	ldr	r3, [pc, #500]	@ (8001728 <pump_pid_control+0x230>)
 8001532:	edd3 7a00 	vldr	s15, [r3]
 8001536:	ed97 7a01 	vldr	s14, [r7, #4]
 800153a:	ee37 8a67 	vsub.f32	s16, s14, s15
 800153e:	f001 ff33 	bl	80033a8 <HAL_GetTick>
 8001542:	ee07 0a90 	vmov	s15, r0
 8001546:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800154a:	4b78      	ldr	r3, [pc, #480]	@ (800172c <pump_pid_control+0x234>)
 800154c:	edd3 7a00 	vldr	s15, [r3]
 8001550:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001554:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001558:	4b75      	ldr	r3, [pc, #468]	@ (8001730 <pump_pid_control+0x238>)
 800155a:	edc3 7a00 	vstr	s15, [r3]
    // PID çıktısını hesapla
    pid_output_pump = Kp_pump * roll_error + Ki_pump * integral_pump + Kd_pump * derivative_pump;
 800155e:	4b75      	ldr	r3, [pc, #468]	@ (8001734 <pump_pid_control+0x23c>)
 8001560:	ed93 7a00 	vldr	s14, [r3]
 8001564:	edd7 7a01 	vldr	s15, [r7, #4]
 8001568:	ee27 7a27 	vmul.f32	s14, s14, s15
 800156c:	4b72      	ldr	r3, [pc, #456]	@ (8001738 <pump_pid_control+0x240>)
 800156e:	edd3 6a00 	vldr	s13, [r3]
 8001572:	4b6c      	ldr	r3, [pc, #432]	@ (8001724 <pump_pid_control+0x22c>)
 8001574:	edd3 7a00 	vldr	s15, [r3]
 8001578:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800157c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001580:	4b6e      	ldr	r3, [pc, #440]	@ (800173c <pump_pid_control+0x244>)
 8001582:	edd3 6a00 	vldr	s13, [r3]
 8001586:	4b6a      	ldr	r3, [pc, #424]	@ (8001730 <pump_pid_control+0x238>)
 8001588:	edd3 7a00 	vldr	s15, [r3]
 800158c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001594:	4b6a      	ldr	r3, [pc, #424]	@ (8001740 <pump_pid_control+0x248>)
 8001596:	edc3 7a00 	vstr	s15, [r3]
    // Önceki hatayı güncelle
    previous_error_pump = roll_error;
 800159a:	4a63      	ldr	r2, [pc, #396]	@ (8001728 <pump_pid_control+0x230>)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6013      	str	r3, [r2, #0]

    // Butonların durumuna göre PWM değerlerini ayarla
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET && HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0) == GPIO_PIN_RESET) {
 80015a0:	2101      	movs	r1, #1
 80015a2:	4868      	ldr	r0, [pc, #416]	@ (8001744 <pump_pid_control+0x24c>)
 80015a4:	f002 fdb2 	bl	800410c <HAL_GPIO_ReadPin>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d14c      	bne.n	8001648 <pump_pid_control+0x150>
 80015ae:	2101      	movs	r1, #1
 80015b0:	4865      	ldr	r0, [pc, #404]	@ (8001748 <pump_pid_control+0x250>)
 80015b2:	f002 fdab 	bl	800410c <HAL_GPIO_ReadPin>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d145      	bne.n	8001648 <pump_pid_control+0x150>
        // PWM sol doldurma ve sağ doldurma ayarları
        if (pid_output_pump > 0) {
 80015bc:	4b60      	ldr	r3, [pc, #384]	@ (8001740 <pump_pid_control+0x248>)
 80015be:	edd3 7a00 	vldr	s15, [r3]
 80015c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ca:	dd1c      	ble.n	8001606 <pump_pid_control+0x10e>
            fill_pwm_left -= (uint16_t)(pid_output_pump);
 80015cc:	4b5f      	ldr	r3, [pc, #380]	@ (800174c <pump_pid_control+0x254>)
 80015ce:	881a      	ldrh	r2, [r3, #0]
 80015d0:	4b5b      	ldr	r3, [pc, #364]	@ (8001740 <pump_pid_control+0x248>)
 80015d2:	edd3 7a00 	vldr	s15, [r3]
 80015d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015da:	ee17 3a90 	vmov	r3, s15
 80015de:	b29b      	uxth	r3, r3
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	4b59      	ldr	r3, [pc, #356]	@ (800174c <pump_pid_control+0x254>)
 80015e6:	801a      	strh	r2, [r3, #0]
            fill_pwm_right += (uint16_t)(pid_output_pump);
 80015e8:	4b55      	ldr	r3, [pc, #340]	@ (8001740 <pump_pid_control+0x248>)
 80015ea:	edd3 7a00 	vldr	s15, [r3]
 80015ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015f2:	ee17 3a90 	vmov	r3, s15
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	4b55      	ldr	r3, [pc, #340]	@ (8001750 <pump_pid_control+0x258>)
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	4413      	add	r3, r2
 80015fe:	b29a      	uxth	r2, r3
 8001600:	4b53      	ldr	r3, [pc, #332]	@ (8001750 <pump_pid_control+0x258>)
 8001602:	801a      	strh	r2, [r3, #0]
        if (pid_output_pump > 0) {
 8001604:	e073      	b.n	80016ee <pump_pid_control+0x1f6>
        } else {
            fill_pwm_left += (uint16_t)(-pid_output_pump);
 8001606:	4b4e      	ldr	r3, [pc, #312]	@ (8001740 <pump_pid_control+0x248>)
 8001608:	edd3 7a00 	vldr	s15, [r3]
 800160c:	eef1 7a67 	vneg.f32	s15, s15
 8001610:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001614:	ee17 3a90 	vmov	r3, s15
 8001618:	b29a      	uxth	r2, r3
 800161a:	4b4c      	ldr	r3, [pc, #304]	@ (800174c <pump_pid_control+0x254>)
 800161c:	881b      	ldrh	r3, [r3, #0]
 800161e:	4413      	add	r3, r2
 8001620:	b29a      	uxth	r2, r3
 8001622:	4b4a      	ldr	r3, [pc, #296]	@ (800174c <pump_pid_control+0x254>)
 8001624:	801a      	strh	r2, [r3, #0]
            fill_pwm_right -= (uint16_t)(-pid_output_pump);
 8001626:	4b4a      	ldr	r3, [pc, #296]	@ (8001750 <pump_pid_control+0x258>)
 8001628:	881a      	ldrh	r2, [r3, #0]
 800162a:	4b45      	ldr	r3, [pc, #276]	@ (8001740 <pump_pid_control+0x248>)
 800162c:	edd3 7a00 	vldr	s15, [r3]
 8001630:	eef1 7a67 	vneg.f32	s15, s15
 8001634:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001638:	ee17 3a90 	vmov	r3, s15
 800163c:	b29b      	uxth	r3, r3
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	b29a      	uxth	r2, r3
 8001642:	4b43      	ldr	r3, [pc, #268]	@ (8001750 <pump_pid_control+0x258>)
 8001644:	801a      	strh	r2, [r3, #0]
        if (pid_output_pump > 0) {
 8001646:	e052      	b.n	80016ee <pump_pid_control+0x1f6>
        }
    } else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET && HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_1) == GPIO_PIN_RESET){
 8001648:	2102      	movs	r1, #2
 800164a:	483e      	ldr	r0, [pc, #248]	@ (8001744 <pump_pid_control+0x24c>)
 800164c:	f002 fd5e 	bl	800410c <HAL_GPIO_ReadPin>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d14b      	bne.n	80016ee <pump_pid_control+0x1f6>
 8001656:	2102      	movs	r1, #2
 8001658:	483b      	ldr	r0, [pc, #236]	@ (8001748 <pump_pid_control+0x250>)
 800165a:	f002 fd57 	bl	800410c <HAL_GPIO_ReadPin>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d144      	bne.n	80016ee <pump_pid_control+0x1f6>
        // PWM sol boşaltma ve sağ boşaltma ayarları
        if (pid_output_pump > 0) {
 8001664:	4b36      	ldr	r3, [pc, #216]	@ (8001740 <pump_pid_control+0x248>)
 8001666:	edd3 7a00 	vldr	s15, [r3]
 800166a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800166e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001672:	dd1c      	ble.n	80016ae <pump_pid_control+0x1b6>
            drain_pwm_left += (uint16_t)(pid_output_pump);
 8001674:	4b32      	ldr	r3, [pc, #200]	@ (8001740 <pump_pid_control+0x248>)
 8001676:	edd3 7a00 	vldr	s15, [r3]
 800167a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800167e:	ee17 3a90 	vmov	r3, s15
 8001682:	b29a      	uxth	r2, r3
 8001684:	4b33      	ldr	r3, [pc, #204]	@ (8001754 <pump_pid_control+0x25c>)
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	4413      	add	r3, r2
 800168a:	b29a      	uxth	r2, r3
 800168c:	4b31      	ldr	r3, [pc, #196]	@ (8001754 <pump_pid_control+0x25c>)
 800168e:	801a      	strh	r2, [r3, #0]
            drain_pwm_right -= (uint16_t)(pid_output_pump);
 8001690:	4b31      	ldr	r3, [pc, #196]	@ (8001758 <pump_pid_control+0x260>)
 8001692:	881a      	ldrh	r2, [r3, #0]
 8001694:	4b2a      	ldr	r3, [pc, #168]	@ (8001740 <pump_pid_control+0x248>)
 8001696:	edd3 7a00 	vldr	s15, [r3]
 800169a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800169e:	ee17 3a90 	vmov	r3, s15
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001758 <pump_pid_control+0x260>)
 80016aa:	801a      	strh	r2, [r3, #0]
 80016ac:	e01f      	b.n	80016ee <pump_pid_control+0x1f6>
        } else {
            drain_pwm_left -= (uint16_t)(-pid_output_pump);
 80016ae:	4b29      	ldr	r3, [pc, #164]	@ (8001754 <pump_pid_control+0x25c>)
 80016b0:	881a      	ldrh	r2, [r3, #0]
 80016b2:	4b23      	ldr	r3, [pc, #140]	@ (8001740 <pump_pid_control+0x248>)
 80016b4:	edd3 7a00 	vldr	s15, [r3]
 80016b8:	eef1 7a67 	vneg.f32	s15, s15
 80016bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016c0:	ee17 3a90 	vmov	r3, s15
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	4b22      	ldr	r3, [pc, #136]	@ (8001754 <pump_pid_control+0x25c>)
 80016cc:	801a      	strh	r2, [r3, #0]
            drain_pwm_right += (uint16_t)(-pid_output_pump);
 80016ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001740 <pump_pid_control+0x248>)
 80016d0:	edd3 7a00 	vldr	s15, [r3]
 80016d4:	eef1 7a67 	vneg.f32	s15, s15
 80016d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016dc:	ee17 3a90 	vmov	r3, s15
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001758 <pump_pid_control+0x260>)
 80016e4:	881b      	ldrh	r3, [r3, #0]
 80016e6:	4413      	add	r3, r2
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001758 <pump_pid_control+0x260>)
 80016ec:	801a      	strh	r2, [r3, #0]
        }
    }
    // PWM değerlerini timer'a uygula
    TIM1->CCR1 = drain_pwm_left;
 80016ee:	4b19      	ldr	r3, [pc, #100]	@ (8001754 <pump_pid_control+0x25c>)
 80016f0:	881a      	ldrh	r2, [r3, #0]
 80016f2:	4b1a      	ldr	r3, [pc, #104]	@ (800175c <pump_pid_control+0x264>)
 80016f4:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM1->CCR2 = drain_pwm_right;
 80016f6:	4b18      	ldr	r3, [pc, #96]	@ (8001758 <pump_pid_control+0x260>)
 80016f8:	881a      	ldrh	r2, [r3, #0]
 80016fa:	4b18      	ldr	r3, [pc, #96]	@ (800175c <pump_pid_control+0x264>)
 80016fc:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM1->CCR3 = fill_pwm_right;
 80016fe:	4b14      	ldr	r3, [pc, #80]	@ (8001750 <pump_pid_control+0x258>)
 8001700:	881a      	ldrh	r2, [r3, #0]
 8001702:	4b16      	ldr	r3, [pc, #88]	@ (800175c <pump_pid_control+0x264>)
 8001704:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM1->CCR4 = fill_pwm_left;
 8001706:	4b11      	ldr	r3, [pc, #68]	@ (800174c <pump_pid_control+0x254>)
 8001708:	881a      	ldrh	r2, [r3, #0]
 800170a:	4b14      	ldr	r3, [pc, #80]	@ (800175c <pump_pid_control+0x264>)
 800170c:	641a      	str	r2, [r3, #64]	@ 0x40
    // Bu fonksiyon, su pompası sistemindeki PID kontrolünü yapar. 'roll_error' sol ve sağ pompaların yönünü belirler.
    // PID çıkışı, ilgili PWM değerlerini ayarlayarak sol ve sağ pompaların çalışma hızını kontrol eder.
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	ecbd 8b02 	vpop	{d8}
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	2000048c 	.word	0x2000048c
 8001720:	2000045c 	.word	0x2000045c
 8001724:	2000047c 	.word	0x2000047c
 8001728:	20000484 	.word	0x20000484
 800172c:	20000504 	.word	0x20000504
 8001730:	20000480 	.word	0x20000480
 8001734:	20000010 	.word	0x20000010
 8001738:	20000014 	.word	0x20000014
 800173c:	20000018 	.word	0x20000018
 8001740:	20000488 	.word	0x20000488
 8001744:	40020000 	.word	0x40020000
 8001748:	40021000 	.word	0x40021000
 800174c:	2000049a 	.word	0x2000049a
 8001750:	20000498 	.word	0x20000498
 8001754:	2000049e 	.word	0x2000049e
 8001758:	2000049c 	.word	0x2000049c
 800175c:	40010000 	.word	0x40010000

08001760 <calculate_pwm_values>:

// PWM değerlerini hesaplayan fonksiyon
void calculate_pwm_values() {
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
    // Doldurma Süresi için gerekli voltajı hesapla
    float fill_voltage = (6.0 * 35.56) / desired_fill_time;
 8001766:	4b62      	ldr	r3, [pc, #392]	@ (80018f0 <calculate_pwm_values+0x190>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f7fe feec 	bl	8000548 <__aeabi_f2d>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	a15a      	add	r1, pc, #360	@ (adr r1, 80018e0 <calculate_pwm_values+0x180>)
 8001776:	e9d1 0100 	ldrd	r0, r1, [r1]
 800177a:	f7ff f867 	bl	800084c <__aeabi_ddiv>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4610      	mov	r0, r2
 8001784:	4619      	mov	r1, r3
 8001786:	f7ff fa2f 	bl	8000be8 <__aeabi_d2f>
 800178a:	4603      	mov	r3, r0
 800178c:	60fb      	str	r3, [r7, #12]
    // PWM değeri hesapla
    fill_pwm_left = (uint16_t)((fill_voltage / 12.0) * 1000);
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	f7fe feda 	bl	8000548 <__aeabi_f2d>
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	4b56      	ldr	r3, [pc, #344]	@ (80018f4 <calculate_pwm_values+0x194>)
 800179a:	f7ff f857 	bl	800084c <__aeabi_ddiv>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4610      	mov	r0, r2
 80017a4:	4619      	mov	r1, r3
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	4b53      	ldr	r3, [pc, #332]	@ (80018f8 <calculate_pwm_values+0x198>)
 80017ac:	f7fe ff24 	bl	80005f8 <__aeabi_dmul>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	f7ff f9f6 	bl	8000ba8 <__aeabi_d2uiz>
 80017bc:	4603      	mov	r3, r0
 80017be:	b29a      	uxth	r2, r3
 80017c0:	4b4e      	ldr	r3, [pc, #312]	@ (80018fc <calculate_pwm_values+0x19c>)
 80017c2:	801a      	strh	r2, [r3, #0]
    fill_pwm_right = (uint16_t)((fill_voltage / 12.0) * 1000);
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	f7fe febf 	bl	8000548 <__aeabi_f2d>
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	4b49      	ldr	r3, [pc, #292]	@ (80018f4 <calculate_pwm_values+0x194>)
 80017d0:	f7ff f83c 	bl	800084c <__aeabi_ddiv>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	4610      	mov	r0, r2
 80017da:	4619      	mov	r1, r3
 80017dc:	f04f 0200 	mov.w	r2, #0
 80017e0:	4b45      	ldr	r3, [pc, #276]	@ (80018f8 <calculate_pwm_values+0x198>)
 80017e2:	f7fe ff09 	bl	80005f8 <__aeabi_dmul>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4610      	mov	r0, r2
 80017ec:	4619      	mov	r1, r3
 80017ee:	f7ff f9db 	bl	8000ba8 <__aeabi_d2uiz>
 80017f2:	4603      	mov	r3, r0
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	4b42      	ldr	r3, [pc, #264]	@ (8001900 <calculate_pwm_values+0x1a0>)
 80017f8:	801a      	strh	r2, [r3, #0]
    // Boşaltma Süresi için gerekli voltajı hesapla
    float drain_voltage = (6.0 * 28.80) / desired_drain_time;
 80017fa:	4b42      	ldr	r3, [pc, #264]	@ (8001904 <calculate_pwm_values+0x1a4>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe fea2 	bl	8000548 <__aeabi_f2d>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	a137      	add	r1, pc, #220	@ (adr r1, 80018e8 <calculate_pwm_values+0x188>)
 800180a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800180e:	f7ff f81d 	bl	800084c <__aeabi_ddiv>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4610      	mov	r0, r2
 8001818:	4619      	mov	r1, r3
 800181a:	f7ff f9e5 	bl	8000be8 <__aeabi_d2f>
 800181e:	4603      	mov	r3, r0
 8001820:	60bb      	str	r3, [r7, #8]
    // PWM değeri hesapla
    drain_pwm_left = (uint16_t)((drain_voltage / 12.0) * 1000);
 8001822:	68b8      	ldr	r0, [r7, #8]
 8001824:	f7fe fe90 	bl	8000548 <__aeabi_f2d>
 8001828:	f04f 0200 	mov.w	r2, #0
 800182c:	4b31      	ldr	r3, [pc, #196]	@ (80018f4 <calculate_pwm_values+0x194>)
 800182e:	f7ff f80d 	bl	800084c <__aeabi_ddiv>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4610      	mov	r0, r2
 8001838:	4619      	mov	r1, r3
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	4b2e      	ldr	r3, [pc, #184]	@ (80018f8 <calculate_pwm_values+0x198>)
 8001840:	f7fe feda 	bl	80005f8 <__aeabi_dmul>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4610      	mov	r0, r2
 800184a:	4619      	mov	r1, r3
 800184c:	f7ff f9ac 	bl	8000ba8 <__aeabi_d2uiz>
 8001850:	4603      	mov	r3, r0
 8001852:	b29a      	uxth	r2, r3
 8001854:	4b2c      	ldr	r3, [pc, #176]	@ (8001908 <calculate_pwm_values+0x1a8>)
 8001856:	801a      	strh	r2, [r3, #0]
    fill_pwm_right = (uint16_t)((fill_voltage / 12.0) * 1000);
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f7fe fe75 	bl	8000548 <__aeabi_f2d>
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	4b24      	ldr	r3, [pc, #144]	@ (80018f4 <calculate_pwm_values+0x194>)
 8001864:	f7fe fff2 	bl	800084c <__aeabi_ddiv>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4610      	mov	r0, r2
 800186e:	4619      	mov	r1, r3
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	4b20      	ldr	r3, [pc, #128]	@ (80018f8 <calculate_pwm_values+0x198>)
 8001876:	f7fe febf 	bl	80005f8 <__aeabi_dmul>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4610      	mov	r0, r2
 8001880:	4619      	mov	r1, r3
 8001882:	f7ff f991 	bl	8000ba8 <__aeabi_d2uiz>
 8001886:	4603      	mov	r3, r0
 8001888:	b29a      	uxth	r2, r3
 800188a:	4b1d      	ldr	r3, [pc, #116]	@ (8001900 <calculate_pwm_values+0x1a0>)
 800188c:	801a      	strh	r2, [r3, #0]
    // DC Motor Süresi için gerekli voltajı hesapla
    float dc_motor_voltage = (12.0 * 20.0) / desired_fill_time;
 800188e:	4b18      	ldr	r3, [pc, #96]	@ (80018f0 <calculate_pwm_values+0x190>)
 8001890:	ed93 7a00 	vldr	s14, [r3]
 8001894:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 800190c <calculate_pwm_values+0x1ac>
 8001898:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800189c:	edc7 7a01 	vstr	s15, [r7, #4]
    // PWM değeri hesapla
    dc_motor_pwm = (uint16_t)((dc_motor_voltage / 12.0) * 1000);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7fe fe51 	bl	8000548 <__aeabi_f2d>
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	4b12      	ldr	r3, [pc, #72]	@ (80018f4 <calculate_pwm_values+0x194>)
 80018ac:	f7fe ffce 	bl	800084c <__aeabi_ddiv>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	4b0e      	ldr	r3, [pc, #56]	@ (80018f8 <calculate_pwm_values+0x198>)
 80018be:	f7fe fe9b 	bl	80005f8 <__aeabi_dmul>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	4610      	mov	r0, r2
 80018c8:	4619      	mov	r1, r3
 80018ca:	f7ff f96d 	bl	8000ba8 <__aeabi_d2uiz>
 80018ce:	4603      	mov	r3, r0
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001910 <calculate_pwm_values+0x1b0>)
 80018d4:	801a      	strh	r2, [r3, #0]
    // Bu fonksiyon, pompa sisteminin doldurma, boşaltma ve DC motor için gerekli PWM değerlerini hesaplar.
    // Hesaplanan voltajlar, belirli bir zaman diliminde gereken PWM değerlerine dönüştürülür.
}
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	1eb851ec 	.word	0x1eb851ec
 80018e4:	406aab85 	.word	0x406aab85
 80018e8:	9999999a 	.word	0x9999999a
 80018ec:	40659999 	.word	0x40659999
 80018f0:	2000001c 	.word	0x2000001c
 80018f4:	40280000 	.word	0x40280000
 80018f8:	408f4000 	.word	0x408f4000
 80018fc:	2000049a 	.word	0x2000049a
 8001900:	20000498 	.word	0x20000498
 8001904:	20000020 	.word	0x20000020
 8001908:	2000049e 	.word	0x2000049e
 800190c:	43700000 	.word	0x43700000
 8001910:	200004a0 	.word	0x200004a0

08001914 <getMillis>:


// Mikrosaniye cinsinden zamanı döndüren fonksiyon
// STM32'de bu işlevi SysTick timer sağlar.
// SysTick timer kullanarak milisaniye cinsinden zamanı döndüren fonksiyon
uint32_t getMillis(){
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8001918:	f001 fd46 	bl	80033a8 <HAL_GetTick>
 800191c:	4603      	mov	r3, r0
}
 800191e:	4618      	mov	r0, r3
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <calculate_z_depth>:

// Bu fonksiyon, su altı aracının derinliğini hesaplamak için kullanılır.
// İlk olarak geçen süreyi hesaplar, ardından hız (z_speed) ve derinlik (z_depth) hesaplamaları yapılır.
// 'z_speed' ivme (z_ivme) ile zaman farkının çarpımıyla güncellenir.
// 'z_depth' ise hız (z_speed) ile zaman farkının çarpımıyla hesaplanır.
void calculate_z_depth() {
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
    float delta_time = (HAL_GetTick() - prevtime1) / 1000.0; // Geçen süreyi saniye cinsinden hesapla
 800192a:	f001 fd3d 	bl	80033a8 <HAL_GetTick>
 800192e:	ee07 0a90 	vmov	s15, r0
 8001932:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001936:	4b20      	ldr	r3, [pc, #128]	@ (80019b8 <calculate_z_depth+0x94>)
 8001938:	edd3 7a00 	vldr	s15, [r3]
 800193c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001940:	ee17 0a90 	vmov	r0, s15
 8001944:	f7fe fe00 	bl	8000548 <__aeabi_f2d>
 8001948:	f04f 0200 	mov.w	r2, #0
 800194c:	4b1b      	ldr	r3, [pc, #108]	@ (80019bc <calculate_z_depth+0x98>)
 800194e:	f7fe ff7d 	bl	800084c <__aeabi_ddiv>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	4610      	mov	r0, r2
 8001958:	4619      	mov	r1, r3
 800195a:	f7ff f945 	bl	8000be8 <__aeabi_d2f>
 800195e:	4603      	mov	r3, r0
 8001960:	607b      	str	r3, [r7, #4]

    // İlk integral: hız (z_speed) hesapla
    z_speed += z_ivme * delta_time;
 8001962:	4b17      	ldr	r3, [pc, #92]	@ (80019c0 <calculate_z_depth+0x9c>)
 8001964:	ed93 7a00 	vldr	s14, [r3]
 8001968:	edd7 7a01 	vldr	s15, [r7, #4]
 800196c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001970:	4b14      	ldr	r3, [pc, #80]	@ (80019c4 <calculate_z_depth+0xa0>)
 8001972:	edd3 7a00 	vldr	s15, [r3]
 8001976:	ee77 7a27 	vadd.f32	s15, s14, s15
 800197a:	4b12      	ldr	r3, [pc, #72]	@ (80019c4 <calculate_z_depth+0xa0>)
 800197c:	edc3 7a00 	vstr	s15, [r3]

    // İkinci integral: derinlik (z_depth) hesapla
    z_depth += z_speed * delta_time;
 8001980:	4b10      	ldr	r3, [pc, #64]	@ (80019c4 <calculate_z_depth+0xa0>)
 8001982:	ed93 7a00 	vldr	s14, [r3]
 8001986:	edd7 7a01 	vldr	s15, [r7, #4]
 800198a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800198e:	4b0e      	ldr	r3, [pc, #56]	@ (80019c8 <calculate_z_depth+0xa4>)
 8001990:	edd3 7a00 	vldr	s15, [r3]
 8001994:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001998:	4b0b      	ldr	r3, [pc, #44]	@ (80019c8 <calculate_z_depth+0xa4>)
 800199a:	edc3 7a00 	vstr	s15, [r3]

    prevtime1 = HAL_GetTick(); // Zamanı güncelle
 800199e:	f001 fd03 	bl	80033a8 <HAL_GetTick>
 80019a2:	ee07 0a90 	vmov	s15, r0
 80019a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019aa:	4b03      	ldr	r3, [pc, #12]	@ (80019b8 <calculate_z_depth+0x94>)
 80019ac:	edc3 7a00 	vstr	s15, [r3]
}
 80019b0:	bf00      	nop
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20000508 	.word	0x20000508
 80019bc:	408f4000 	.word	0x408f4000
 80019c0:	200004f8 	.word	0x200004f8
 80019c4:	200004fc 	.word	0x200004fc
 80019c8:	20000500 	.word	0x20000500
 80019cc:	00000000 	.word	0x00000000

080019d0 <mpu6050>:

// MPU6050 sensöründen verileri okur ve motor kontrolü için gerekli olan açıyı hesaplar.
// Bu fonksiyon ivmeölçer ve jiroskop verilerini okur ve her bir eksende ilgili açıyı hesaplar.
// Hesaplanan açıları daha sonra aracın hareketini yönlendirmek için kullanır.
void mpu6050() {
 80019d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af02      	add	r7, sp, #8
    prevtime1 = time1; // Önceki zamanı sakla
 80019d8:	4bbd      	ldr	r3, [pc, #756]	@ (8001cd0 <mpu6050+0x300>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4abd      	ldr	r2, [pc, #756]	@ (8001cd4 <mpu6050+0x304>)
 80019de:	6013      	str	r3, [r2, #0]
    time1 = HAL_GetTick(); // Geçerli zamanı al
 80019e0:	f001 fce2 	bl	80033a8 <HAL_GetTick>
 80019e4:	ee07 0a90 	vmov	s15, r0
 80019e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019ec:	4bb8      	ldr	r3, [pc, #736]	@ (8001cd0 <mpu6050+0x300>)
 80019ee:	edc3 7a00 	vstr	s15, [r3]
    elapsedtime1 = (time1 - prevtime1) * 1000; // Geçen süreyi hesapla
 80019f2:	4bb7      	ldr	r3, [pc, #732]	@ (8001cd0 <mpu6050+0x300>)
 80019f4:	ed93 7a00 	vldr	s14, [r3]
 80019f8:	4bb6      	ldr	r3, [pc, #728]	@ (8001cd4 <mpu6050+0x304>)
 80019fa:	edd3 7a00 	vldr	s15, [r3]
 80019fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a02:	ed9f 7ab5 	vldr	s14, [pc, #724]	@ 8001cd8 <mpu6050+0x308>
 8001a06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a0a:	4bb4      	ldr	r3, [pc, #720]	@ (8001cdc <mpu6050+0x30c>)
 8001a0c:	edc3 7a00 	vstr	s15, [r3]

    // İvmeölçer verilerini oku
    tuffer[0] = 0x3B; // İvmeölçer veri başlangıç adresi
 8001a10:	4bb3      	ldr	r3, [pc, #716]	@ (8001ce0 <mpu6050+0x310>)
 8001a12:	223b      	movs	r2, #59	@ 0x3b
 8001a14:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, tuffer, 1, HAL_MAX_DELAY); // Adresi gönder
 8001a16:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	4ab0      	ldr	r2, [pc, #704]	@ (8001ce0 <mpu6050+0x310>)
 8001a20:	21d0      	movs	r1, #208	@ 0xd0
 8001a22:	48b0      	ldr	r0, [pc, #704]	@ (8001ce4 <mpu6050+0x314>)
 8001a24:	f002 fce8 	bl	80043f8 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDR, tuffer, 6, HAL_MAX_DELAY); // 6 bayt veri al
 8001a28:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	2306      	movs	r3, #6
 8001a30:	4aab      	ldr	r2, [pc, #684]	@ (8001ce0 <mpu6050+0x310>)
 8001a32:	21d0      	movs	r1, #208	@ 0xd0
 8001a34:	48ab      	ldr	r0, [pc, #684]	@ (8001ce4 <mpu6050+0x314>)
 8001a36:	f002 fddd 	bl	80045f4 <HAL_I2C_Master_Receive>

    // Ham ivmeölçer verilerini birleştir
    acc_raw[0] = (tuffer[0] << 8 | tuffer[1]); // X ekseni
 8001a3a:	4ba9      	ldr	r3, [pc, #676]	@ (8001ce0 <mpu6050+0x310>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	021b      	lsls	r3, r3, #8
 8001a40:	b21a      	sxth	r2, r3
 8001a42:	4ba7      	ldr	r3, [pc, #668]	@ (8001ce0 <mpu6050+0x310>)
 8001a44:	785b      	ldrb	r3, [r3, #1]
 8001a46:	b21b      	sxth	r3, r3
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	b21a      	sxth	r2, r3
 8001a4c:	4ba6      	ldr	r3, [pc, #664]	@ (8001ce8 <mpu6050+0x318>)
 8001a4e:	801a      	strh	r2, [r3, #0]
    acc_raw[1] = (tuffer[2] << 8 | tuffer[3]); // Y ekseni
 8001a50:	4ba3      	ldr	r3, [pc, #652]	@ (8001ce0 <mpu6050+0x310>)
 8001a52:	789b      	ldrb	r3, [r3, #2]
 8001a54:	021b      	lsls	r3, r3, #8
 8001a56:	b21a      	sxth	r2, r3
 8001a58:	4ba1      	ldr	r3, [pc, #644]	@ (8001ce0 <mpu6050+0x310>)
 8001a5a:	78db      	ldrb	r3, [r3, #3]
 8001a5c:	b21b      	sxth	r3, r3
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	b21a      	sxth	r2, r3
 8001a62:	4ba1      	ldr	r3, [pc, #644]	@ (8001ce8 <mpu6050+0x318>)
 8001a64:	805a      	strh	r2, [r3, #2]
    acc_raw[2] = (tuffer[4] << 8 | tuffer[5]); // Z ekseni
 8001a66:	4b9e      	ldr	r3, [pc, #632]	@ (8001ce0 <mpu6050+0x310>)
 8001a68:	791b      	ldrb	r3, [r3, #4]
 8001a6a:	021b      	lsls	r3, r3, #8
 8001a6c:	b21a      	sxth	r2, r3
 8001a6e:	4b9c      	ldr	r3, [pc, #624]	@ (8001ce0 <mpu6050+0x310>)
 8001a70:	795b      	ldrb	r3, [r3, #5]
 8001a72:	b21b      	sxth	r3, r3
 8001a74:	4313      	orrs	r3, r2
 8001a76:	b21a      	sxth	r2, r3
 8001a78:	4b9b      	ldr	r3, [pc, #620]	@ (8001ce8 <mpu6050+0x318>)
 8001a7a:	809a      	strh	r2, [r3, #4]

    // Sıcaklık verisini oku
    buffer[0] = 0x41; // Sıcaklık veri başlangıç adresi
 8001a7c:	4b9b      	ldr	r3, [pc, #620]	@ (8001cec <mpu6050+0x31c>)
 8001a7e:	2241      	movs	r2, #65	@ 0x41
 8001a80:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, buffer, 1, HAL_MAX_DELAY); // Adresi gönder
 8001a82:	f04f 33ff 	mov.w	r3, #4294967295
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	2301      	movs	r3, #1
 8001a8a:	4a98      	ldr	r2, [pc, #608]	@ (8001cec <mpu6050+0x31c>)
 8001a8c:	21d0      	movs	r1, #208	@ 0xd0
 8001a8e:	4895      	ldr	r0, [pc, #596]	@ (8001ce4 <mpu6050+0x314>)
 8001a90:	f002 fcb2 	bl	80043f8 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDR, buffer, 2, HAL_MAX_DELAY); // 2 bayt veri al
 8001a94:	f04f 33ff 	mov.w	r3, #4294967295
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	4a93      	ldr	r2, [pc, #588]	@ (8001cec <mpu6050+0x31c>)
 8001a9e:	21d0      	movs	r1, #208	@ 0xd0
 8001aa0:	4890      	ldr	r0, [pc, #576]	@ (8001ce4 <mpu6050+0x314>)
 8001aa2:	f002 fda7 	bl	80045f4 <HAL_I2C_Master_Receive>

    // Ham sıcaklık verisini birleştir ve gerçek sıcaklığa çevir
    raw_temp = (buffer[0] << 8 | buffer[1]);
 8001aa6:	4b91      	ldr	r3, [pc, #580]	@ (8001cec <mpu6050+0x31c>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	021b      	lsls	r3, r3, #8
 8001aac:	b21a      	sxth	r2, r3
 8001aae:	4b8f      	ldr	r3, [pc, #572]	@ (8001cec <mpu6050+0x31c>)
 8001ab0:	785b      	ldrb	r3, [r3, #1]
 8001ab2:	b21b      	sxth	r3, r3
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	b21a      	sxth	r2, r3
 8001ab8:	4b8d      	ldr	r3, [pc, #564]	@ (8001cf0 <mpu6050+0x320>)
 8001aba:	801a      	strh	r2, [r3, #0]
    temp = (raw_temp / 340.0) + 36.53; // MPU6050 datasheet formülüne göre hesaplama
 8001abc:	4b8c      	ldr	r3, [pc, #560]	@ (8001cf0 <mpu6050+0x320>)
 8001abe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7fe fd2e 	bl	8000524 <__aeabi_i2d>
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	4b89      	ldr	r3, [pc, #548]	@ (8001cf4 <mpu6050+0x324>)
 8001ace:	f7fe febd 	bl	800084c <__aeabi_ddiv>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	4619      	mov	r1, r3
 8001ada:	a377      	add	r3, pc, #476	@ (adr r3, 8001cb8 <mpu6050+0x2e8>)
 8001adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae0:	f7fe fbd4 	bl	800028c <__adddf3>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4610      	mov	r0, r2
 8001aea:	4619      	mov	r1, r3
 8001aec:	f7ff f87c 	bl	8000be8 <__aeabi_d2f>
 8001af0:	4603      	mov	r3, r0
 8001af2:	4a81      	ldr	r2, [pc, #516]	@ (8001cf8 <mpu6050+0x328>)
 8001af4:	6013      	str	r3, [r2, #0]

    // Jiroskop verilerini oku
    cuffer[0] = 0x43; // Jiroskop veri başlangıç adresi
 8001af6:	4b81      	ldr	r3, [pc, #516]	@ (8001cfc <mpu6050+0x32c>)
 8001af8:	2243      	movs	r2, #67	@ 0x43
 8001afa:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, cuffer, 1, HAL_MAX_DELAY); // Adresi gönder
 8001afc:	f04f 33ff 	mov.w	r3, #4294967295
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	2301      	movs	r3, #1
 8001b04:	4a7d      	ldr	r2, [pc, #500]	@ (8001cfc <mpu6050+0x32c>)
 8001b06:	21d0      	movs	r1, #208	@ 0xd0
 8001b08:	4876      	ldr	r0, [pc, #472]	@ (8001ce4 <mpu6050+0x314>)
 8001b0a:	f002 fc75 	bl	80043f8 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDR, cuffer, 6, HAL_MAX_DELAY); // 6 bayt veri al
 8001b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	2306      	movs	r3, #6
 8001b16:	4a79      	ldr	r2, [pc, #484]	@ (8001cfc <mpu6050+0x32c>)
 8001b18:	21d0      	movs	r1, #208	@ 0xd0
 8001b1a:	4872      	ldr	r0, [pc, #456]	@ (8001ce4 <mpu6050+0x314>)
 8001b1c:	f002 fd6a 	bl	80045f4 <HAL_I2C_Master_Receive>

    // Ham jiroskop verilerini birleştir ve kalibrasyon değerlerini çıkar
    gyro_raw[0] = (cuffer[0] << 8 | cuffer[1]) - gyro_cal[0]; // X ekseni
 8001b20:	4b76      	ldr	r3, [pc, #472]	@ (8001cfc <mpu6050+0x32c>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	021b      	lsls	r3, r3, #8
 8001b26:	4a75      	ldr	r2, [pc, #468]	@ (8001cfc <mpu6050+0x32c>)
 8001b28:	7852      	ldrb	r2, [r2, #1]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	ee07 3a90 	vmov	s15, r3
 8001b30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b34:	4b72      	ldr	r3, [pc, #456]	@ (8001d00 <mpu6050+0x330>)
 8001b36:	edd3 7a00 	vldr	s15, [r3]
 8001b3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b42:	ee17 3a90 	vmov	r3, s15
 8001b46:	b21a      	sxth	r2, r3
 8001b48:	4b6e      	ldr	r3, [pc, #440]	@ (8001d04 <mpu6050+0x334>)
 8001b4a:	801a      	strh	r2, [r3, #0]
    gyro_raw[1] = (cuffer[2] << 8 | cuffer[3]) - gyro_cal[1]; // Y ekseni
 8001b4c:	4b6b      	ldr	r3, [pc, #428]	@ (8001cfc <mpu6050+0x32c>)
 8001b4e:	789b      	ldrb	r3, [r3, #2]
 8001b50:	021b      	lsls	r3, r3, #8
 8001b52:	4a6a      	ldr	r2, [pc, #424]	@ (8001cfc <mpu6050+0x32c>)
 8001b54:	78d2      	ldrb	r2, [r2, #3]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	ee07 3a90 	vmov	s15, r3
 8001b5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b60:	4b67      	ldr	r3, [pc, #412]	@ (8001d00 <mpu6050+0x330>)
 8001b62:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b6e:	ee17 3a90 	vmov	r3, s15
 8001b72:	b21a      	sxth	r2, r3
 8001b74:	4b63      	ldr	r3, [pc, #396]	@ (8001d04 <mpu6050+0x334>)
 8001b76:	805a      	strh	r2, [r3, #2]
    gyro_raw[2] = (cuffer[4] << 8 | cuffer[5]) - gyro_cal[2]; // Z ekseni
 8001b78:	4b60      	ldr	r3, [pc, #384]	@ (8001cfc <mpu6050+0x32c>)
 8001b7a:	791b      	ldrb	r3, [r3, #4]
 8001b7c:	021b      	lsls	r3, r3, #8
 8001b7e:	4a5f      	ldr	r2, [pc, #380]	@ (8001cfc <mpu6050+0x32c>)
 8001b80:	7952      	ldrb	r2, [r2, #5]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	ee07 3a90 	vmov	s15, r3
 8001b88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b8c:	4b5c      	ldr	r3, [pc, #368]	@ (8001d00 <mpu6050+0x330>)
 8001b8e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b9a:	ee17 3a90 	vmov	r3, s15
 8001b9e:	b21a      	sxth	r2, r3
 8001ba0:	4b58      	ldr	r3, [pc, #352]	@ (8001d04 <mpu6050+0x334>)
 8001ba2:	809a      	strh	r2, [r3, #4]

    // Jiroskop verilerini kullanarak açıları güncelle
    angle_pitch_gyro += gyro_raw[0] * 0.0000611; // Pitch açısı
 8001ba4:	4b58      	ldr	r3, [pc, #352]	@ (8001d08 <mpu6050+0x338>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7fe fccd 	bl	8000548 <__aeabi_f2d>
 8001bae:	4604      	mov	r4, r0
 8001bb0:	460d      	mov	r5, r1
 8001bb2:	4b54      	ldr	r3, [pc, #336]	@ (8001d04 <mpu6050+0x334>)
 8001bb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7fe fcb3 	bl	8000524 <__aeabi_i2d>
 8001bbe:	a340      	add	r3, pc, #256	@ (adr r3, 8001cc0 <mpu6050+0x2f0>)
 8001bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc4:	f7fe fd18 	bl	80005f8 <__aeabi_dmul>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4620      	mov	r0, r4
 8001bce:	4629      	mov	r1, r5
 8001bd0:	f7fe fb5c 	bl	800028c <__adddf3>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4610      	mov	r0, r2
 8001bda:	4619      	mov	r1, r3
 8001bdc:	f7ff f804 	bl	8000be8 <__aeabi_d2f>
 8001be0:	4603      	mov	r3, r0
 8001be2:	4a49      	ldr	r2, [pc, #292]	@ (8001d08 <mpu6050+0x338>)
 8001be4:	6013      	str	r3, [r2, #0]
    angle_roll_gyro += gyro_raw[1] * 0.0000611; // Roll açısı
 8001be6:	4b49      	ldr	r3, [pc, #292]	@ (8001d0c <mpu6050+0x33c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe fcac 	bl	8000548 <__aeabi_f2d>
 8001bf0:	4604      	mov	r4, r0
 8001bf2:	460d      	mov	r5, r1
 8001bf4:	4b43      	ldr	r3, [pc, #268]	@ (8001d04 <mpu6050+0x334>)
 8001bf6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe fc92 	bl	8000524 <__aeabi_i2d>
 8001c00:	a32f      	add	r3, pc, #188	@ (adr r3, 8001cc0 <mpu6050+0x2f0>)
 8001c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c06:	f7fe fcf7 	bl	80005f8 <__aeabi_dmul>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4620      	mov	r0, r4
 8001c10:	4629      	mov	r1, r5
 8001c12:	f7fe fb3b 	bl	800028c <__adddf3>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4610      	mov	r0, r2
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f7fe ffe3 	bl	8000be8 <__aeabi_d2f>
 8001c22:	4603      	mov	r3, r0
 8001c24:	4a39      	ldr	r2, [pc, #228]	@ (8001d0c <mpu6050+0x33c>)
 8001c26:	6013      	str	r3, [r2, #0]

    // Jiroskop verilerini kullanarak birbirine etki eden açıları güncelle
    angle_pitch_gyro += angle_roll_gyro * sin(gyro_raw[2] * 0.000001066);
 8001c28:	4b37      	ldr	r3, [pc, #220]	@ (8001d08 <mpu6050+0x338>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe fc8b 	bl	8000548 <__aeabi_f2d>
 8001c32:	4604      	mov	r4, r0
 8001c34:	460d      	mov	r5, r1
 8001c36:	4b35      	ldr	r3, [pc, #212]	@ (8001d0c <mpu6050+0x33c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe fc84 	bl	8000548 <__aeabi_f2d>
 8001c40:	4680      	mov	r8, r0
 8001c42:	4689      	mov	r9, r1
 8001c44:	4b2f      	ldr	r3, [pc, #188]	@ (8001d04 <mpu6050+0x334>)
 8001c46:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7fe fc6a 	bl	8000524 <__aeabi_i2d>
 8001c50:	a31d      	add	r3, pc, #116	@ (adr r3, 8001cc8 <mpu6050+0x2f8>)
 8001c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c56:	f7fe fccf 	bl	80005f8 <__aeabi_dmul>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	ec43 2b17 	vmov	d7, r2, r3
 8001c62:	eeb0 0a47 	vmov.f32	s0, s14
 8001c66:	eef0 0a67 	vmov.f32	s1, s15
 8001c6a:	f009 fb39 	bl	800b2e0 <sin>
 8001c6e:	ec53 2b10 	vmov	r2, r3, d0
 8001c72:	4640      	mov	r0, r8
 8001c74:	4649      	mov	r1, r9
 8001c76:	f7fe fcbf 	bl	80005f8 <__aeabi_dmul>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4620      	mov	r0, r4
 8001c80:	4629      	mov	r1, r5
 8001c82:	f7fe fb03 	bl	800028c <__adddf3>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f7fe ffab 	bl	8000be8 <__aeabi_d2f>
 8001c92:	4603      	mov	r3, r0
 8001c94:	4a1c      	ldr	r2, [pc, #112]	@ (8001d08 <mpu6050+0x338>)
 8001c96:	6013      	str	r3, [r2, #0]
    angle_roll_gyro += angle_pitch_gyro * sin(gyro_raw[2] * 0.000001066);
 8001c98:	4b1c      	ldr	r3, [pc, #112]	@ (8001d0c <mpu6050+0x33c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe fc53 	bl	8000548 <__aeabi_f2d>
 8001ca2:	4604      	mov	r4, r0
 8001ca4:	460d      	mov	r5, r1
 8001ca6:	4b18      	ldr	r3, [pc, #96]	@ (8001d08 <mpu6050+0x338>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe fc4c 	bl	8000548 <__aeabi_f2d>
 8001cb0:	4680      	mov	r8, r0
 8001cb2:	4689      	mov	r9, r1
 8001cb4:	e02c      	b.n	8001d10 <mpu6050+0x340>
 8001cb6:	bf00      	nop
 8001cb8:	0a3d70a4 	.word	0x0a3d70a4
 8001cbc:	404243d7 	.word	0x404243d7
 8001cc0:	01d41596 	.word	0x01d41596
 8001cc4:	3f10045a 	.word	0x3f10045a
 8001cc8:	652c6e62 	.word	0x652c6e62
 8001ccc:	3eb1e26f 	.word	0x3eb1e26f
 8001cd0:	2000050c 	.word	0x2000050c
 8001cd4:	20000508 	.word	0x20000508
 8001cd8:	447a0000 	.word	0x447a0000
 8001cdc:	20000510 	.word	0x20000510
 8001ce0:	200004ac 	.word	0x200004ac
 8001ce4:	2000032c 	.word	0x2000032c
 8001ce8:	200004b8 	.word	0x200004b8
 8001cec:	200004a4 	.word	0x200004a4
 8001cf0:	200004e8 	.word	0x200004e8
 8001cf4:	40754000 	.word	0x40754000
 8001cf8:	200004ec 	.word	0x200004ec
 8001cfc:	200004a8 	.word	0x200004a8
 8001d00:	200004c0 	.word	0x200004c0
 8001d04:	200004b0 	.word	0x200004b0
 8001d08:	200004d0 	.word	0x200004d0
 8001d0c:	200004d4 	.word	0x200004d4
 8001d10:	4ba3      	ldr	r3, [pc, #652]	@ (8001fa0 <mpu6050+0x5d0>)
 8001d12:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe fc04 	bl	8000524 <__aeabi_i2d>
 8001d1c:	a396      	add	r3, pc, #600	@ (adr r3, 8001f78 <mpu6050+0x5a8>)
 8001d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d22:	f7fe fc69 	bl	80005f8 <__aeabi_dmul>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	ec43 2b17 	vmov	d7, r2, r3
 8001d2e:	eeb0 0a47 	vmov.f32	s0, s14
 8001d32:	eef0 0a67 	vmov.f32	s1, s15
 8001d36:	f009 fad3 	bl	800b2e0 <sin>
 8001d3a:	ec53 2b10 	vmov	r2, r3, d0
 8001d3e:	4640      	mov	r0, r8
 8001d40:	4649      	mov	r1, r9
 8001d42:	f7fe fc59 	bl	80005f8 <__aeabi_dmul>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4620      	mov	r0, r4
 8001d4c:	4629      	mov	r1, r5
 8001d4e:	f7fe fa9d 	bl	800028c <__adddf3>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	4610      	mov	r0, r2
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f7fe ff45 	bl	8000be8 <__aeabi_d2f>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	4a90      	ldr	r2, [pc, #576]	@ (8001fa4 <mpu6050+0x5d4>)
 8001d62:	6013      	str	r3, [r2, #0]

    // İvmeölçer verilerinin toplam vektörünü hesapla
    acc_total_vector = sqrt((acc_raw[0] * acc_raw[0]) + (acc_raw[1] * acc_raw[1]) + (acc_raw[2] * acc_raw[2]));
 8001d64:	4b90      	ldr	r3, [pc, #576]	@ (8001fa8 <mpu6050+0x5d8>)
 8001d66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	4b8e      	ldr	r3, [pc, #568]	@ (8001fa8 <mpu6050+0x5d8>)
 8001d6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d72:	fb03 f202 	mul.w	r2, r3, r2
 8001d76:	4b8c      	ldr	r3, [pc, #560]	@ (8001fa8 <mpu6050+0x5d8>)
 8001d78:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4b8a      	ldr	r3, [pc, #552]	@ (8001fa8 <mpu6050+0x5d8>)
 8001d80:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d84:	fb01 f303 	mul.w	r3, r1, r3
 8001d88:	441a      	add	r2, r3
 8001d8a:	4b87      	ldr	r3, [pc, #540]	@ (8001fa8 <mpu6050+0x5d8>)
 8001d8c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d90:	4619      	mov	r1, r3
 8001d92:	4b85      	ldr	r3, [pc, #532]	@ (8001fa8 <mpu6050+0x5d8>)
 8001d94:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d98:	fb01 f303 	mul.w	r3, r1, r3
 8001d9c:	4413      	add	r3, r2
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe fbc0 	bl	8000524 <__aeabi_i2d>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	ec43 2b10 	vmov	d0, r2, r3
 8001dac:	f009 fa62 	bl	800b274 <sqrt>
 8001db0:	ec53 2b10 	vmov	r2, r3, d0
 8001db4:	4610      	mov	r0, r2
 8001db6:	4619      	mov	r1, r3
 8001db8:	f7fe fece 	bl	8000b58 <__aeabi_d2iz>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	b21a      	sxth	r2, r3
 8001dc0:	4b7a      	ldr	r3, [pc, #488]	@ (8001fac <mpu6050+0x5dc>)
 8001dc2:	801a      	strh	r2, [r3, #0]

    // İvmeölçer verilerini kullanarak açıları hesapla
    angle_pitch_acc = asin((float)acc_raw[1] / acc_total_vector) * 57.296; // Pitch açısı
 8001dc4:	4b78      	ldr	r3, [pc, #480]	@ (8001fa8 <mpu6050+0x5d8>)
 8001dc6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001dca:	ee07 3a90 	vmov	s15, r3
 8001dce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dd2:	4b76      	ldr	r3, [pc, #472]	@ (8001fac <mpu6050+0x5dc>)
 8001dd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dd8:	ee07 3a90 	vmov	s15, r3
 8001ddc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001de0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001de4:	ee16 0a90 	vmov	r0, s13
 8001de8:	f7fe fbae 	bl	8000548 <__aeabi_f2d>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	ec43 2b10 	vmov	d0, r2, r3
 8001df4:	f009 fa0a 	bl	800b20c <asin>
 8001df8:	ec51 0b10 	vmov	r0, r1, d0
 8001dfc:	a360      	add	r3, pc, #384	@ (adr r3, 8001f80 <mpu6050+0x5b0>)
 8001dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e02:	f7fe fbf9 	bl	80005f8 <__aeabi_dmul>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f7fe feeb 	bl	8000be8 <__aeabi_d2f>
 8001e12:	4603      	mov	r3, r0
 8001e14:	4a66      	ldr	r2, [pc, #408]	@ (8001fb0 <mpu6050+0x5e0>)
 8001e16:	6013      	str	r3, [r2, #0]
    angle_roll_acc = asin((float)acc_raw[0] / acc_total_vector) * -57.296; // Roll açısı
 8001e18:	4b63      	ldr	r3, [pc, #396]	@ (8001fa8 <mpu6050+0x5d8>)
 8001e1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e1e:	ee07 3a90 	vmov	s15, r3
 8001e22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e26:	4b61      	ldr	r3, [pc, #388]	@ (8001fac <mpu6050+0x5dc>)
 8001e28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e2c:	ee07 3a90 	vmov	s15, r3
 8001e30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e34:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001e38:	ee16 0a90 	vmov	r0, s13
 8001e3c:	f7fe fb84 	bl	8000548 <__aeabi_f2d>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	ec43 2b10 	vmov	d0, r2, r3
 8001e48:	f009 f9e0 	bl	800b20c <asin>
 8001e4c:	ec51 0b10 	vmov	r0, r1, d0
 8001e50:	a34d      	add	r3, pc, #308	@ (adr r3, 8001f88 <mpu6050+0x5b8>)
 8001e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e56:	f7fe fbcf 	bl	80005f8 <__aeabi_dmul>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4610      	mov	r0, r2
 8001e60:	4619      	mov	r1, r3
 8001e62:	f7fe fec1 	bl	8000be8 <__aeabi_d2f>
 8001e66:	4603      	mov	r3, r0
 8001e68:	4a52      	ldr	r2, [pc, #328]	@ (8001fb4 <mpu6050+0x5e4>)
 8001e6a:	6013      	str	r3, [r2, #0]

    // Açıları kalibre et (gerekirse)
    angle_pitch_acc -= 0.00;
 8001e6c:	4b50      	ldr	r3, [pc, #320]	@ (8001fb0 <mpu6050+0x5e0>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a4f      	ldr	r2, [pc, #316]	@ (8001fb0 <mpu6050+0x5e0>)
 8001e72:	6013      	str	r3, [r2, #0]
    angle_roll_acc -= 0.00;
 8001e74:	4b4f      	ldr	r3, [pc, #316]	@ (8001fb4 <mpu6050+0x5e4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a4e      	ldr	r2, [pc, #312]	@ (8001fb4 <mpu6050+0x5e4>)
 8001e7a:	6013      	str	r3, [r2, #0]

    // Jiroskop verilerini ivmeölçer verileriyle birleştir
    if (set_gyro) {
 8001e7c:	4b4e      	ldr	r3, [pc, #312]	@ (8001fb8 <mpu6050+0x5e8>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d04e      	beq.n	8001f22 <mpu6050+0x552>
        angle_pitch = angle_pitch_gyro * 0.9996 + angle_pitch_acc * 0.0004; // Pitch açısı
 8001e84:	4b4d      	ldr	r3, [pc, #308]	@ (8001fbc <mpu6050+0x5ec>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe fb5d 	bl	8000548 <__aeabi_f2d>
 8001e8e:	a340      	add	r3, pc, #256	@ (adr r3, 8001f90 <mpu6050+0x5c0>)
 8001e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e94:	f7fe fbb0 	bl	80005f8 <__aeabi_dmul>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4614      	mov	r4, r2
 8001e9e:	461d      	mov	r5, r3
 8001ea0:	4b43      	ldr	r3, [pc, #268]	@ (8001fb0 <mpu6050+0x5e0>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7fe fb4f 	bl	8000548 <__aeabi_f2d>
 8001eaa:	a33b      	add	r3, pc, #236	@ (adr r3, 8001f98 <mpu6050+0x5c8>)
 8001eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb0:	f7fe fba2 	bl	80005f8 <__aeabi_dmul>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4620      	mov	r0, r4
 8001eba:	4629      	mov	r1, r5
 8001ebc:	f7fe f9e6 	bl	800028c <__adddf3>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	f7fe fe8e 	bl	8000be8 <__aeabi_d2f>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	4a3c      	ldr	r2, [pc, #240]	@ (8001fc0 <mpu6050+0x5f0>)
 8001ed0:	6013      	str	r3, [r2, #0]
        angle_roll = angle_roll_gyro * 0.9996 + angle_roll_acc * 0.0004; // Roll açısı
 8001ed2:	4b34      	ldr	r3, [pc, #208]	@ (8001fa4 <mpu6050+0x5d4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7fe fb36 	bl	8000548 <__aeabi_f2d>
 8001edc:	a32c      	add	r3, pc, #176	@ (adr r3, 8001f90 <mpu6050+0x5c0>)
 8001ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee2:	f7fe fb89 	bl	80005f8 <__aeabi_dmul>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	4614      	mov	r4, r2
 8001eec:	461d      	mov	r5, r3
 8001eee:	4b31      	ldr	r3, [pc, #196]	@ (8001fb4 <mpu6050+0x5e4>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7fe fb28 	bl	8000548 <__aeabi_f2d>
 8001ef8:	a327      	add	r3, pc, #156	@ (adr r3, 8001f98 <mpu6050+0x5c8>)
 8001efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efe:	f7fe fb7b 	bl	80005f8 <__aeabi_dmul>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	4620      	mov	r0, r4
 8001f08:	4629      	mov	r1, r5
 8001f0a:	f7fe f9bf 	bl	800028c <__adddf3>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4610      	mov	r0, r2
 8001f14:	4619      	mov	r1, r3
 8001f16:	f7fe fe67 	bl	8000be8 <__aeabi_d2f>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	4a29      	ldr	r2, [pc, #164]	@ (8001fc4 <mpu6050+0x5f4>)
 8001f1e:	6013      	str	r3, [r2, #0]
 8001f20:	e006      	b.n	8001f30 <mpu6050+0x560>
    } else {
        angle_pitch = angle_pitch_acc; // İlk okumada sadece ivmeölçer verilerini kullan
 8001f22:	4b23      	ldr	r3, [pc, #140]	@ (8001fb0 <mpu6050+0x5e0>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a26      	ldr	r2, [pc, #152]	@ (8001fc0 <mpu6050+0x5f0>)
 8001f28:	6013      	str	r3, [r2, #0]
        set_gyro = true;
 8001f2a:	4b23      	ldr	r3, [pc, #140]	@ (8001fb8 <mpu6050+0x5e8>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	701a      	strb	r2, [r3, #0]
    }

    // Belirli bir süre beklemek için döngü
    while ((HAL_GetTick() - prevtime) * 1000 < 4000);
 8001f30:	bf00      	nop
 8001f32:	f001 fa39 	bl	80033a8 <HAL_GetTick>
 8001f36:	ee07 0a90 	vmov	s15, r0
 8001f3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f3e:	4b22      	ldr	r3, [pc, #136]	@ (8001fc8 <mpu6050+0x5f8>)
 8001f40:	edd3 7a00 	vldr	s15, [r3]
 8001f44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f48:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001fcc <mpu6050+0x5fc>
 8001f4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f50:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001fd0 <mpu6050+0x600>
 8001f54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f5c:	d4e9      	bmi.n	8001f32 <mpu6050+0x562>
    prevtime = getMillis(); // Zamanı güncelle
 8001f5e:	f7ff fcd9 	bl	8001914 <getMillis>
 8001f62:	ee07 0a90 	vmov	s15, r0
 8001f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f6a:	4b17      	ldr	r3, [pc, #92]	@ (8001fc8 <mpu6050+0x5f8>)
 8001f6c:	edc3 7a00 	vstr	s15, [r3]
}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f78:	652c6e62 	.word	0x652c6e62
 8001f7c:	3eb1e26f 	.word	0x3eb1e26f
 8001f80:	53f7ced9 	.word	0x53f7ced9
 8001f84:	404ca5e3 	.word	0x404ca5e3
 8001f88:	53f7ced9 	.word	0x53f7ced9
 8001f8c:	c04ca5e3 	.word	0xc04ca5e3
 8001f90:	23a29c78 	.word	0x23a29c78
 8001f94:	3feffcb9 	.word	0x3feffcb9
 8001f98:	eb1c432d 	.word	0xeb1c432d
 8001f9c:	3f3a36e2 	.word	0x3f3a36e2
 8001fa0:	200004b0 	.word	0x200004b0
 8001fa4:	200004d4 	.word	0x200004d4
 8001fa8:	200004b8 	.word	0x200004b8
 8001fac:	200004cc 	.word	0x200004cc
 8001fb0:	200004d8 	.word	0x200004d8
 8001fb4:	200004dc 	.word	0x200004dc
 8001fb8:	20000520 	.word	0x20000520
 8001fbc:	200004d0 	.word	0x200004d0
 8001fc0:	200004e0 	.word	0x200004e0
 8001fc4:	200004e4 	.word	0x200004e4
 8001fc8:	20000504 	.word	0x20000504
 8001fcc:	447a0000 	.word	0x447a0000
 8001fd0:	457a0000 	.word	0x457a0000

08001fd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  // Sistemi başlat, tüm periferalleri sıfırla, Flash ve Systick'i başlat
  HAL_Init();
 8001fda:	f001 f97f 	bl	80032dc <HAL_Init>
  /* USER CODE BEGIN Init */
  // Başlangıçta yapılan işlemler
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config(); // Sistem saatini yapılandır
 8001fde:	f000 fa61 	bl	80024a4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  // Joystick sistemini başlat
  ADC_System_Init(); // Joystick sistemini başlat
 8001fe2:	f7ff f88d 	bl	8001100 <ADC_System_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  // GPIO, ADC, Timer ve I2C gibi periferalleri başlat
  MX_GPIO_Init();
 8001fe6:	f000 fd97 	bl	8002b18 <MX_GPIO_Init>
  MX_ADC2_Init();
 8001fea:	f000 fb23 	bl	8002634 <MX_ADC2_Init>
  MX_TIM2_Init();
 8001fee:	f000 fcb7 	bl	8002960 <MX_TIM2_Init>
  MX_ADC3_Init();
 8001ff2:	f000 fb71 	bl	80026d8 <MX_ADC3_Init>
  MX_TIM1_Init();
 8001ff6:	f000 fbef 	bl	80027d8 <MX_TIM1_Init>
  MX_I2C1_Init();
 8001ffa:	f000 fbbf 	bl	800277c <MX_I2C1_Init>
  MX_ADC1_Init();
 8001ffe:	f000 fabb 	bl	8002578 <MX_ADC1_Init>
  MX_TIM3_Init();
 8002002:	f000 fd2f 	bl	8002a64 <MX_TIM3_Init>

  /* USER CODE BEGIN 2 */
  // PWM sinyallerini başlat (motor kontrolü için)
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Sağ motor için PWM başlat
 8002006:	2100      	movs	r1, #0
 8002008:	4890      	ldr	r0, [pc, #576]	@ (800224c <main+0x278>)
 800200a:	f003 ff5d 	bl	8005ec8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // Sol motor için PWM başlat
 800200e:	2104      	movs	r1, #4
 8002010:	488e      	ldr	r0, [pc, #568]	@ (800224c <main+0x278>)
 8002012:	f003 ff59 	bl	8005ec8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Sol motor için PWM başlat
 8002016:	2100      	movs	r1, #0
 8002018:	488d      	ldr	r0, [pc, #564]	@ (8002250 <main+0x27c>)
 800201a:	f003 ff55 	bl	8005ec8 <HAL_TIM_PWM_Start>

  // ESC Kalibrasyonu (Motorları kontrol etmek için başlangıç ayarları)
  #if Calibrate
    TIM2->CCR2 = 100;  // Maksimum pulse (2ms)
 800201e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002022:	2264      	movs	r2, #100	@ 0x64
 8002024:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_Delay(2000);   // 1 bip sesi bekle
 8002026:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800202a:	f001 f9c9 	bl	80033c0 <HAL_Delay>
    TIM2->CCR2 = 50;   // Minimum Pulse (1ms)
 800202e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002032:	2232      	movs	r2, #50	@ 0x32
 8002034:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_Delay(1000);   // 2 bip sesi bekle
 8002036:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800203a:	f001 f9c1 	bl	80033c0 <HAL_Delay>
    TIM2->CCR2 = 0;    // Sıfırlama, ADC ile kontrol edilebilsin
 800203e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002042:	2200      	movs	r2, #0
 8002044:	639a      	str	r2, [r3, #56]	@ 0x38
  #endif

  #if Calibrate
    TIM2->CCR1 = 100;  // Maksimum pulse (2ms)
 8002046:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800204a:	2264      	movs	r2, #100	@ 0x64
 800204c:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_Delay(2000);   // 1 bip sesi bekle
 800204e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002052:	f001 f9b5 	bl	80033c0 <HAL_Delay>
    TIM2->CCR1 = 50;   // Minimum Pulse (1ms)
 8002056:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800205a:	2232      	movs	r2, #50	@ 0x32
 800205c:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_Delay(1000);   // 2 bip sesi bekle
 800205e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002062:	f001 f9ad 	bl	80033c0 <HAL_Delay>
    TIM2->CCR1 = 0;    // Sıfırlama, ADC ile kontrol edilebilsin
 8002066:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800206a:	2200      	movs	r2, #0
 800206c:	635a      	str	r2, [r3, #52]	@ 0x34
  #endif

/*********************************MPU6050**********************************/
  // MPU6050 Sensör Konfigürasyonu
  data = 0x00;
 800206e:	4b79      	ldr	r3, [pc, #484]	@ (8002254 <main+0x280>)
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, HAL_MAX_DELAY);
 8002074:	f04f 33ff 	mov.w	r3, #4294967295
 8002078:	9302      	str	r3, [sp, #8]
 800207a:	2301      	movs	r3, #1
 800207c:	9301      	str	r3, [sp, #4]
 800207e:	4b75      	ldr	r3, [pc, #468]	@ (8002254 <main+0x280>)
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	2301      	movs	r3, #1
 8002084:	226b      	movs	r2, #107	@ 0x6b
 8002086:	21d0      	movs	r1, #208	@ 0xd0
 8002088:	4873      	ldr	r0, [pc, #460]	@ (8002258 <main+0x284>)
 800208a:	f002 fce5 	bl	8004a58 <HAL_I2C_Mem_Write>
  // Sensörü uyandır ve iç saatini kullanmak üzere ayarla

  data = 0x08;
 800208e:	4b71      	ldr	r3, [pc, #452]	@ (8002254 <main+0x280>)
 8002090:	2208      	movs	r2, #8
 8002092:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CNFG_REG, 1, &data, 1, HAL_MAX_DELAY);
 8002094:	f04f 33ff 	mov.w	r3, #4294967295
 8002098:	9302      	str	r3, [sp, #8]
 800209a:	2301      	movs	r3, #1
 800209c:	9301      	str	r3, [sp, #4]
 800209e:	4b6d      	ldr	r3, [pc, #436]	@ (8002254 <main+0x280>)
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	2301      	movs	r3, #1
 80020a4:	221b      	movs	r2, #27
 80020a6:	21d0      	movs	r1, #208	@ 0xd0
 80020a8:	486b      	ldr	r0, [pc, #428]	@ (8002258 <main+0x284>)
 80020aa:	f002 fcd5 	bl	8004a58 <HAL_I2C_Mem_Write>
  // Jiroskop için hassasiyeti ayarla (±500 derece/saniye)

  data = 0x10;
 80020ae:	4b69      	ldr	r3, [pc, #420]	@ (8002254 <main+0x280>)
 80020b0:	2210      	movs	r2, #16
 80020b2:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACC_CNFG_REG, 1, &data, 1, HAL_MAX_DELAY);
 80020b4:	f04f 33ff 	mov.w	r3, #4294967295
 80020b8:	9302      	str	r3, [sp, #8]
 80020ba:	2301      	movs	r3, #1
 80020bc:	9301      	str	r3, [sp, #4]
 80020be:	4b65      	ldr	r3, [pc, #404]	@ (8002254 <main+0x280>)
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	2301      	movs	r3, #1
 80020c4:	221c      	movs	r2, #28
 80020c6:	21d0      	movs	r1, #208	@ 0xd0
 80020c8:	4863      	ldr	r0, [pc, #396]	@ (8002258 <main+0x284>)
 80020ca:	f002 fcc5 	bl	8004a58 <HAL_I2C_Mem_Write>
  // İvmeölçer için hassasiyeti ayarla (±8g)

  // Jiroskop kalibrasyonu için 2000 ölçüm yap
  for (i = 0; i < 2000; i++) {
 80020ce:	4b63      	ldr	r3, [pc, #396]	@ (800225c <main+0x288>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	e086      	b.n	80021e4 <main+0x210>
      prevtime2 = time2; // Önceki zamanı sakla
 80020d6:	4b62      	ldr	r3, [pc, #392]	@ (8002260 <main+0x28c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a62      	ldr	r2, [pc, #392]	@ (8002264 <main+0x290>)
 80020dc:	6013      	str	r3, [r2, #0]
      time2 = HAL_GetTick(); // Geçerli zamanı al
 80020de:	f001 f963 	bl	80033a8 <HAL_GetTick>
 80020e2:	ee07 0a90 	vmov	s15, r0
 80020e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020ea:	4b5d      	ldr	r3, [pc, #372]	@ (8002260 <main+0x28c>)
 80020ec:	edc3 7a00 	vstr	s15, [r3]
      elapsedtime2 = (time2 - prevtime2) * 1000; // Geçen süreyi hesapla
 80020f0:	4b5b      	ldr	r3, [pc, #364]	@ (8002260 <main+0x28c>)
 80020f2:	ed93 7a00 	vldr	s14, [r3]
 80020f6:	4b5b      	ldr	r3, [pc, #364]	@ (8002264 <main+0x290>)
 80020f8:	edd3 7a00 	vldr	s15, [r3]
 80020fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002100:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8002268 <main+0x294>
 8002104:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002108:	4b58      	ldr	r3, [pc, #352]	@ (800226c <main+0x298>)
 800210a:	edc3 7a00 	vstr	s15, [r3]

      cuffer[0] = 0x43; // Jiroskop veri başlangıç adresi
 800210e:	4b58      	ldr	r3, [pc, #352]	@ (8002270 <main+0x29c>)
 8002110:	2243      	movs	r2, #67	@ 0x43
 8002112:	701a      	strb	r2, [r3, #0]
      HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, cuffer, 1, HAL_MAX_DELAY); // Adresi gönder
 8002114:	f04f 33ff 	mov.w	r3, #4294967295
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	2301      	movs	r3, #1
 800211c:	4a54      	ldr	r2, [pc, #336]	@ (8002270 <main+0x29c>)
 800211e:	21d0      	movs	r1, #208	@ 0xd0
 8002120:	484d      	ldr	r0, [pc, #308]	@ (8002258 <main+0x284>)
 8002122:	f002 f969 	bl	80043f8 <HAL_I2C_Master_Transmit>
      HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDR, cuffer, 6, HAL_MAX_DELAY); // 6 bayt veri al
 8002126:	f04f 33ff 	mov.w	r3, #4294967295
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	2306      	movs	r3, #6
 800212e:	4a50      	ldr	r2, [pc, #320]	@ (8002270 <main+0x29c>)
 8002130:	21d0      	movs	r1, #208	@ 0xd0
 8002132:	4849      	ldr	r0, [pc, #292]	@ (8002258 <main+0x284>)
 8002134:	f002 fa5e 	bl	80045f4 <HAL_I2C_Master_Receive>

      // Ham jiroskop verilerini birleştir
      gyro_raw[0] = (cuffer[0] << 8 | cuffer[1]); // X ekseni
 8002138:	4b4d      	ldr	r3, [pc, #308]	@ (8002270 <main+0x29c>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	021b      	lsls	r3, r3, #8
 800213e:	b21a      	sxth	r2, r3
 8002140:	4b4b      	ldr	r3, [pc, #300]	@ (8002270 <main+0x29c>)
 8002142:	785b      	ldrb	r3, [r3, #1]
 8002144:	b21b      	sxth	r3, r3
 8002146:	4313      	orrs	r3, r2
 8002148:	b21a      	sxth	r2, r3
 800214a:	4b4a      	ldr	r3, [pc, #296]	@ (8002274 <main+0x2a0>)
 800214c:	801a      	strh	r2, [r3, #0]
      gyro_raw[1] = (cuffer[2] << 8 | cuffer[3]); // Y ekseni
 800214e:	4b48      	ldr	r3, [pc, #288]	@ (8002270 <main+0x29c>)
 8002150:	789b      	ldrb	r3, [r3, #2]
 8002152:	021b      	lsls	r3, r3, #8
 8002154:	b21a      	sxth	r2, r3
 8002156:	4b46      	ldr	r3, [pc, #280]	@ (8002270 <main+0x29c>)
 8002158:	78db      	ldrb	r3, [r3, #3]
 800215a:	b21b      	sxth	r3, r3
 800215c:	4313      	orrs	r3, r2
 800215e:	b21a      	sxth	r2, r3
 8002160:	4b44      	ldr	r3, [pc, #272]	@ (8002274 <main+0x2a0>)
 8002162:	805a      	strh	r2, [r3, #2]
      gyro_raw[2] = (cuffer[4] << 8 | cuffer[5]); // Z ekseni
 8002164:	4b42      	ldr	r3, [pc, #264]	@ (8002270 <main+0x29c>)
 8002166:	791b      	ldrb	r3, [r3, #4]
 8002168:	021b      	lsls	r3, r3, #8
 800216a:	b21a      	sxth	r2, r3
 800216c:	4b40      	ldr	r3, [pc, #256]	@ (8002270 <main+0x29c>)
 800216e:	795b      	ldrb	r3, [r3, #5]
 8002170:	b21b      	sxth	r3, r3
 8002172:	4313      	orrs	r3, r2
 8002174:	b21a      	sxth	r2, r3
 8002176:	4b3f      	ldr	r3, [pc, #252]	@ (8002274 <main+0x2a0>)
 8002178:	809a      	strh	r2, [r3, #4]

      // Kalibrasyon değerlerini topla
      gyro_cal[0] += gyro_raw[0];
 800217a:	4b3f      	ldr	r3, [pc, #252]	@ (8002278 <main+0x2a4>)
 800217c:	ed93 7a00 	vldr	s14, [r3]
 8002180:	4b3c      	ldr	r3, [pc, #240]	@ (8002274 <main+0x2a0>)
 8002182:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002186:	ee07 3a90 	vmov	s15, r3
 800218a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800218e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002192:	4b39      	ldr	r3, [pc, #228]	@ (8002278 <main+0x2a4>)
 8002194:	edc3 7a00 	vstr	s15, [r3]
      gyro_cal[1] += gyro_raw[1];
 8002198:	4b37      	ldr	r3, [pc, #220]	@ (8002278 <main+0x2a4>)
 800219a:	ed93 7a01 	vldr	s14, [r3, #4]
 800219e:	4b35      	ldr	r3, [pc, #212]	@ (8002274 <main+0x2a0>)
 80021a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80021a4:	ee07 3a90 	vmov	s15, r3
 80021a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021b0:	4b31      	ldr	r3, [pc, #196]	@ (8002278 <main+0x2a4>)
 80021b2:	edc3 7a01 	vstr	s15, [r3, #4]
      gyro_cal[2] += gyro_raw[2];
 80021b6:	4b30      	ldr	r3, [pc, #192]	@ (8002278 <main+0x2a4>)
 80021b8:	ed93 7a02 	vldr	s14, [r3, #8]
 80021bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002274 <main+0x2a0>)
 80021be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80021c2:	ee07 3a90 	vmov	s15, r3
 80021c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002278 <main+0x2a4>)
 80021d0:	edc3 7a02 	vstr	s15, [r3, #8]

      HAL_Delay(3); // 3 milisaniye bekle
 80021d4:	2003      	movs	r0, #3
 80021d6:	f001 f8f3 	bl	80033c0 <HAL_Delay>
  for (i = 0; i < 2000; i++) {
 80021da:	4b20      	ldr	r3, [pc, #128]	@ (800225c <main+0x288>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	3301      	adds	r3, #1
 80021e0:	4a1e      	ldr	r2, [pc, #120]	@ (800225c <main+0x288>)
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	4b1d      	ldr	r3, [pc, #116]	@ (800225c <main+0x288>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80021ec:	f6ff af73 	blt.w	80020d6 <main+0x102>
  }

  // Kalibrasyon değerlerinin ortalamasını al
  gyro_cal[0] /= 2000;
 80021f0:	4b21      	ldr	r3, [pc, #132]	@ (8002278 <main+0x2a4>)
 80021f2:	ed93 7a00 	vldr	s14, [r3]
 80021f6:	eddf 6a21 	vldr	s13, [pc, #132]	@ 800227c <main+0x2a8>
 80021fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002278 <main+0x2a4>)
 8002200:	edc3 7a00 	vstr	s15, [r3]
  gyro_cal[1] /= 2000;
 8002204:	4b1c      	ldr	r3, [pc, #112]	@ (8002278 <main+0x2a4>)
 8002206:	ed93 7a01 	vldr	s14, [r3, #4]
 800220a:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 800227c <main+0x2a8>
 800220e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002212:	4b19      	ldr	r3, [pc, #100]	@ (8002278 <main+0x2a4>)
 8002214:	edc3 7a01 	vstr	s15, [r3, #4]
  gyro_cal[2] /= 2000;
 8002218:	4b17      	ldr	r3, [pc, #92]	@ (8002278 <main+0x2a4>)
 800221a:	ed93 7a02 	vldr	s14, [r3, #8]
 800221e:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800227c <main+0x2a8>
 8002222:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002226:	4b14      	ldr	r3, [pc, #80]	@ (8002278 <main+0x2a4>)
 8002228:	edc3 7a02 	vstr	s15, [r3, #8]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      // Buton durumu kontrol et ve pinleri ayarla
	  ADC_System_Update(); // ADC'yi güncelle
 800222c:	f7fe ff8e 	bl	800114c <ADC_System_Update>
	  Button_Control();
 8002230:	f7fe ffa4 	bl	800117c <Button_Control>

      if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1) == GPIO_PIN_RESET)
 8002234:	2102      	movs	r1, #2
 8002236:	4812      	ldr	r0, [pc, #72]	@ (8002280 <main+0x2ac>)
 8002238:	f001 ff68 	bl	800410c <HAL_GPIO_ReadPin>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d122      	bne.n	8002288 <main+0x2b4>
          automation_mode = true; // Otomatik mod aktif
 8002242:	4b10      	ldr	r3, [pc, #64]	@ (8002284 <main+0x2b0>)
 8002244:	2201      	movs	r2, #1
 8002246:	701a      	strb	r2, [r3, #0]
 8002248:	e021      	b.n	800228e <main+0x2ba>
 800224a:	bf00      	nop
 800224c:	200003c8 	.word	0x200003c8
 8002250:	20000380 	.word	0x20000380
 8002254:	200004a3 	.word	0x200004a3
 8002258:	2000032c 	.word	0x2000032c
 800225c:	200004f0 	.word	0x200004f0
 8002260:	20000518 	.word	0x20000518
 8002264:	20000514 	.word	0x20000514
 8002268:	447a0000 	.word	0x447a0000
 800226c:	2000051c 	.word	0x2000051c
 8002270:	200004a8 	.word	0x200004a8
 8002274:	200004b0 	.word	0x200004b0
 8002278:	200004c0 	.word	0x200004c0
 800227c:	44fa0000 	.word	0x44fa0000
 8002280:	40020400 	.word	0x40020400
 8002284:	200004a2 	.word	0x200004a2
      else
          automation_mode = false; // Otomatik mod pasif
 8002288:	4b6c      	ldr	r3, [pc, #432]	@ (800243c <main+0x468>)
 800228a:	2200      	movs	r2, #0
 800228c:	701a      	strb	r2, [r3, #0]

      // Opsiyonel: Bir gecikme ekleyin (debouncing etkisi için)
      HAL_Delay(50);
 800228e:	2032      	movs	r0, #50	@ 0x32
 8002290:	f001 f896 	bl	80033c0 <HAL_Delay>

      // MPU6050'den verileri oku
      mpu6050(); // MPU6050 sensöründen açı ve sıcaklık verilerini okur ve işler.
 8002294:	f7ff fb9c 	bl	80019d0 <mpu6050>
      z_ivme = (float)acc_raw[2]; // Z eksenindeki ivmeyi al
 8002298:	4b69      	ldr	r3, [pc, #420]	@ (8002440 <main+0x46c>)
 800229a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800229e:	ee07 3a90 	vmov	s15, r3
 80022a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022a6:	4b67      	ldr	r3, [pc, #412]	@ (8002444 <main+0x470>)
 80022a8:	edc3 7a00 	vstr	s15, [r3]
      calculate_z_depth(); // Derinliği hesapla
 80022ac:	f7ff fb3a 	bl	8001924 <calculate_z_depth>
      depth = z_depth; // Derinlik değerini güncelle
 80022b0:	4b65      	ldr	r3, [pc, #404]	@ (8002448 <main+0x474>)
 80022b2:	edd3 7a00 	vldr	s15, [r3]
 80022b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022ba:	ee17 2a90 	vmov	r2, s15
 80022be:	4b63      	ldr	r3, [pc, #396]	@ (800244c <main+0x478>)
 80022c0:	601a      	str	r2, [r3, #0]
      roll = (float)angle_roll; // Roll açısını al
 80022c2:	4b63      	ldr	r3, [pc, #396]	@ (8002450 <main+0x47c>)
 80022c4:	edd3 7a00 	vldr	s15, [r3]
 80022c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022cc:	ee17 2a90 	vmov	r2, s15
 80022d0:	4b60      	ldr	r3, [pc, #384]	@ (8002454 <main+0x480>)
 80022d2:	601a      	str	r2, [r3, #0]
      x_ivme = (float)acc_raw[0]; // X eksenindeki ivmeyi al
 80022d4:	4b5a      	ldr	r3, [pc, #360]	@ (8002440 <main+0x46c>)
 80022d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022da:	ee07 3a90 	vmov	s15, r3
 80022de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022e2:	4b5d      	ldr	r3, [pc, #372]	@ (8002458 <main+0x484>)
 80022e4:	edc3 7a00 	vstr	s15, [r3]
      HAL_Delay(50); // Kısa bir gecikme
 80022e8:	2032      	movs	r0, #50	@ 0x32
 80022ea:	f001 f869 	bl	80033c0 <HAL_Delay>

      if (automation_mode) {
 80022ee:	4b53      	ldr	r3, [pc, #332]	@ (800243c <main+0x468>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d047      	beq.n	8002386 <main+0x3b2>
          // Otomatik mod aktifse, hız ve PID kontrolünü başlat
          calculate_speed(); // Hızı hesapla
 80022f6:	f7ff f807 	bl	8001308 <calculate_speed>
          motor_pid_control(); // Motor PID kontrol döngüsünü çalıştır
 80022fa:	f7ff f855 	bl	80013a8 <motor_pid_control>
          update_pwm(); // PWM değerini güncelle
 80022fe:	f7ff f8c7 	bl	8001490 <update_pwm>
          calculate_pwm_values(); // PWM değerlerini hesapla
 8002302:	f7ff fa2d 	bl	8001760 <calculate_pwm_values>

          // Doldurma ve boşaltma işlemleri için PWM değerlerini ayarla
          TIM1->CCR1 = drain_pwm_left; // Boşaltma PWM değeri
 8002306:	4b55      	ldr	r3, [pc, #340]	@ (800245c <main+0x488>)
 8002308:	881a      	ldrh	r2, [r3, #0]
 800230a:	4b55      	ldr	r3, [pc, #340]	@ (8002460 <main+0x48c>)
 800230c:	635a      	str	r2, [r3, #52]	@ 0x34
          TIM1->CCR2 = drain_pwm_right; // DC motor PWM değeri
 800230e:	4b55      	ldr	r3, [pc, #340]	@ (8002464 <main+0x490>)
 8002310:	881a      	ldrh	r2, [r3, #0]
 8002312:	4b53      	ldr	r3, [pc, #332]	@ (8002460 <main+0x48c>)
 8002314:	639a      	str	r2, [r3, #56]	@ 0x38
          TIM1->CCR3 = fill_pwm_right; // Sağ doldurma PWM değeri
 8002316:	4b54      	ldr	r3, [pc, #336]	@ (8002468 <main+0x494>)
 8002318:	881a      	ldrh	r2, [r3, #0]
 800231a:	4b51      	ldr	r3, [pc, #324]	@ (8002460 <main+0x48c>)
 800231c:	63da      	str	r2, [r3, #60]	@ 0x3c
          TIM1->CCR4 = fill_pwm_left; // Sol doldurma PWM değeri
 800231e:	4b53      	ldr	r3, [pc, #332]	@ (800246c <main+0x498>)
 8002320:	881a      	ldrh	r2, [r3, #0]
 8002322:	4b4f      	ldr	r3, [pc, #316]	@ (8002460 <main+0x48c>)
 8002324:	641a      	str	r2, [r3, #64]	@ 0x40
          TIM3->CCR1 = dc_motor_pwm; // DC motor PWM değeri
 8002326:	4b52      	ldr	r3, [pc, #328]	@ (8002470 <main+0x49c>)
 8002328:	881a      	ldrh	r2, [r3, #0]
 800232a:	4b52      	ldr	r3, [pc, #328]	@ (8002474 <main+0x4a0>)
 800232c:	635a      	str	r2, [r3, #52]	@ 0x34

          // Roll açısı 0'dan farklıysa, istenilen roll açısını elde etmek için döngü çalıştır
          if (roll != desired_roll) {
 800232e:	4b49      	ldr	r3, [pc, #292]	@ (8002454 <main+0x480>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	ee07 3a90 	vmov	s15, r3
 8002336:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800233a:	4b4f      	ldr	r3, [pc, #316]	@ (8002478 <main+0x4a4>)
 800233c:	edd3 7a00 	vldr	s15, [r3]
 8002340:	eeb4 7a67 	vcmp.f32	s14, s15
 8002344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002348:	f43f af70 	beq.w	800222c <main+0x258>
              while (roll != desired_roll) {
 800234c:	e00c      	b.n	8002368 <main+0x394>
                  pump_pid_control(); // Pompalar için PID kontrol döngüsünü çalıştır
 800234e:	f7ff f8d3 	bl	80014f8 <pump_pid_control>
                  mpu6050(); // Roll açısını güncelle
 8002352:	f7ff fb3d 	bl	80019d0 <mpu6050>
                  roll = (float)angle_roll; // Roll açısını güncelle
 8002356:	4b3e      	ldr	r3, [pc, #248]	@ (8002450 <main+0x47c>)
 8002358:	edd3 7a00 	vldr	s15, [r3]
 800235c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002360:	ee17 2a90 	vmov	r2, s15
 8002364:	4b3b      	ldr	r3, [pc, #236]	@ (8002454 <main+0x480>)
 8002366:	601a      	str	r2, [r3, #0]
              while (roll != desired_roll) {
 8002368:	4b3a      	ldr	r3, [pc, #232]	@ (8002454 <main+0x480>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	ee07 3a90 	vmov	s15, r3
 8002370:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002374:	4b40      	ldr	r3, [pc, #256]	@ (8002478 <main+0x4a4>)
 8002376:	edd3 7a00 	vldr	s15, [r3]
 800237a:	eeb4 7a67 	vcmp.f32	s14, s15
 800237e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002382:	d1e4      	bne.n	800234e <main+0x37a>
 8002384:	e752      	b.n	800222c <main+0x258>
              }
          }
      } else {
          // Joystick modunda, joystick verilerini al ve PWM değerlerini ayarla
          joystick1_Y_ADC = joystick1.Y; // Joystick 1 Y değeri
 8002386:	4b3d      	ldr	r3, [pc, #244]	@ (800247c <main+0x4a8>)
 8002388:	881a      	ldrh	r2, [r3, #0]
 800238a:	4b3d      	ldr	r3, [pc, #244]	@ (8002480 <main+0x4ac>)
 800238c:	801a      	strh	r2, [r3, #0]
          joystick2_Y_ADC = joystick2.Y; // Joystick 2 Y değeri
 800238e:	4b3d      	ldr	r3, [pc, #244]	@ (8002484 <main+0x4b0>)
 8002390:	881a      	ldrh	r2, [r3, #0]
 8002392:	4b3d      	ldr	r3, [pc, #244]	@ (8002488 <main+0x4b4>)
 8002394:	801a      	strh	r2, [r3, #0]
          Brushless_Motor_Right = map(joystick1_Y_ADC, 0, 4095, 50, 100); // Sağ motor için PWM değeri
 8002396:	4b3a      	ldr	r3, [pc, #232]	@ (8002480 <main+0x4ac>)
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	eddf 1a3c 	vldr	s3, [pc, #240]	@ 800248c <main+0x4b8>
 800239e:	ed9f 1a3c 	vldr	s2, [pc, #240]	@ 8002490 <main+0x4bc>
 80023a2:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 8002494 <main+0x4c0>
 80023a6:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 8002498 <main+0x4c4>
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe ff76 	bl	800129c <map>
 80023b0:	4603      	mov	r3, r0
 80023b2:	461a      	mov	r2, r3
 80023b4:	4b39      	ldr	r3, [pc, #228]	@ (800249c <main+0x4c8>)
 80023b6:	801a      	strh	r2, [r3, #0]
          Brushless_Motor_Left = map(joystick2_Y_ADC, 0, 4095, 50, 100); // Sol motor için PWM değeri
 80023b8:	4b33      	ldr	r3, [pc, #204]	@ (8002488 <main+0x4b4>)
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	eddf 1a33 	vldr	s3, [pc, #204]	@ 800248c <main+0x4b8>
 80023c0:	ed9f 1a33 	vldr	s2, [pc, #204]	@ 8002490 <main+0x4bc>
 80023c4:	eddf 0a33 	vldr	s1, [pc, #204]	@ 8002494 <main+0x4c0>
 80023c8:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 8002498 <main+0x4c4>
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7fe ff65 	bl	800129c <map>
 80023d2:	4603      	mov	r3, r0
 80023d4:	461a      	mov	r2, r3
 80023d6:	4b32      	ldr	r3, [pc, #200]	@ (80024a0 <main+0x4cc>)
 80023d8:	801a      	strh	r2, [r3, #0]

          // PWM değerini sınırlama
          if (Brushless_Motor_Right >= 75 && Brushless_Motor_Right <= 80)
 80023da:	4b30      	ldr	r3, [pc, #192]	@ (800249c <main+0x4c8>)
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	2b4a      	cmp	r3, #74	@ 0x4a
 80023e0:	d906      	bls.n	80023f0 <main+0x41c>
 80023e2:	4b2e      	ldr	r3, [pc, #184]	@ (800249c <main+0x4c8>)
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	2b50      	cmp	r3, #80	@ 0x50
 80023e8:	d802      	bhi.n	80023f0 <main+0x41c>
              Brushless_Motor_Right = 75;
 80023ea:	4b2c      	ldr	r3, [pc, #176]	@ (800249c <main+0x4c8>)
 80023ec:	224b      	movs	r2, #75	@ 0x4b
 80023ee:	801a      	strh	r2, [r3, #0]

          TIM2->CCR1 = Brushless_Motor_Right; // Sağ motor PWM değeri
 80023f0:	4b2a      	ldr	r3, [pc, #168]	@ (800249c <main+0x4c8>)
 80023f2:	881a      	ldrh	r2, [r3, #0]
 80023f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80023f8:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_Delay(10); // Kısa bir gecikme
 80023fa:	200a      	movs	r0, #10
 80023fc:	f000 ffe0 	bl	80033c0 <HAL_Delay>
          TIM2->CCR2 = Brushless_Motor_Left; // Sol motor PWM değeri
 8002400:	4b27      	ldr	r3, [pc, #156]	@ (80024a0 <main+0x4cc>)
 8002402:	881a      	ldrh	r2, [r3, #0]
 8002404:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002408:	639a      	str	r2, [r3, #56]	@ 0x38

          // Doldurma ve boşaltma PWM değerlerini ayarla
          TIM1->CCR1 = 500; // Boşaltma PWM değeri
 800240a:	4b15      	ldr	r3, [pc, #84]	@ (8002460 <main+0x48c>)
 800240c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002410:	635a      	str	r2, [r3, #52]	@ 0x34
          TIM1->CCR2 = 500; // DC motor PWM değeri
 8002412:	4b13      	ldr	r3, [pc, #76]	@ (8002460 <main+0x48c>)
 8002414:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002418:	639a      	str	r2, [r3, #56]	@ 0x38
          TIM1->CCR3 = 500; // Sağ doldurma PWM değeri
 800241a:	4b11      	ldr	r3, [pc, #68]	@ (8002460 <main+0x48c>)
 800241c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002420:	63da      	str	r2, [r3, #60]	@ 0x3c
          TIM1->CCR4 = 500; // Sol doldurma PWM değeri
 8002422:	4b0f      	ldr	r3, [pc, #60]	@ (8002460 <main+0x48c>)
 8002424:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002428:	641a      	str	r2, [r3, #64]	@ 0x40
          TIM3->CCR1 = 1000; // DC motor PWM değeri
 800242a:	4b12      	ldr	r3, [pc, #72]	@ (8002474 <main+0x4a0>)
 800242c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002430:	635a      	str	r2, [r3, #52]	@ 0x34

          HAL_Delay(50); // Kısa bir gecikme
 8002432:	2032      	movs	r0, #50	@ 0x32
 8002434:	f000 ffc4 	bl	80033c0 <HAL_Delay>
	  ADC_System_Update(); // ADC'yi güncelle
 8002438:	e6f8      	b.n	800222c <main+0x258>
 800243a:	bf00      	nop
 800243c:	200004a2 	.word	0x200004a2
 8002440:	200004b8 	.word	0x200004b8
 8002444:	200004f8 	.word	0x200004f8
 8002448:	20000500 	.word	0x20000500
 800244c:	20000458 	.word	0x20000458
 8002450:	200004e4 	.word	0x200004e4
 8002454:	2000045c 	.word	0x2000045c
 8002458:	200004f4 	.word	0x200004f4
 800245c:	2000049e 	.word	0x2000049e
 8002460:	40010000 	.word	0x40010000
 8002464:	2000049c 	.word	0x2000049c
 8002468:	20000498 	.word	0x20000498
 800246c:	2000049a 	.word	0x2000049a
 8002470:	200004a0 	.word	0x200004a0
 8002474:	40000400 	.word	0x40000400
 8002478:	2000048c 	.word	0x2000048c
 800247c:	20000224 	.word	0x20000224
 8002480:	20000494 	.word	0x20000494
 8002484:	20000230 	.word	0x20000230
 8002488:	20000496 	.word	0x20000496
 800248c:	42c80000 	.word	0x42c80000
 8002490:	42480000 	.word	0x42480000
 8002494:	457ff000 	.word	0x457ff000
 8002498:	00000000 	.word	0x00000000
 800249c:	20000492 	.word	0x20000492
 80024a0:	20000490 	.word	0x20000490

080024a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b094      	sub	sp, #80	@ 0x50
 80024a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024aa:	f107 0320 	add.w	r3, r7, #32
 80024ae:	2230      	movs	r2, #48	@ 0x30
 80024b0:	2100      	movs	r1, #0
 80024b2:	4618      	mov	r0, r3
 80024b4:	f005 fad5 	bl	8007a62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024b8:	f107 030c 	add.w	r3, r7, #12
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	60da      	str	r2, [r3, #12]
 80024c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024c8:	2300      	movs	r3, #0
 80024ca:	60bb      	str	r3, [r7, #8]
 80024cc:	4b28      	ldr	r3, [pc, #160]	@ (8002570 <SystemClock_Config+0xcc>)
 80024ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d0:	4a27      	ldr	r2, [pc, #156]	@ (8002570 <SystemClock_Config+0xcc>)
 80024d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80024d8:	4b25      	ldr	r3, [pc, #148]	@ (8002570 <SystemClock_Config+0xcc>)
 80024da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024e0:	60bb      	str	r3, [r7, #8]
 80024e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024e4:	2300      	movs	r3, #0
 80024e6:	607b      	str	r3, [r7, #4]
 80024e8:	4b22      	ldr	r3, [pc, #136]	@ (8002574 <SystemClock_Config+0xd0>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a21      	ldr	r2, [pc, #132]	@ (8002574 <SystemClock_Config+0xd0>)
 80024ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002574 <SystemClock_Config+0xd0>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024fc:	607b      	str	r3, [r7, #4]
 80024fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002500:	2301      	movs	r3, #1
 8002502:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002504:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002508:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800250a:	2302      	movs	r3, #2
 800250c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800250e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002512:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002514:	2304      	movs	r3, #4
 8002516:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8002518:	2390      	movs	r3, #144	@ 0x90
 800251a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800251c:	2302      	movs	r3, #2
 800251e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002520:	2307      	movs	r3, #7
 8002522:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002524:	f107 0320 	add.w	r3, r7, #32
 8002528:	4618      	mov	r0, r3
 800252a:	f002 ffab 	bl	8005484 <HAL_RCC_OscConfig>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002534:	f000 fb84 	bl	8002c40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002538:	230f      	movs	r3, #15
 800253a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800253c:	2302      	movs	r3, #2
 800253e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002544:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002548:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800254a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800254e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002550:	f107 030c 	add.w	r3, r7, #12
 8002554:	2104      	movs	r1, #4
 8002556:	4618      	mov	r0, r3
 8002558:	f003 fa0c 	bl	8005974 <HAL_RCC_ClockConfig>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002562:	f000 fb6d 	bl	8002c40 <Error_Handler>
  }
}
 8002566:	bf00      	nop
 8002568:	3750      	adds	r7, #80	@ 0x50
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40023800 	.word	0x40023800
 8002574:	40007000 	.word	0x40007000

08002578 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800257e:	463b      	mov	r3, r7
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800258a:	4b27      	ldr	r3, [pc, #156]	@ (8002628 <MX_ADC1_Init+0xb0>)
 800258c:	4a27      	ldr	r2, [pc, #156]	@ (800262c <MX_ADC1_Init+0xb4>)
 800258e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002590:	4b25      	ldr	r3, [pc, #148]	@ (8002628 <MX_ADC1_Init+0xb0>)
 8002592:	2200      	movs	r2, #0
 8002594:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002596:	4b24      	ldr	r3, [pc, #144]	@ (8002628 <MX_ADC1_Init+0xb0>)
 8002598:	2200      	movs	r2, #0
 800259a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800259c:	4b22      	ldr	r3, [pc, #136]	@ (8002628 <MX_ADC1_Init+0xb0>)
 800259e:	2201      	movs	r2, #1
 80025a0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80025a2:	4b21      	ldr	r3, [pc, #132]	@ (8002628 <MX_ADC1_Init+0xb0>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80025a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002628 <MX_ADC1_Init+0xb0>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80025b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002628 <MX_ADC1_Init+0xb0>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002628 <MX_ADC1_Init+0xb0>)
 80025b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002630 <MX_ADC1_Init+0xb8>)
 80025ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002628 <MX_ADC1_Init+0xb0>)
 80025be:	2200      	movs	r2, #0
 80025c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80025c2:	4b19      	ldr	r3, [pc, #100]	@ (8002628 <MX_ADC1_Init+0xb0>)
 80025c4:	2202      	movs	r2, #2
 80025c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80025c8:	4b17      	ldr	r3, [pc, #92]	@ (8002628 <MX_ADC1_Init+0xb0>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80025d0:	4b15      	ldr	r3, [pc, #84]	@ (8002628 <MX_ADC1_Init+0xb0>)
 80025d2:	2201      	movs	r2, #1
 80025d4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80025d6:	4814      	ldr	r0, [pc, #80]	@ (8002628 <MX_ADC1_Init+0xb0>)
 80025d8:	f000 ff16 	bl	8003408 <HAL_ADC_Init>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80025e2:	f000 fb2d 	bl	8002c40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80025e6:	230b      	movs	r3, #11
 80025e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80025ea:	2301      	movs	r3, #1
 80025ec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80025ee:	2301      	movs	r3, #1
 80025f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025f2:	463b      	mov	r3, r7
 80025f4:	4619      	mov	r1, r3
 80025f6:	480c      	ldr	r0, [pc, #48]	@ (8002628 <MX_ADC1_Init+0xb0>)
 80025f8:	f001 f8e8 	bl	80037cc <HAL_ADC_ConfigChannel>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002602:	f000 fb1d 	bl	8002c40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8002606:	2302      	movs	r3, #2
 8002608:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800260a:	463b      	mov	r3, r7
 800260c:	4619      	mov	r1, r3
 800260e:	4806      	ldr	r0, [pc, #24]	@ (8002628 <MX_ADC1_Init+0xb0>)
 8002610:	f001 f8dc 	bl	80037cc <HAL_ADC_ConfigChannel>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800261a:	f000 fb11 	bl	8002c40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800261e:	bf00      	nop
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	20000254 	.word	0x20000254
 800262c:	40012000 	.word	0x40012000
 8002630:	0f000001 	.word	0x0f000001

08002634 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800263a:	463b      	mov	r3, r7
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8002646:	4b21      	ldr	r3, [pc, #132]	@ (80026cc <MX_ADC2_Init+0x98>)
 8002648:	4a21      	ldr	r2, [pc, #132]	@ (80026d0 <MX_ADC2_Init+0x9c>)
 800264a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800264c:	4b1f      	ldr	r3, [pc, #124]	@ (80026cc <MX_ADC2_Init+0x98>)
 800264e:	2200      	movs	r2, #0
 8002650:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002652:	4b1e      	ldr	r3, [pc, #120]	@ (80026cc <MX_ADC2_Init+0x98>)
 8002654:	2200      	movs	r2, #0
 8002656:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8002658:	4b1c      	ldr	r3, [pc, #112]	@ (80026cc <MX_ADC2_Init+0x98>)
 800265a:	2201      	movs	r2, #1
 800265c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800265e:	4b1b      	ldr	r3, [pc, #108]	@ (80026cc <MX_ADC2_Init+0x98>)
 8002660:	2201      	movs	r2, #1
 8002662:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002664:	4b19      	ldr	r3, [pc, #100]	@ (80026cc <MX_ADC2_Init+0x98>)
 8002666:	2200      	movs	r2, #0
 8002668:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800266c:	4b17      	ldr	r3, [pc, #92]	@ (80026cc <MX_ADC2_Init+0x98>)
 800266e:	2200      	movs	r2, #0
 8002670:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002672:	4b16      	ldr	r3, [pc, #88]	@ (80026cc <MX_ADC2_Init+0x98>)
 8002674:	4a17      	ldr	r2, [pc, #92]	@ (80026d4 <MX_ADC2_Init+0xa0>)
 8002676:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002678:	4b14      	ldr	r3, [pc, #80]	@ (80026cc <MX_ADC2_Init+0x98>)
 800267a:	2200      	movs	r2, #0
 800267c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800267e:	4b13      	ldr	r3, [pc, #76]	@ (80026cc <MX_ADC2_Init+0x98>)
 8002680:	2201      	movs	r2, #1
 8002682:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002684:	4b11      	ldr	r3, [pc, #68]	@ (80026cc <MX_ADC2_Init+0x98>)
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800268c:	4b0f      	ldr	r3, [pc, #60]	@ (80026cc <MX_ADC2_Init+0x98>)
 800268e:	2201      	movs	r2, #1
 8002690:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002692:	480e      	ldr	r0, [pc, #56]	@ (80026cc <MX_ADC2_Init+0x98>)
 8002694:	f000 feb8 	bl	8003408 <HAL_ADC_Init>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 800269e:	f000 facf 	bl	8002c40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80026a2:	230a      	movs	r3, #10
 80026a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80026a6:	2301      	movs	r3, #1
 80026a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80026aa:	2301      	movs	r3, #1
 80026ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80026ae:	463b      	mov	r3, r7
 80026b0:	4619      	mov	r1, r3
 80026b2:	4806      	ldr	r0, [pc, #24]	@ (80026cc <MX_ADC2_Init+0x98>)
 80026b4:	f001 f88a 	bl	80037cc <HAL_ADC_ConfigChannel>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80026be:	f000 fabf 	bl	8002c40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80026c2:	bf00      	nop
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	2000029c 	.word	0x2000029c
 80026d0:	40012100 	.word	0x40012100
 80026d4:	0f000001 	.word	0x0f000001

080026d8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80026de:	463b      	mov	r3, r7
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80026ea:	4b21      	ldr	r3, [pc, #132]	@ (8002770 <MX_ADC3_Init+0x98>)
 80026ec:	4a21      	ldr	r2, [pc, #132]	@ (8002774 <MX_ADC3_Init+0x9c>)
 80026ee:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80026f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002770 <MX_ADC3_Init+0x98>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80026f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002770 <MX_ADC3_Init+0x98>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 80026fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002770 <MX_ADC3_Init+0x98>)
 80026fe:	2201      	movs	r2, #1
 8002700:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002702:	4b1b      	ldr	r3, [pc, #108]	@ (8002770 <MX_ADC3_Init+0x98>)
 8002704:	2200      	movs	r2, #0
 8002706:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002708:	4b19      	ldr	r3, [pc, #100]	@ (8002770 <MX_ADC3_Init+0x98>)
 800270a:	2200      	movs	r2, #0
 800270c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002710:	4b17      	ldr	r3, [pc, #92]	@ (8002770 <MX_ADC3_Init+0x98>)
 8002712:	2200      	movs	r2, #0
 8002714:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002716:	4b16      	ldr	r3, [pc, #88]	@ (8002770 <MX_ADC3_Init+0x98>)
 8002718:	4a17      	ldr	r2, [pc, #92]	@ (8002778 <MX_ADC3_Init+0xa0>)
 800271a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800271c:	4b14      	ldr	r3, [pc, #80]	@ (8002770 <MX_ADC3_Init+0x98>)
 800271e:	2200      	movs	r2, #0
 8002720:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8002722:	4b13      	ldr	r3, [pc, #76]	@ (8002770 <MX_ADC3_Init+0x98>)
 8002724:	2201      	movs	r2, #1
 8002726:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002728:	4b11      	ldr	r3, [pc, #68]	@ (8002770 <MX_ADC3_Init+0x98>)
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002730:	4b0f      	ldr	r3, [pc, #60]	@ (8002770 <MX_ADC3_Init+0x98>)
 8002732:	2201      	movs	r2, #1
 8002734:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002736:	480e      	ldr	r0, [pc, #56]	@ (8002770 <MX_ADC3_Init+0x98>)
 8002738:	f000 fe66 	bl	8003408 <HAL_ADC_Init>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8002742:	f000 fa7d 	bl	8002c40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002746:	230c      	movs	r3, #12
 8002748:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800274a:	2301      	movs	r3, #1
 800274c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800274e:	2307      	movs	r3, #7
 8002750:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002752:	463b      	mov	r3, r7
 8002754:	4619      	mov	r1, r3
 8002756:	4806      	ldr	r0, [pc, #24]	@ (8002770 <MX_ADC3_Init+0x98>)
 8002758:	f001 f838 	bl	80037cc <HAL_ADC_ConfigChannel>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8002762:	f000 fa6d 	bl	8002c40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002766:	bf00      	nop
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	200002e4 	.word	0x200002e4
 8002774:	40012200 	.word	0x40012200
 8002778:	0f000001 	.word	0x0f000001

0800277c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002780:	4b12      	ldr	r3, [pc, #72]	@ (80027cc <MX_I2C1_Init+0x50>)
 8002782:	4a13      	ldr	r2, [pc, #76]	@ (80027d0 <MX_I2C1_Init+0x54>)
 8002784:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002786:	4b11      	ldr	r3, [pc, #68]	@ (80027cc <MX_I2C1_Init+0x50>)
 8002788:	4a12      	ldr	r2, [pc, #72]	@ (80027d4 <MX_I2C1_Init+0x58>)
 800278a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800278c:	4b0f      	ldr	r3, [pc, #60]	@ (80027cc <MX_I2C1_Init+0x50>)
 800278e:	2200      	movs	r2, #0
 8002790:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002792:	4b0e      	ldr	r3, [pc, #56]	@ (80027cc <MX_I2C1_Init+0x50>)
 8002794:	2200      	movs	r2, #0
 8002796:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002798:	4b0c      	ldr	r3, [pc, #48]	@ (80027cc <MX_I2C1_Init+0x50>)
 800279a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800279e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027a0:	4b0a      	ldr	r3, [pc, #40]	@ (80027cc <MX_I2C1_Init+0x50>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80027a6:	4b09      	ldr	r3, [pc, #36]	@ (80027cc <MX_I2C1_Init+0x50>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027ac:	4b07      	ldr	r3, [pc, #28]	@ (80027cc <MX_I2C1_Init+0x50>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027b2:	4b06      	ldr	r3, [pc, #24]	@ (80027cc <MX_I2C1_Init+0x50>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80027b8:	4804      	ldr	r0, [pc, #16]	@ (80027cc <MX_I2C1_Init+0x50>)
 80027ba:	f001 fcd9 	bl	8004170 <HAL_I2C_Init>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80027c4:	f000 fa3c 	bl	8002c40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80027c8:	bf00      	nop
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	2000032c 	.word	0x2000032c
 80027d0:	40005400 	.word	0x40005400
 80027d4:	000186a0 	.word	0x000186a0

080027d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b096      	sub	sp, #88	@ 0x58
 80027dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027de:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	605a      	str	r2, [r3, #4]
 80027e8:	609a      	str	r2, [r3, #8]
 80027ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ec:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	605a      	str	r2, [r3, #4]
 8002800:	609a      	str	r2, [r3, #8]
 8002802:	60da      	str	r2, [r3, #12]
 8002804:	611a      	str	r2, [r3, #16]
 8002806:	615a      	str	r2, [r3, #20]
 8002808:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800280a:	1d3b      	adds	r3, r7, #4
 800280c:	2220      	movs	r2, #32
 800280e:	2100      	movs	r1, #0
 8002810:	4618      	mov	r0, r3
 8002812:	f005 f926 	bl	8007a62 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002816:	4b50      	ldr	r3, [pc, #320]	@ (8002958 <MX_TIM1_Init+0x180>)
 8002818:	4a50      	ldr	r2, [pc, #320]	@ (800295c <MX_TIM1_Init+0x184>)
 800281a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 144-1;
 800281c:	4b4e      	ldr	r3, [pc, #312]	@ (8002958 <MX_TIM1_Init+0x180>)
 800281e:	228f      	movs	r2, #143	@ 0x8f
 8002820:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002822:	4b4d      	ldr	r3, [pc, #308]	@ (8002958 <MX_TIM1_Init+0x180>)
 8002824:	2200      	movs	r2, #0
 8002826:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002828:	4b4b      	ldr	r3, [pc, #300]	@ (8002958 <MX_TIM1_Init+0x180>)
 800282a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800282e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002830:	4b49      	ldr	r3, [pc, #292]	@ (8002958 <MX_TIM1_Init+0x180>)
 8002832:	2200      	movs	r2, #0
 8002834:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002836:	4b48      	ldr	r3, [pc, #288]	@ (8002958 <MX_TIM1_Init+0x180>)
 8002838:	2200      	movs	r2, #0
 800283a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800283c:	4b46      	ldr	r3, [pc, #280]	@ (8002958 <MX_TIM1_Init+0x180>)
 800283e:	2200      	movs	r2, #0
 8002840:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002842:	4845      	ldr	r0, [pc, #276]	@ (8002958 <MX_TIM1_Init+0x180>)
 8002844:	f003 faa2 	bl	8005d8c <HAL_TIM_Base_Init>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800284e:	f000 f9f7 	bl	8002c40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002852:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002856:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002858:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800285c:	4619      	mov	r1, r3
 800285e:	483e      	ldr	r0, [pc, #248]	@ (8002958 <MX_TIM1_Init+0x180>)
 8002860:	f003 fcbc 	bl	80061dc <HAL_TIM_ConfigClockSource>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800286a:	f000 f9e9 	bl	8002c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800286e:	483a      	ldr	r0, [pc, #232]	@ (8002958 <MX_TIM1_Init+0x180>)
 8002870:	f003 fadb 	bl	8005e2a <HAL_TIM_PWM_Init>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800287a:	f000 f9e1 	bl	8002c40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800287e:	2300      	movs	r3, #0
 8002880:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002882:	2300      	movs	r3, #0
 8002884:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002886:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800288a:	4619      	mov	r1, r3
 800288c:	4832      	ldr	r0, [pc, #200]	@ (8002958 <MX_TIM1_Init+0x180>)
 800288e:	f004 f889 	bl	80069a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002898:	f000 f9d2 	bl	8002c40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800289c:	2360      	movs	r3, #96	@ 0x60
 800289e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80028a0:	2300      	movs	r3, #0
 80028a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028a4:	2300      	movs	r3, #0
 80028a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80028a8:	2300      	movs	r3, #0
 80028aa:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028ac:	2300      	movs	r3, #0
 80028ae:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80028b0:	2300      	movs	r3, #0
 80028b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80028b4:	2300      	movs	r3, #0
 80028b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028bc:	2200      	movs	r2, #0
 80028be:	4619      	mov	r1, r3
 80028c0:	4825      	ldr	r0, [pc, #148]	@ (8002958 <MX_TIM1_Init+0x180>)
 80028c2:	f003 fbc9 	bl	8006058 <HAL_TIM_PWM_ConfigChannel>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80028cc:	f000 f9b8 	bl	8002c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028d4:	2204      	movs	r2, #4
 80028d6:	4619      	mov	r1, r3
 80028d8:	481f      	ldr	r0, [pc, #124]	@ (8002958 <MX_TIM1_Init+0x180>)
 80028da:	f003 fbbd 	bl	8006058 <HAL_TIM_PWM_ConfigChannel>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80028e4:	f000 f9ac 	bl	8002c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80028e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028ec:	2208      	movs	r2, #8
 80028ee:	4619      	mov	r1, r3
 80028f0:	4819      	ldr	r0, [pc, #100]	@ (8002958 <MX_TIM1_Init+0x180>)
 80028f2:	f003 fbb1 	bl	8006058 <HAL_TIM_PWM_ConfigChannel>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80028fc:	f000 f9a0 	bl	8002c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002900:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002904:	220c      	movs	r2, #12
 8002906:	4619      	mov	r1, r3
 8002908:	4813      	ldr	r0, [pc, #76]	@ (8002958 <MX_TIM1_Init+0x180>)
 800290a:	f003 fba5 	bl	8006058 <HAL_TIM_PWM_ConfigChannel>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002914:	f000 f994 	bl	8002c40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002918:	2300      	movs	r3, #0
 800291a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800291c:	2300      	movs	r3, #0
 800291e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002920:	2300      	movs	r3, #0
 8002922:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002924:	2300      	movs	r3, #0
 8002926:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800292c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002930:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002932:	2300      	movs	r3, #0
 8002934:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002936:	1d3b      	adds	r3, r7, #4
 8002938:	4619      	mov	r1, r3
 800293a:	4807      	ldr	r0, [pc, #28]	@ (8002958 <MX_TIM1_Init+0x180>)
 800293c:	f004 f8ae 	bl	8006a9c <HAL_TIMEx_ConfigBreakDeadTime>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8002946:	f000 f97b 	bl	8002c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800294a:	4803      	ldr	r0, [pc, #12]	@ (8002958 <MX_TIM1_Init+0x180>)
 800294c:	f000 faea 	bl	8002f24 <HAL_TIM_MspPostInit>

}
 8002950:	bf00      	nop
 8002952:	3758      	adds	r7, #88	@ 0x58
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	20000380 	.word	0x20000380
 800295c:	40010000 	.word	0x40010000

08002960 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b08e      	sub	sp, #56	@ 0x38
 8002964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002966:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	605a      	str	r2, [r3, #4]
 8002970:	609a      	str	r2, [r3, #8]
 8002972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002974:	f107 0320 	add.w	r3, r7, #32
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800297e:	1d3b      	adds	r3, r7, #4
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	60da      	str	r2, [r3, #12]
 800298a:	611a      	str	r2, [r3, #16]
 800298c:	615a      	str	r2, [r3, #20]
 800298e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002990:	4b33      	ldr	r3, [pc, #204]	@ (8002a60 <MX_TIM2_Init+0x100>)
 8002992:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002996:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1440-1;
 8002998:	4b31      	ldr	r3, [pc, #196]	@ (8002a60 <MX_TIM2_Init+0x100>)
 800299a:	f240 529f 	movw	r2, #1439	@ 0x59f
 800299e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029a0:	4b2f      	ldr	r3, [pc, #188]	@ (8002a60 <MX_TIM2_Init+0x100>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80029a6:	4b2e      	ldr	r3, [pc, #184]	@ (8002a60 <MX_TIM2_Init+0x100>)
 80029a8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80029ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029ae:	4b2c      	ldr	r3, [pc, #176]	@ (8002a60 <MX_TIM2_Init+0x100>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002a60 <MX_TIM2_Init+0x100>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80029ba:	4829      	ldr	r0, [pc, #164]	@ (8002a60 <MX_TIM2_Init+0x100>)
 80029bc:	f003 f9e6 	bl	8005d8c <HAL_TIM_Base_Init>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80029c6:	f000 f93b 	bl	8002c40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80029d4:	4619      	mov	r1, r3
 80029d6:	4822      	ldr	r0, [pc, #136]	@ (8002a60 <MX_TIM2_Init+0x100>)
 80029d8:	f003 fc00 	bl	80061dc <HAL_TIM_ConfigClockSource>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80029e2:	f000 f92d 	bl	8002c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80029e6:	481e      	ldr	r0, [pc, #120]	@ (8002a60 <MX_TIM2_Init+0x100>)
 80029e8:	f003 fa1f 	bl	8005e2a <HAL_TIM_PWM_Init>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80029f2:	f000 f925 	bl	8002c40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029f6:	2300      	movs	r3, #0
 80029f8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029fa:	2300      	movs	r3, #0
 80029fc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029fe:	f107 0320 	add.w	r3, r7, #32
 8002a02:	4619      	mov	r1, r3
 8002a04:	4816      	ldr	r0, [pc, #88]	@ (8002a60 <MX_TIM2_Init+0x100>)
 8002a06:	f003 ffcd 	bl	80069a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002a10:	f000 f916 	bl	8002c40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a14:	2360      	movs	r3, #96	@ 0x60
 8002a16:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a24:	1d3b      	adds	r3, r7, #4
 8002a26:	2200      	movs	r2, #0
 8002a28:	4619      	mov	r1, r3
 8002a2a:	480d      	ldr	r0, [pc, #52]	@ (8002a60 <MX_TIM2_Init+0x100>)
 8002a2c:	f003 fb14 	bl	8006058 <HAL_TIM_PWM_ConfigChannel>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002a36:	f000 f903 	bl	8002c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a3a:	1d3b      	adds	r3, r7, #4
 8002a3c:	2204      	movs	r2, #4
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4807      	ldr	r0, [pc, #28]	@ (8002a60 <MX_TIM2_Init+0x100>)
 8002a42:	f003 fb09 	bl	8006058 <HAL_TIM_PWM_ConfigChannel>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002a4c:	f000 f8f8 	bl	8002c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002a50:	4803      	ldr	r0, [pc, #12]	@ (8002a60 <MX_TIM2_Init+0x100>)
 8002a52:	f000 fa67 	bl	8002f24 <HAL_TIM_MspPostInit>

}
 8002a56:	bf00      	nop
 8002a58:	3738      	adds	r7, #56	@ 0x38
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	200003c8 	.word	0x200003c8

08002a64 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08a      	sub	sp, #40	@ 0x28
 8002a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a6a:	f107 0320 	add.w	r3, r7, #32
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a74:	1d3b      	adds	r3, r7, #4
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	605a      	str	r2, [r3, #4]
 8002a7c:	609a      	str	r2, [r3, #8]
 8002a7e:	60da      	str	r2, [r3, #12]
 8002a80:	611a      	str	r2, [r3, #16]
 8002a82:	615a      	str	r2, [r3, #20]
 8002a84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a86:	4b22      	ldr	r3, [pc, #136]	@ (8002b10 <MX_TIM3_Init+0xac>)
 8002a88:	4a22      	ldr	r2, [pc, #136]	@ (8002b14 <MX_TIM3_Init+0xb0>)
 8002a8a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 140-1;
 8002a8c:	4b20      	ldr	r3, [pc, #128]	@ (8002b10 <MX_TIM3_Init+0xac>)
 8002a8e:	228b      	movs	r2, #139	@ 0x8b
 8002a90:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a92:	4b1f      	ldr	r3, [pc, #124]	@ (8002b10 <MX_TIM3_Init+0xac>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002a98:	4b1d      	ldr	r3, [pc, #116]	@ (8002b10 <MX_TIM3_Init+0xac>)
 8002a9a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002a9e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b10 <MX_TIM3_Init+0xac>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8002b10 <MX_TIM3_Init+0xac>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002aac:	4818      	ldr	r0, [pc, #96]	@ (8002b10 <MX_TIM3_Init+0xac>)
 8002aae:	f003 f9bc 	bl	8005e2a <HAL_TIM_PWM_Init>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002ab8:	f000 f8c2 	bl	8002c40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002abc:	2300      	movs	r3, #0
 8002abe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ac4:	f107 0320 	add.w	r3, r7, #32
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4811      	ldr	r0, [pc, #68]	@ (8002b10 <MX_TIM3_Init+0xac>)
 8002acc:	f003 ff6a 	bl	80069a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002ad6:	f000 f8b3 	bl	8002c40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ada:	2360      	movs	r3, #96	@ 0x60
 8002adc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002aea:	1d3b      	adds	r3, r7, #4
 8002aec:	2200      	movs	r2, #0
 8002aee:	4619      	mov	r1, r3
 8002af0:	4807      	ldr	r0, [pc, #28]	@ (8002b10 <MX_TIM3_Init+0xac>)
 8002af2:	f003 fab1 	bl	8006058 <HAL_TIM_PWM_ConfigChannel>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002afc:	f000 f8a0 	bl	8002c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002b00:	4803      	ldr	r0, [pc, #12]	@ (8002b10 <MX_TIM3_Init+0xac>)
 8002b02:	f000 fa0f 	bl	8002f24 <HAL_TIM_MspPostInit>

}
 8002b06:	bf00      	nop
 8002b08:	3728      	adds	r7, #40	@ 0x28
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20000410 	.word	0x20000410
 8002b14:	40000400 	.word	0x40000400

08002b18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08a      	sub	sp, #40	@ 0x28
 8002b1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b1e:	f107 0314 	add.w	r3, r7, #20
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	605a      	str	r2, [r3, #4]
 8002b28:	609a      	str	r2, [r3, #8]
 8002b2a:	60da      	str	r2, [r3, #12]
 8002b2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b2e:	2300      	movs	r3, #0
 8002b30:	613b      	str	r3, [r7, #16]
 8002b32:	4b3f      	ldr	r3, [pc, #252]	@ (8002c30 <MX_GPIO_Init+0x118>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b36:	4a3e      	ldr	r2, [pc, #248]	@ (8002c30 <MX_GPIO_Init+0x118>)
 8002b38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b3e:	4b3c      	ldr	r3, [pc, #240]	@ (8002c30 <MX_GPIO_Init+0x118>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b46:	613b      	str	r3, [r7, #16]
 8002b48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	4b38      	ldr	r3, [pc, #224]	@ (8002c30 <MX_GPIO_Init+0x118>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b52:	4a37      	ldr	r2, [pc, #220]	@ (8002c30 <MX_GPIO_Init+0x118>)
 8002b54:	f043 0304 	orr.w	r3, r3, #4
 8002b58:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b5a:	4b35      	ldr	r3, [pc, #212]	@ (8002c30 <MX_GPIO_Init+0x118>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5e:	f003 0304 	and.w	r3, r3, #4
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	4b31      	ldr	r3, [pc, #196]	@ (8002c30 <MX_GPIO_Init+0x118>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6e:	4a30      	ldr	r2, [pc, #192]	@ (8002c30 <MX_GPIO_Init+0x118>)
 8002b70:	f043 0301 	orr.w	r3, r3, #1
 8002b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b76:	4b2e      	ldr	r3, [pc, #184]	@ (8002c30 <MX_GPIO_Init+0x118>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	60bb      	str	r3, [r7, #8]
 8002b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	607b      	str	r3, [r7, #4]
 8002b86:	4b2a      	ldr	r3, [pc, #168]	@ (8002c30 <MX_GPIO_Init+0x118>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8a:	4a29      	ldr	r2, [pc, #164]	@ (8002c30 <MX_GPIO_Init+0x118>)
 8002b8c:	f043 0302 	orr.w	r3, r3, #2
 8002b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b92:	4b27      	ldr	r3, [pc, #156]	@ (8002c30 <MX_GPIO_Init+0x118>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	607b      	str	r3, [r7, #4]
 8002b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	603b      	str	r3, [r7, #0]
 8002ba2:	4b23      	ldr	r3, [pc, #140]	@ (8002c30 <MX_GPIO_Init+0x118>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba6:	4a22      	ldr	r2, [pc, #136]	@ (8002c30 <MX_GPIO_Init+0x118>)
 8002ba8:	f043 0310 	orr.w	r3, r3, #16
 8002bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bae:	4b20      	ldr	r3, [pc, #128]	@ (8002c30 <MX_GPIO_Init+0x118>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb2:	f003 0310 	and.w	r3, r3, #16
 8002bb6:	603b      	str	r3, [r7, #0]
 8002bb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN1_Forward_12V_Motor_Pin|IN2_Backward_12V_Motor_Pin|IN1_Forward_Pumps_Pin|IN_2_Forward_Output_Pin
 8002bba:	2200      	movs	r2, #0
 8002bbc:	21fc      	movs	r1, #252	@ 0xfc
 8002bbe:	481d      	ldr	r0, [pc, #116]	@ (8002c34 <MX_GPIO_Init+0x11c>)
 8002bc0:	f001 fabc 	bl	800413c <HAL_GPIO_WritePin>
                          |IN3_Backward_Pumps_Pin|IN4_Backward_Pumps_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button_12_V__leri_Pin Button_12_V_Geri_Pin */
  GPIO_InitStruct.Pin = Button_12_V__leri_Pin|Button_12_V_Geri_Pin;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd0:	f107 0314 	add.w	r3, r7, #20
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4817      	ldr	r0, [pc, #92]	@ (8002c34 <MX_GPIO_Init+0x11c>)
 8002bd8:	f001 f8fc 	bl	8003dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Forward_12V_Motor_Pin IN2_Backward_12V_Motor_Pin IN1_Forward_Pumps_Pin IN_2_Forward_Output_Pin
                           IN3_Backward_Pumps_Pin IN4_Backward_Pumps_Pin */
  GPIO_InitStruct.Pin = IN1_Forward_12V_Motor_Pin|IN2_Backward_12V_Motor_Pin|IN1_Forward_Pumps_Pin|IN_2_Forward_Output_Pin
 8002bdc:	23fc      	movs	r3, #252	@ 0xfc
 8002bde:	617b      	str	r3, [r7, #20]
                          |IN3_Backward_Pumps_Pin|IN4_Backward_Pumps_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002be0:	2301      	movs	r3, #1
 8002be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be4:	2300      	movs	r3, #0
 8002be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be8:	2300      	movs	r3, #0
 8002bea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bec:	f107 0314 	add.w	r3, r7, #20
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4810      	ldr	r0, [pc, #64]	@ (8002c34 <MX_GPIO_Init+0x11c>)
 8002bf4:	f001 f8ee 	bl	8003dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c00:	2301      	movs	r3, #1
 8002c02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c04:	f107 0314 	add.w	r3, r7, #20
 8002c08:	4619      	mov	r1, r3
 8002c0a:	480b      	ldr	r0, [pc, #44]	@ (8002c38 <MX_GPIO_Init+0x120>)
 8002c0c:	f001 f8e2 	bl	8003dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Switch_ON_Pin Switch_ARKA_Pin */
  GPIO_InitStruct.Pin = Switch_ON_Pin|Switch_ARKA_Pin;
 8002c10:	2303      	movs	r3, #3
 8002c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c14:	2300      	movs	r3, #0
 8002c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c1c:	f107 0314 	add.w	r3, r7, #20
 8002c20:	4619      	mov	r1, r3
 8002c22:	4806      	ldr	r0, [pc, #24]	@ (8002c3c <MX_GPIO_Init+0x124>)
 8002c24:	f001 f8d6 	bl	8003dd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c28:	bf00      	nop
 8002c2a:	3728      	adds	r7, #40	@ 0x28
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40023800 	.word	0x40023800
 8002c34:	40020000 	.word	0x40020000
 8002c38:	40020400 	.word	0x40020400
 8002c3c:	40021000 	.word	0x40021000

08002c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c44:	b672      	cpsid	i
}
 8002c46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c48:	bf00      	nop
 8002c4a:	e7fd      	b.n	8002c48 <Error_Handler+0x8>

08002c4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c52:	2300      	movs	r3, #0
 8002c54:	607b      	str	r3, [r7, #4]
 8002c56:	4b10      	ldr	r3, [pc, #64]	@ (8002c98 <HAL_MspInit+0x4c>)
 8002c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c5a:	4a0f      	ldr	r2, [pc, #60]	@ (8002c98 <HAL_MspInit+0x4c>)
 8002c5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c60:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c62:	4b0d      	ldr	r3, [pc, #52]	@ (8002c98 <HAL_MspInit+0x4c>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c6a:	607b      	str	r3, [r7, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	603b      	str	r3, [r7, #0]
 8002c72:	4b09      	ldr	r3, [pc, #36]	@ (8002c98 <HAL_MspInit+0x4c>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c76:	4a08      	ldr	r2, [pc, #32]	@ (8002c98 <HAL_MspInit+0x4c>)
 8002c78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c7e:	4b06      	ldr	r3, [pc, #24]	@ (8002c98 <HAL_MspInit+0x4c>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c86:	603b      	str	r3, [r7, #0]
 8002c88:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002c8a:	2007      	movs	r0, #7
 8002c8c:	f001 f86e 	bl	8003d6c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c90:	bf00      	nop
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40023800 	.word	0x40023800

08002c9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08e      	sub	sp, #56	@ 0x38
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	605a      	str	r2, [r3, #4]
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	60da      	str	r2, [r3, #12]
 8002cb2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a45      	ldr	r2, [pc, #276]	@ (8002dd0 <HAL_ADC_MspInit+0x134>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d128      	bne.n	8002d10 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	623b      	str	r3, [r7, #32]
 8002cc2:	4b44      	ldr	r3, [pc, #272]	@ (8002dd4 <HAL_ADC_MspInit+0x138>)
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc6:	4a43      	ldr	r2, [pc, #268]	@ (8002dd4 <HAL_ADC_MspInit+0x138>)
 8002cc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ccc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cce:	4b41      	ldr	r3, [pc, #260]	@ (8002dd4 <HAL_ADC_MspInit+0x138>)
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd6:	623b      	str	r3, [r7, #32]
 8002cd8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61fb      	str	r3, [r7, #28]
 8002cde:	4b3d      	ldr	r3, [pc, #244]	@ (8002dd4 <HAL_ADC_MspInit+0x138>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce2:	4a3c      	ldr	r2, [pc, #240]	@ (8002dd4 <HAL_ADC_MspInit+0x138>)
 8002ce4:	f043 0304 	orr.w	r3, r3, #4
 8002ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cea:	4b3a      	ldr	r3, [pc, #232]	@ (8002dd4 <HAL_ADC_MspInit+0x138>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cee:	f003 0304 	and.w	r3, r3, #4
 8002cf2:	61fb      	str	r3, [r7, #28]
 8002cf4:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8002cf6:	230a      	movs	r3, #10
 8002cf8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d06:	4619      	mov	r1, r3
 8002d08:	4833      	ldr	r0, [pc, #204]	@ (8002dd8 <HAL_ADC_MspInit+0x13c>)
 8002d0a:	f001 f863 	bl	8003dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002d0e:	e05a      	b.n	8002dc6 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a31      	ldr	r2, [pc, #196]	@ (8002ddc <HAL_ADC_MspInit+0x140>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d128      	bne.n	8002d6c <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61bb      	str	r3, [r7, #24]
 8002d1e:	4b2d      	ldr	r3, [pc, #180]	@ (8002dd4 <HAL_ADC_MspInit+0x138>)
 8002d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d22:	4a2c      	ldr	r2, [pc, #176]	@ (8002dd4 <HAL_ADC_MspInit+0x138>)
 8002d24:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d28:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d2a:	4b2a      	ldr	r3, [pc, #168]	@ (8002dd4 <HAL_ADC_MspInit+0x138>)
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d32:	61bb      	str	r3, [r7, #24]
 8002d34:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	617b      	str	r3, [r7, #20]
 8002d3a:	4b26      	ldr	r3, [pc, #152]	@ (8002dd4 <HAL_ADC_MspInit+0x138>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3e:	4a25      	ldr	r2, [pc, #148]	@ (8002dd4 <HAL_ADC_MspInit+0x138>)
 8002d40:	f043 0304 	orr.w	r3, r3, #4
 8002d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d46:	4b23      	ldr	r3, [pc, #140]	@ (8002dd4 <HAL_ADC_MspInit+0x138>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d4a:	f003 0304 	and.w	r3, r3, #4
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d52:	2301      	movs	r3, #1
 8002d54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d56:	2303      	movs	r3, #3
 8002d58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d62:	4619      	mov	r1, r3
 8002d64:	481c      	ldr	r0, [pc, #112]	@ (8002dd8 <HAL_ADC_MspInit+0x13c>)
 8002d66:	f001 f835 	bl	8003dd4 <HAL_GPIO_Init>
}
 8002d6a:	e02c      	b.n	8002dc6 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a1b      	ldr	r2, [pc, #108]	@ (8002de0 <HAL_ADC_MspInit+0x144>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d127      	bne.n	8002dc6 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002d76:	2300      	movs	r3, #0
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	4b16      	ldr	r3, [pc, #88]	@ (8002dd4 <HAL_ADC_MspInit+0x138>)
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d7e:	4a15      	ldr	r2, [pc, #84]	@ (8002dd4 <HAL_ADC_MspInit+0x138>)
 8002d80:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d84:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d86:	4b13      	ldr	r3, [pc, #76]	@ (8002dd4 <HAL_ADC_MspInit+0x138>)
 8002d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d8e:	613b      	str	r3, [r7, #16]
 8002d90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	4b0f      	ldr	r3, [pc, #60]	@ (8002dd4 <HAL_ADC_MspInit+0x138>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9a:	4a0e      	ldr	r2, [pc, #56]	@ (8002dd4 <HAL_ADC_MspInit+0x138>)
 8002d9c:	f043 0304 	orr.w	r3, r3, #4
 8002da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002da2:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd4 <HAL_ADC_MspInit+0x138>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da6:	f003 0304 	and.w	r3, r3, #4
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002dae:	2304      	movs	r3, #4
 8002db0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002db2:	2303      	movs	r3, #3
 8002db4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4805      	ldr	r0, [pc, #20]	@ (8002dd8 <HAL_ADC_MspInit+0x13c>)
 8002dc2:	f001 f807 	bl	8003dd4 <HAL_GPIO_Init>
}
 8002dc6:	bf00      	nop
 8002dc8:	3738      	adds	r7, #56	@ 0x38
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40012000 	.word	0x40012000
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	40020800 	.word	0x40020800
 8002ddc:	40012100 	.word	0x40012100
 8002de0:	40012200 	.word	0x40012200

08002de4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08a      	sub	sp, #40	@ 0x28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dec:	f107 0314 	add.w	r3, r7, #20
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	609a      	str	r2, [r3, #8]
 8002df8:	60da      	str	r2, [r3, #12]
 8002dfa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a19      	ldr	r2, [pc, #100]	@ (8002e68 <HAL_I2C_MspInit+0x84>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d12b      	bne.n	8002e5e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e06:	2300      	movs	r3, #0
 8002e08:	613b      	str	r3, [r7, #16]
 8002e0a:	4b18      	ldr	r3, [pc, #96]	@ (8002e6c <HAL_I2C_MspInit+0x88>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0e:	4a17      	ldr	r2, [pc, #92]	@ (8002e6c <HAL_I2C_MspInit+0x88>)
 8002e10:	f043 0302 	orr.w	r3, r3, #2
 8002e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e16:	4b15      	ldr	r3, [pc, #84]	@ (8002e6c <HAL_I2C_MspInit+0x88>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e22:	23c0      	movs	r3, #192	@ 0xc0
 8002e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e26:	2312      	movs	r3, #18
 8002e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e32:	2304      	movs	r3, #4
 8002e34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e36:	f107 0314 	add.w	r3, r7, #20
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	480c      	ldr	r0, [pc, #48]	@ (8002e70 <HAL_I2C_MspInit+0x8c>)
 8002e3e:	f000 ffc9 	bl	8003dd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e42:	2300      	movs	r3, #0
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	4b09      	ldr	r3, [pc, #36]	@ (8002e6c <HAL_I2C_MspInit+0x88>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4a:	4a08      	ldr	r2, [pc, #32]	@ (8002e6c <HAL_I2C_MspInit+0x88>)
 8002e4c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002e50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e52:	4b06      	ldr	r3, [pc, #24]	@ (8002e6c <HAL_I2C_MspInit+0x88>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002e5e:	bf00      	nop
 8002e60:	3728      	adds	r7, #40	@ 0x28
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40005400 	.word	0x40005400
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	40020400 	.word	0x40020400

08002e74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a15      	ldr	r2, [pc, #84]	@ (8002ed8 <HAL_TIM_Base_MspInit+0x64>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d10e      	bne.n	8002ea4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	4b14      	ldr	r3, [pc, #80]	@ (8002edc <HAL_TIM_Base_MspInit+0x68>)
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e8e:	4a13      	ldr	r2, [pc, #76]	@ (8002edc <HAL_TIM_Base_MspInit+0x68>)
 8002e90:	f043 0301 	orr.w	r3, r3, #1
 8002e94:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e96:	4b11      	ldr	r3, [pc, #68]	@ (8002edc <HAL_TIM_Base_MspInit+0x68>)
 8002e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002ea2:	e012      	b.n	8002eca <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eac:	d10d      	bne.n	8002eca <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60bb      	str	r3, [r7, #8]
 8002eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8002edc <HAL_TIM_Base_MspInit+0x68>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb6:	4a09      	ldr	r2, [pc, #36]	@ (8002edc <HAL_TIM_Base_MspInit+0x68>)
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ebe:	4b07      	ldr	r3, [pc, #28]	@ (8002edc <HAL_TIM_Base_MspInit+0x68>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	60bb      	str	r3, [r7, #8]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
}
 8002eca:	bf00      	nop
 8002ecc:	3714      	adds	r7, #20
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	40010000 	.word	0x40010000
 8002edc:	40023800 	.word	0x40023800

08002ee0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a0b      	ldr	r2, [pc, #44]	@ (8002f1c <HAL_TIM_PWM_MspInit+0x3c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d10d      	bne.n	8002f0e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8002f20 <HAL_TIM_PWM_MspInit+0x40>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efa:	4a09      	ldr	r2, [pc, #36]	@ (8002f20 <HAL_TIM_PWM_MspInit+0x40>)
 8002efc:	f043 0302 	orr.w	r3, r3, #2
 8002f00:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f02:	4b07      	ldr	r3, [pc, #28]	@ (8002f20 <HAL_TIM_PWM_MspInit+0x40>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002f0e:	bf00      	nop
 8002f10:	3714      	adds	r7, #20
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	40000400 	.word	0x40000400
 8002f20:	40023800 	.word	0x40023800

08002f24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b08c      	sub	sp, #48	@ 0x30
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f2c:	f107 031c 	add.w	r3, r7, #28
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	605a      	str	r2, [r3, #4]
 8002f36:	609a      	str	r2, [r3, #8]
 8002f38:	60da      	str	r2, [r3, #12]
 8002f3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a46      	ldr	r2, [pc, #280]	@ (800305c <HAL_TIM_MspPostInit+0x138>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d11f      	bne.n	8002f86 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f46:	2300      	movs	r3, #0
 8002f48:	61bb      	str	r3, [r7, #24]
 8002f4a:	4b45      	ldr	r3, [pc, #276]	@ (8003060 <HAL_TIM_MspPostInit+0x13c>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4e:	4a44      	ldr	r2, [pc, #272]	@ (8003060 <HAL_TIM_MspPostInit+0x13c>)
 8002f50:	f043 0310 	orr.w	r3, r3, #16
 8002f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f56:	4b42      	ldr	r3, [pc, #264]	@ (8003060 <HAL_TIM_MspPostInit+0x13c>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5a:	f003 0310 	and.w	r3, r3, #16
 8002f5e:	61bb      	str	r3, [r7, #24]
 8002f60:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8002f62:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8002f66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f68:	2302      	movs	r3, #2
 8002f6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f70:	2300      	movs	r3, #0
 8002f72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002f74:	2301      	movs	r3, #1
 8002f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f78:	f107 031c 	add.w	r3, r7, #28
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4839      	ldr	r0, [pc, #228]	@ (8003064 <HAL_TIM_MspPostInit+0x140>)
 8002f80:	f000 ff28 	bl	8003dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002f84:	e065      	b.n	8003052 <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM2)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f8e:	d13d      	bne.n	800300c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f90:	2300      	movs	r3, #0
 8002f92:	617b      	str	r3, [r7, #20]
 8002f94:	4b32      	ldr	r3, [pc, #200]	@ (8003060 <HAL_TIM_MspPostInit+0x13c>)
 8002f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f98:	4a31      	ldr	r2, [pc, #196]	@ (8003060 <HAL_TIM_MspPostInit+0x13c>)
 8002f9a:	f043 0301 	orr.w	r3, r3, #1
 8002f9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fa0:	4b2f      	ldr	r3, [pc, #188]	@ (8003060 <HAL_TIM_MspPostInit+0x13c>)
 8002fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	617b      	str	r3, [r7, #20]
 8002faa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fac:	2300      	movs	r3, #0
 8002fae:	613b      	str	r3, [r7, #16]
 8002fb0:	4b2b      	ldr	r3, [pc, #172]	@ (8003060 <HAL_TIM_MspPostInit+0x13c>)
 8002fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb4:	4a2a      	ldr	r2, [pc, #168]	@ (8003060 <HAL_TIM_MspPostInit+0x13c>)
 8002fb6:	f043 0302 	orr.w	r3, r3, #2
 8002fba:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fbc:	4b28      	ldr	r3, [pc, #160]	@ (8003060 <HAL_TIM_MspPostInit+0x13c>)
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	613b      	str	r3, [r7, #16]
 8002fc6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002fc8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fce:	2302      	movs	r3, #2
 8002fd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fde:	f107 031c 	add.w	r3, r7, #28
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4820      	ldr	r0, [pc, #128]	@ (8003068 <HAL_TIM_MspPostInit+0x144>)
 8002fe6:	f000 fef5 	bl	8003dd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002fea:	2308      	movs	r3, #8
 8002fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fee:	2302      	movs	r3, #2
 8002ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ffe:	f107 031c 	add.w	r3, r7, #28
 8003002:	4619      	mov	r1, r3
 8003004:	4819      	ldr	r0, [pc, #100]	@ (800306c <HAL_TIM_MspPostInit+0x148>)
 8003006:	f000 fee5 	bl	8003dd4 <HAL_GPIO_Init>
}
 800300a:	e022      	b.n	8003052 <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM3)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a17      	ldr	r2, [pc, #92]	@ (8003070 <HAL_TIM_MspPostInit+0x14c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d11d      	bne.n	8003052 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	4b11      	ldr	r3, [pc, #68]	@ (8003060 <HAL_TIM_MspPostInit+0x13c>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301e:	4a10      	ldr	r2, [pc, #64]	@ (8003060 <HAL_TIM_MspPostInit+0x13c>)
 8003020:	f043 0304 	orr.w	r3, r3, #4
 8003024:	6313      	str	r3, [r2, #48]	@ 0x30
 8003026:	4b0e      	ldr	r3, [pc, #56]	@ (8003060 <HAL_TIM_MspPostInit+0x13c>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302a:	f003 0304 	and.w	r3, r3, #4
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003032:	2340      	movs	r3, #64	@ 0x40
 8003034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003036:	2302      	movs	r3, #2
 8003038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303a:	2300      	movs	r3, #0
 800303c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303e:	2300      	movs	r3, #0
 8003040:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003042:	2302      	movs	r3, #2
 8003044:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003046:	f107 031c 	add.w	r3, r7, #28
 800304a:	4619      	mov	r1, r3
 800304c:	4809      	ldr	r0, [pc, #36]	@ (8003074 <HAL_TIM_MspPostInit+0x150>)
 800304e:	f000 fec1 	bl	8003dd4 <HAL_GPIO_Init>
}
 8003052:	bf00      	nop
 8003054:	3730      	adds	r7, #48	@ 0x30
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40010000 	.word	0x40010000
 8003060:	40023800 	.word	0x40023800
 8003064:	40021000 	.word	0x40021000
 8003068:	40020000 	.word	0x40020000
 800306c:	40020400 	.word	0x40020400
 8003070:	40000400 	.word	0x40000400
 8003074:	40020800 	.word	0x40020800

08003078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800307c:	bf00      	nop
 800307e:	e7fd      	b.n	800307c <NMI_Handler+0x4>

08003080 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003084:	bf00      	nop
 8003086:	e7fd      	b.n	8003084 <HardFault_Handler+0x4>

08003088 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800308c:	bf00      	nop
 800308e:	e7fd      	b.n	800308c <MemManage_Handler+0x4>

08003090 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003094:	bf00      	nop
 8003096:	e7fd      	b.n	8003094 <BusFault_Handler+0x4>

08003098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800309c:	bf00      	nop
 800309e:	e7fd      	b.n	800309c <UsageFault_Handler+0x4>

080030a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030a4:	bf00      	nop
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030ae:	b480      	push	{r7}
 80030b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030b2:	bf00      	nop
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030c0:	bf00      	nop
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030ce:	f000 f957 	bl	8003380 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030d2:	bf00      	nop
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030d6:	b480      	push	{r7}
 80030d8:	af00      	add	r7, sp, #0
  return 1;
 80030da:	2301      	movs	r3, #1
}
 80030dc:	4618      	mov	r0, r3
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <_kill>:

int _kill(int pid, int sig)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b082      	sub	sp, #8
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
 80030ee:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80030f0:	f004 fd0a 	bl	8007b08 <__errno>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2216      	movs	r2, #22
 80030f8:	601a      	str	r2, [r3, #0]
  return -1;
 80030fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <_exit>:

void _exit (int status)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b082      	sub	sp, #8
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800310e:	f04f 31ff 	mov.w	r1, #4294967295
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7ff ffe7 	bl	80030e6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003118:	bf00      	nop
 800311a:	e7fd      	b.n	8003118 <_exit+0x12>

0800311c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]
 800312c:	e00a      	b.n	8003144 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800312e:	f3af 8000 	nop.w
 8003132:	4601      	mov	r1, r0
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	60ba      	str	r2, [r7, #8]
 800313a:	b2ca      	uxtb	r2, r1
 800313c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	3301      	adds	r3, #1
 8003142:	617b      	str	r3, [r7, #20]
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	429a      	cmp	r2, r3
 800314a:	dbf0      	blt.n	800312e <_read+0x12>
  }

  return len;
 800314c:	687b      	ldr	r3, [r7, #4]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b086      	sub	sp, #24
 800315a:	af00      	add	r7, sp, #0
 800315c:	60f8      	str	r0, [r7, #12]
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003162:	2300      	movs	r3, #0
 8003164:	617b      	str	r3, [r7, #20]
 8003166:	e009      	b.n	800317c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	1c5a      	adds	r2, r3, #1
 800316c:	60ba      	str	r2, [r7, #8]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	3301      	adds	r3, #1
 800317a:	617b      	str	r3, [r7, #20]
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	429a      	cmp	r2, r3
 8003182:	dbf1      	blt.n	8003168 <_write+0x12>
  }
  return len;
 8003184:	687b      	ldr	r3, [r7, #4]
}
 8003186:	4618      	mov	r0, r3
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <_close>:

int _close(int file)
{
 800318e:	b480      	push	{r7}
 8003190:	b083      	sub	sp, #12
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003196:	f04f 33ff 	mov.w	r3, #4294967295
}
 800319a:	4618      	mov	r0, r3
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b083      	sub	sp, #12
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
 80031ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80031b6:	605a      	str	r2, [r3, #4]
  return 0;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <_isatty>:

int _isatty(int file)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b083      	sub	sp, #12
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031ce:	2301      	movs	r3, #1
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
	...

080031f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003200:	4a14      	ldr	r2, [pc, #80]	@ (8003254 <_sbrk+0x5c>)
 8003202:	4b15      	ldr	r3, [pc, #84]	@ (8003258 <_sbrk+0x60>)
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800320c:	4b13      	ldr	r3, [pc, #76]	@ (800325c <_sbrk+0x64>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d102      	bne.n	800321a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003214:	4b11      	ldr	r3, [pc, #68]	@ (800325c <_sbrk+0x64>)
 8003216:	4a12      	ldr	r2, [pc, #72]	@ (8003260 <_sbrk+0x68>)
 8003218:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800321a:	4b10      	ldr	r3, [pc, #64]	@ (800325c <_sbrk+0x64>)
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4413      	add	r3, r2
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	429a      	cmp	r2, r3
 8003226:	d207      	bcs.n	8003238 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003228:	f004 fc6e 	bl	8007b08 <__errno>
 800322c:	4603      	mov	r3, r0
 800322e:	220c      	movs	r2, #12
 8003230:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003232:	f04f 33ff 	mov.w	r3, #4294967295
 8003236:	e009      	b.n	800324c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003238:	4b08      	ldr	r3, [pc, #32]	@ (800325c <_sbrk+0x64>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800323e:	4b07      	ldr	r3, [pc, #28]	@ (800325c <_sbrk+0x64>)
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4413      	add	r3, r2
 8003246:	4a05      	ldr	r2, [pc, #20]	@ (800325c <_sbrk+0x64>)
 8003248:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800324a:	68fb      	ldr	r3, [r7, #12]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	20020000 	.word	0x20020000
 8003258:	00000400 	.word	0x00000400
 800325c:	20000524 	.word	0x20000524
 8003260:	20000678 	.word	0x20000678

08003264 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003268:	4b06      	ldr	r3, [pc, #24]	@ (8003284 <SystemInit+0x20>)
 800326a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800326e:	4a05      	ldr	r2, [pc, #20]	@ (8003284 <SystemInit+0x20>)
 8003270:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003274:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003278:	bf00      	nop
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	e000ed00 	.word	0xe000ed00

08003288 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003288:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80032c0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800328c:	f7ff ffea 	bl	8003264 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003290:	480c      	ldr	r0, [pc, #48]	@ (80032c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003292:	490d      	ldr	r1, [pc, #52]	@ (80032c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003294:	4a0d      	ldr	r2, [pc, #52]	@ (80032cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003298:	e002      	b.n	80032a0 <LoopCopyDataInit>

0800329a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800329a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800329c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800329e:	3304      	adds	r3, #4

080032a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032a4:	d3f9      	bcc.n	800329a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032a6:	4a0a      	ldr	r2, [pc, #40]	@ (80032d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80032a8:	4c0a      	ldr	r4, [pc, #40]	@ (80032d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80032aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032ac:	e001      	b.n	80032b2 <LoopFillZerobss>

080032ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032b0:	3204      	adds	r2, #4

080032b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032b4:	d3fb      	bcc.n	80032ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80032b6:	f004 fc2d 	bl	8007b14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032ba:	f7fe fe8b 	bl	8001fd4 <main>
  bx  lr    
 80032be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80032c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80032c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032c8:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 80032cc:	0800cf38 	.word	0x0800cf38
  ldr r2, =_sbss
 80032d0:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 80032d4:	20000678 	.word	0x20000678

080032d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032d8:	e7fe      	b.n	80032d8 <ADC_IRQHandler>
	...

080032dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032e0:	4b0e      	ldr	r3, [pc, #56]	@ (800331c <HAL_Init+0x40>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a0d      	ldr	r2, [pc, #52]	@ (800331c <HAL_Init+0x40>)
 80032e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032ec:	4b0b      	ldr	r3, [pc, #44]	@ (800331c <HAL_Init+0x40>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a0a      	ldr	r2, [pc, #40]	@ (800331c <HAL_Init+0x40>)
 80032f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032f8:	4b08      	ldr	r3, [pc, #32]	@ (800331c <HAL_Init+0x40>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a07      	ldr	r2, [pc, #28]	@ (800331c <HAL_Init+0x40>)
 80032fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003302:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003304:	2003      	movs	r0, #3
 8003306:	f000 fd31 	bl	8003d6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800330a:	2000      	movs	r0, #0
 800330c:	f000 f808 	bl	8003320 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003310:	f7ff fc9c 	bl	8002c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40023c00 	.word	0x40023c00

08003320 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003328:	4b12      	ldr	r3, [pc, #72]	@ (8003374 <HAL_InitTick+0x54>)
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	4b12      	ldr	r3, [pc, #72]	@ (8003378 <HAL_InitTick+0x58>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	4619      	mov	r1, r3
 8003332:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003336:	fbb3 f3f1 	udiv	r3, r3, r1
 800333a:	fbb2 f3f3 	udiv	r3, r2, r3
 800333e:	4618      	mov	r0, r3
 8003340:	f000 fd3b 	bl	8003dba <HAL_SYSTICK_Config>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e00e      	b.n	800336c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b0f      	cmp	r3, #15
 8003352:	d80a      	bhi.n	800336a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003354:	2200      	movs	r2, #0
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	f04f 30ff 	mov.w	r0, #4294967295
 800335c:	f000 fd11 	bl	8003d82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003360:	4a06      	ldr	r2, [pc, #24]	@ (800337c <HAL_InitTick+0x5c>)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003366:	2300      	movs	r3, #0
 8003368:	e000      	b.n	800336c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
}
 800336c:	4618      	mov	r0, r3
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	20000024 	.word	0x20000024
 8003378:	2000002c 	.word	0x2000002c
 800337c:	20000028 	.word	0x20000028

08003380 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003384:	4b06      	ldr	r3, [pc, #24]	@ (80033a0 <HAL_IncTick+0x20>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	461a      	mov	r2, r3
 800338a:	4b06      	ldr	r3, [pc, #24]	@ (80033a4 <HAL_IncTick+0x24>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4413      	add	r3, r2
 8003390:	4a04      	ldr	r2, [pc, #16]	@ (80033a4 <HAL_IncTick+0x24>)
 8003392:	6013      	str	r3, [r2, #0]
}
 8003394:	bf00      	nop
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	2000002c 	.word	0x2000002c
 80033a4:	20000528 	.word	0x20000528

080033a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  return uwTick;
 80033ac:	4b03      	ldr	r3, [pc, #12]	@ (80033bc <HAL_GetTick+0x14>)
 80033ae:	681b      	ldr	r3, [r3, #0]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	20000528 	.word	0x20000528

080033c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033c8:	f7ff ffee 	bl	80033a8 <HAL_GetTick>
 80033cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d8:	d005      	beq.n	80033e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033da:	4b0a      	ldr	r3, [pc, #40]	@ (8003404 <HAL_Delay+0x44>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	461a      	mov	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4413      	add	r3, r2
 80033e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033e6:	bf00      	nop
 80033e8:	f7ff ffde 	bl	80033a8 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d8f7      	bhi.n	80033e8 <HAL_Delay+0x28>
  {
  }
}
 80033f8:	bf00      	nop
 80033fa:	bf00      	nop
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	2000002c 	.word	0x2000002c

08003408 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e033      	b.n	8003486 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003422:	2b00      	cmp	r3, #0
 8003424:	d109      	bne.n	800343a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7ff fc38 	bl	8002c9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343e:	f003 0310 	and.w	r3, r3, #16
 8003442:	2b00      	cmp	r3, #0
 8003444:	d118      	bne.n	8003478 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800344e:	f023 0302 	bic.w	r3, r3, #2
 8003452:	f043 0202 	orr.w	r2, r3, #2
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 fad8 	bl	8003a10 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346a:	f023 0303 	bic.w	r3, r3, #3
 800346e:	f043 0201 	orr.w	r2, r3, #1
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	641a      	str	r2, [r3, #64]	@ 0x40
 8003476:	e001      	b.n	800347c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003484:	7bfb      	ldrb	r3, [r7, #15]
}
 8003486:	4618      	mov	r0, r3
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
	...

08003490 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003498:	2300      	movs	r3, #0
 800349a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d101      	bne.n	80034aa <HAL_ADC_Start+0x1a>
 80034a6:	2302      	movs	r3, #2
 80034a8:	e0b2      	b.n	8003610 <HAL_ADC_Start+0x180>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d018      	beq.n	80034f2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f042 0201 	orr.w	r2, r2, #1
 80034ce:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80034d0:	4b52      	ldr	r3, [pc, #328]	@ (800361c <HAL_ADC_Start+0x18c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a52      	ldr	r2, [pc, #328]	@ (8003620 <HAL_ADC_Start+0x190>)
 80034d6:	fba2 2303 	umull	r2, r3, r2, r3
 80034da:	0c9a      	lsrs	r2, r3, #18
 80034dc:	4613      	mov	r3, r2
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	4413      	add	r3, r2
 80034e2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80034e4:	e002      	b.n	80034ec <HAL_ADC_Start+0x5c>
    {
      counter--;
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	3b01      	subs	r3, #1
 80034ea:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f9      	bne.n	80034e6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d17a      	bne.n	80035f6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003504:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003508:	f023 0301 	bic.w	r3, r3, #1
 800350c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800351e:	2b00      	cmp	r3, #0
 8003520:	d007      	beq.n	8003532 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003526:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800352a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003536:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800353a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800353e:	d106      	bne.n	800354e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003544:	f023 0206 	bic.w	r2, r3, #6
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	645a      	str	r2, [r3, #68]	@ 0x44
 800354c:	e002      	b.n	8003554 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800355c:	4b31      	ldr	r3, [pc, #196]	@ (8003624 <HAL_ADC_Start+0x194>)
 800355e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003568:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f003 031f 	and.w	r3, r3, #31
 8003572:	2b00      	cmp	r3, #0
 8003574:	d12a      	bne.n	80035cc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a2b      	ldr	r2, [pc, #172]	@ (8003628 <HAL_ADC_Start+0x198>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d015      	beq.n	80035ac <HAL_ADC_Start+0x11c>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a29      	ldr	r2, [pc, #164]	@ (800362c <HAL_ADC_Start+0x19c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d105      	bne.n	8003596 <HAL_ADC_Start+0x106>
 800358a:	4b26      	ldr	r3, [pc, #152]	@ (8003624 <HAL_ADC_Start+0x194>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f003 031f 	and.w	r3, r3, #31
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00a      	beq.n	80035ac <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a25      	ldr	r2, [pc, #148]	@ (8003630 <HAL_ADC_Start+0x1a0>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d136      	bne.n	800360e <HAL_ADC_Start+0x17e>
 80035a0:	4b20      	ldr	r3, [pc, #128]	@ (8003624 <HAL_ADC_Start+0x194>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f003 0310 	and.w	r3, r3, #16
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d130      	bne.n	800360e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d129      	bne.n	800360e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80035c8:	609a      	str	r2, [r3, #8]
 80035ca:	e020      	b.n	800360e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a15      	ldr	r2, [pc, #84]	@ (8003628 <HAL_ADC_Start+0x198>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d11b      	bne.n	800360e <HAL_ADC_Start+0x17e>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d114      	bne.n	800360e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689a      	ldr	r2, [r3, #8]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80035f2:	609a      	str	r2, [r3, #8]
 80035f4:	e00b      	b.n	800360e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fa:	f043 0210 	orr.w	r2, r3, #16
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003606:	f043 0201 	orr.w	r2, r3, #1
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	20000024 	.word	0x20000024
 8003620:	431bde83 	.word	0x431bde83
 8003624:	40012300 	.word	0x40012300
 8003628:	40012000 	.word	0x40012000
 800362c:	40012100 	.word	0x40012100
 8003630:	40012200 	.word	0x40012200

08003634 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003642:	2b01      	cmp	r3, #1
 8003644:	d101      	bne.n	800364a <HAL_ADC_Stop+0x16>
 8003646:	2302      	movs	r3, #2
 8003648:	e021      	b.n	800368e <HAL_ADC_Stop+0x5a>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0201 	bic.w	r2, r2, #1
 8003660:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b00      	cmp	r3, #0
 800366e:	d109      	bne.n	8003684 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003674:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003678:	f023 0301 	bic.w	r3, r3, #1
 800367c:	f043 0201 	orr.w	r2, r3, #1
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b084      	sub	sp, #16
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
 80036a2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80036a4:	2300      	movs	r3, #0
 80036a6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036b6:	d113      	bne.n	80036e0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80036c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036c6:	d10b      	bne.n	80036e0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036cc:	f043 0220 	orr.w	r2, r3, #32
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e063      	b.n	80037a8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80036e0:	f7ff fe62 	bl	80033a8 <HAL_GetTick>
 80036e4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80036e6:	e021      	b.n	800372c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ee:	d01d      	beq.n	800372c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d007      	beq.n	8003706 <HAL_ADC_PollForConversion+0x6c>
 80036f6:	f7ff fe57 	bl	80033a8 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	429a      	cmp	r2, r3
 8003704:	d212      	bcs.n	800372c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b02      	cmp	r3, #2
 8003712:	d00b      	beq.n	800372c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003718:	f043 0204 	orr.w	r2, r3, #4
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e03d      	b.n	80037a8 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b02      	cmp	r3, #2
 8003738:	d1d6      	bne.n	80036e8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f06f 0212 	mvn.w	r2, #18
 8003742:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003748:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d123      	bne.n	80037a6 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003762:	2b00      	cmp	r3, #0
 8003764:	d11f      	bne.n	80037a6 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003770:	2b00      	cmp	r3, #0
 8003772:	d006      	beq.n	8003782 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800377e:	2b00      	cmp	r3, #0
 8003780:	d111      	bne.n	80037a6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003786:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003792:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d105      	bne.n	80037a6 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379e:	f043 0201 	orr.w	r2, r3, #1
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80037be:	4618      	mov	r0, r3
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
	...

080037cc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80037d6:	2300      	movs	r3, #0
 80037d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d101      	bne.n	80037e8 <HAL_ADC_ConfigChannel+0x1c>
 80037e4:	2302      	movs	r3, #2
 80037e6:	e105      	b.n	80039f4 <HAL_ADC_ConfigChannel+0x228>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2b09      	cmp	r3, #9
 80037f6:	d925      	bls.n	8003844 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68d9      	ldr	r1, [r3, #12]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	b29b      	uxth	r3, r3
 8003804:	461a      	mov	r2, r3
 8003806:	4613      	mov	r3, r2
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	4413      	add	r3, r2
 800380c:	3b1e      	subs	r3, #30
 800380e:	2207      	movs	r2, #7
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	43da      	mvns	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	400a      	ands	r2, r1
 800381c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68d9      	ldr	r1, [r3, #12]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	b29b      	uxth	r3, r3
 800382e:	4618      	mov	r0, r3
 8003830:	4603      	mov	r3, r0
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	4403      	add	r3, r0
 8003836:	3b1e      	subs	r3, #30
 8003838:	409a      	lsls	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	430a      	orrs	r2, r1
 8003840:	60da      	str	r2, [r3, #12]
 8003842:	e022      	b.n	800388a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6919      	ldr	r1, [r3, #16]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	b29b      	uxth	r3, r3
 8003850:	461a      	mov	r2, r3
 8003852:	4613      	mov	r3, r2
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	4413      	add	r3, r2
 8003858:	2207      	movs	r2, #7
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	43da      	mvns	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	400a      	ands	r2, r1
 8003866:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6919      	ldr	r1, [r3, #16]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	689a      	ldr	r2, [r3, #8]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	b29b      	uxth	r3, r3
 8003878:	4618      	mov	r0, r3
 800387a:	4603      	mov	r3, r0
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	4403      	add	r3, r0
 8003880:	409a      	lsls	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b06      	cmp	r3, #6
 8003890:	d824      	bhi.n	80038dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	4613      	mov	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4413      	add	r3, r2
 80038a2:	3b05      	subs	r3, #5
 80038a4:	221f      	movs	r2, #31
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
 80038aa:	43da      	mvns	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	400a      	ands	r2, r1
 80038b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	b29b      	uxth	r3, r3
 80038c0:	4618      	mov	r0, r3
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	4613      	mov	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4413      	add	r3, r2
 80038cc:	3b05      	subs	r3, #5
 80038ce:	fa00 f203 	lsl.w	r2, r0, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80038da:	e04c      	b.n	8003976 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	2b0c      	cmp	r3, #12
 80038e2:	d824      	bhi.n	800392e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	4613      	mov	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	3b23      	subs	r3, #35	@ 0x23
 80038f6:	221f      	movs	r2, #31
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	43da      	mvns	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	400a      	ands	r2, r1
 8003904:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	b29b      	uxth	r3, r3
 8003912:	4618      	mov	r0, r3
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	4613      	mov	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	3b23      	subs	r3, #35	@ 0x23
 8003920:	fa00 f203 	lsl.w	r2, r0, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	631a      	str	r2, [r3, #48]	@ 0x30
 800392c:	e023      	b.n	8003976 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	4613      	mov	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	3b41      	subs	r3, #65	@ 0x41
 8003940:	221f      	movs	r2, #31
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	43da      	mvns	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	400a      	ands	r2, r1
 800394e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	b29b      	uxth	r3, r3
 800395c:	4618      	mov	r0, r3
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	4613      	mov	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4413      	add	r3, r2
 8003968:	3b41      	subs	r3, #65	@ 0x41
 800396a:	fa00 f203 	lsl.w	r2, r0, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003976:	4b22      	ldr	r3, [pc, #136]	@ (8003a00 <HAL_ADC_ConfigChannel+0x234>)
 8003978:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a21      	ldr	r2, [pc, #132]	@ (8003a04 <HAL_ADC_ConfigChannel+0x238>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d109      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x1cc>
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b12      	cmp	r3, #18
 800398a:	d105      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a19      	ldr	r2, [pc, #100]	@ (8003a04 <HAL_ADC_ConfigChannel+0x238>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d123      	bne.n	80039ea <HAL_ADC_ConfigChannel+0x21e>
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b10      	cmp	r3, #16
 80039a8:	d003      	beq.n	80039b2 <HAL_ADC_ConfigChannel+0x1e6>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2b11      	cmp	r3, #17
 80039b0:	d11b      	bne.n	80039ea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2b10      	cmp	r3, #16
 80039c4:	d111      	bne.n	80039ea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80039c6:	4b10      	ldr	r3, [pc, #64]	@ (8003a08 <HAL_ADC_ConfigChannel+0x23c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a10      	ldr	r2, [pc, #64]	@ (8003a0c <HAL_ADC_ConfigChannel+0x240>)
 80039cc:	fba2 2303 	umull	r2, r3, r2, r3
 80039d0:	0c9a      	lsrs	r2, r3, #18
 80039d2:	4613      	mov	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4413      	add	r3, r2
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80039dc:	e002      	b.n	80039e4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	3b01      	subs	r3, #1
 80039e2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1f9      	bne.n	80039de <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3714      	adds	r7, #20
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	40012300 	.word	0x40012300
 8003a04:	40012000 	.word	0x40012000
 8003a08:	20000024 	.word	0x20000024
 8003a0c:	431bde83 	.word	0x431bde83

08003a10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a18:	4b79      	ldr	r3, [pc, #484]	@ (8003c00 <ADC_Init+0x1f0>)
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	431a      	orrs	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6859      	ldr	r1, [r3, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	021a      	lsls	r2, r3, #8
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003a68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6859      	ldr	r1, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689a      	ldr	r2, [r3, #8]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6899      	ldr	r1, [r3, #8]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68da      	ldr	r2, [r3, #12]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa2:	4a58      	ldr	r2, [pc, #352]	@ (8003c04 <ADC_Init+0x1f4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d022      	beq.n	8003aee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689a      	ldr	r2, [r3, #8]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003ab6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6899      	ldr	r1, [r3, #8]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003ad8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6899      	ldr	r1, [r3, #8]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	609a      	str	r2, [r3, #8]
 8003aec:	e00f      	b.n	8003b0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003afc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003b0c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0202 	bic.w	r2, r2, #2
 8003b1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6899      	ldr	r1, [r3, #8]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	7e1b      	ldrb	r3, [r3, #24]
 8003b28:	005a      	lsls	r2, r3, #1
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d01b      	beq.n	8003b74 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b4a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003b5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6859      	ldr	r1, [r3, #4]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b66:	3b01      	subs	r3, #1
 8003b68:	035a      	lsls	r2, r3, #13
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	605a      	str	r2, [r3, #4]
 8003b72:	e007      	b.n	8003b84 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b82:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003b92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	051a      	lsls	r2, r3, #20
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003bb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6899      	ldr	r1, [r3, #8]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003bc6:	025a      	lsls	r2, r3, #9
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6899      	ldr	r1, [r3, #8]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	029a      	lsls	r2, r3, #10
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	609a      	str	r2, [r3, #8]
}
 8003bf4:	bf00      	nop
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	40012300 	.word	0x40012300
 8003c04:	0f000001 	.word	0x0f000001

08003c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f003 0307 	and.w	r3, r3, #7
 8003c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c18:	4b0c      	ldr	r3, [pc, #48]	@ (8003c4c <__NVIC_SetPriorityGrouping+0x44>)
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c24:	4013      	ands	r3, r2
 8003c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c3a:	4a04      	ldr	r2, [pc, #16]	@ (8003c4c <__NVIC_SetPriorityGrouping+0x44>)
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	60d3      	str	r3, [r2, #12]
}
 8003c40:	bf00      	nop
 8003c42:	3714      	adds	r7, #20
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	e000ed00 	.word	0xe000ed00

08003c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c54:	4b04      	ldr	r3, [pc, #16]	@ (8003c68 <__NVIC_GetPriorityGrouping+0x18>)
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	0a1b      	lsrs	r3, r3, #8
 8003c5a:	f003 0307 	and.w	r3, r3, #7
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr
 8003c68:	e000ed00 	.word	0xe000ed00

08003c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	4603      	mov	r3, r0
 8003c74:	6039      	str	r1, [r7, #0]
 8003c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	db0a      	blt.n	8003c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	b2da      	uxtb	r2, r3
 8003c84:	490c      	ldr	r1, [pc, #48]	@ (8003cb8 <__NVIC_SetPriority+0x4c>)
 8003c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8a:	0112      	lsls	r2, r2, #4
 8003c8c:	b2d2      	uxtb	r2, r2
 8003c8e:	440b      	add	r3, r1
 8003c90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c94:	e00a      	b.n	8003cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	4908      	ldr	r1, [pc, #32]	@ (8003cbc <__NVIC_SetPriority+0x50>)
 8003c9c:	79fb      	ldrb	r3, [r7, #7]
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	3b04      	subs	r3, #4
 8003ca4:	0112      	lsls	r2, r2, #4
 8003ca6:	b2d2      	uxtb	r2, r2
 8003ca8:	440b      	add	r3, r1
 8003caa:	761a      	strb	r2, [r3, #24]
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	e000e100 	.word	0xe000e100
 8003cbc:	e000ed00 	.word	0xe000ed00

08003cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b089      	sub	sp, #36	@ 0x24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	f1c3 0307 	rsb	r3, r3, #7
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	bf28      	it	cs
 8003cde:	2304      	movcs	r3, #4
 8003ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	2b06      	cmp	r3, #6
 8003ce8:	d902      	bls.n	8003cf0 <NVIC_EncodePriority+0x30>
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	3b03      	subs	r3, #3
 8003cee:	e000      	b.n	8003cf2 <NVIC_EncodePriority+0x32>
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfe:	43da      	mvns	r2, r3
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	401a      	ands	r2, r3
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d08:	f04f 31ff 	mov.w	r1, #4294967295
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d12:	43d9      	mvns	r1, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d18:	4313      	orrs	r3, r2
         );
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3724      	adds	r7, #36	@ 0x24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
	...

08003d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3b01      	subs	r3, #1
 8003d34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d38:	d301      	bcc.n	8003d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e00f      	b.n	8003d5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8003d68 <SysTick_Config+0x40>)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	3b01      	subs	r3, #1
 8003d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d46:	210f      	movs	r1, #15
 8003d48:	f04f 30ff 	mov.w	r0, #4294967295
 8003d4c:	f7ff ff8e 	bl	8003c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d50:	4b05      	ldr	r3, [pc, #20]	@ (8003d68 <SysTick_Config+0x40>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d56:	4b04      	ldr	r3, [pc, #16]	@ (8003d68 <SysTick_Config+0x40>)
 8003d58:	2207      	movs	r2, #7
 8003d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	e000e010 	.word	0xe000e010

08003d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7ff ff47 	bl	8003c08 <__NVIC_SetPriorityGrouping>
}
 8003d7a:	bf00      	nop
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b086      	sub	sp, #24
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	4603      	mov	r3, r0
 8003d8a:	60b9      	str	r1, [r7, #8]
 8003d8c:	607a      	str	r2, [r7, #4]
 8003d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d94:	f7ff ff5c 	bl	8003c50 <__NVIC_GetPriorityGrouping>
 8003d98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	68b9      	ldr	r1, [r7, #8]
 8003d9e:	6978      	ldr	r0, [r7, #20]
 8003da0:	f7ff ff8e 	bl	8003cc0 <NVIC_EncodePriority>
 8003da4:	4602      	mov	r2, r0
 8003da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003daa:	4611      	mov	r1, r2
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7ff ff5d 	bl	8003c6c <__NVIC_SetPriority>
}
 8003db2:	bf00      	nop
 8003db4:	3718      	adds	r7, #24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b082      	sub	sp, #8
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7ff ffb0 	bl	8003d28 <SysTick_Config>
 8003dc8:	4603      	mov	r3, r0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
	...

08003dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b089      	sub	sp, #36	@ 0x24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003dde:	2300      	movs	r3, #0
 8003de0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003de2:	2300      	movs	r3, #0
 8003de4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dea:	2300      	movs	r3, #0
 8003dec:	61fb      	str	r3, [r7, #28]
 8003dee:	e16b      	b.n	80040c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003df0:	2201      	movs	r2, #1
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	fa02 f303 	lsl.w	r3, r2, r3
 8003df8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	4013      	ands	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	f040 815a 	bne.w	80040c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d005      	beq.n	8003e26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d130      	bne.n	8003e88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	2203      	movs	r2, #3
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	43db      	mvns	r3, r3
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	fa02 f303 	lsl.w	r3, r2, r3
 8003e64:	43db      	mvns	r3, r3
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	091b      	lsrs	r3, r3, #4
 8003e72:	f003 0201 	and.w	r2, r3, #1
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f003 0303 	and.w	r3, r3, #3
 8003e90:	2b03      	cmp	r3, #3
 8003e92:	d017      	beq.n	8003ec4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	2203      	movs	r2, #3
 8003ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea4:	43db      	mvns	r3, r3
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f003 0303 	and.w	r3, r3, #3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d123      	bne.n	8003f18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	08da      	lsrs	r2, r3, #3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3208      	adds	r2, #8
 8003ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	220f      	movs	r2, #15
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	43db      	mvns	r3, r3
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	691a      	ldr	r2, [r3, #16]
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	f003 0307 	and.w	r3, r3, #7
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	08da      	lsrs	r2, r3, #3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	3208      	adds	r2, #8
 8003f12:	69b9      	ldr	r1, [r7, #24]
 8003f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	2203      	movs	r2, #3
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f003 0203 	and.w	r2, r3, #3
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 80b4 	beq.w	80040c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	4b60      	ldr	r3, [pc, #384]	@ (80040e0 <HAL_GPIO_Init+0x30c>)
 8003f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f62:	4a5f      	ldr	r2, [pc, #380]	@ (80040e0 <HAL_GPIO_Init+0x30c>)
 8003f64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f68:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f6a:	4b5d      	ldr	r3, [pc, #372]	@ (80040e0 <HAL_GPIO_Init+0x30c>)
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f76:	4a5b      	ldr	r2, [pc, #364]	@ (80040e4 <HAL_GPIO_Init+0x310>)
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	089b      	lsrs	r3, r3, #2
 8003f7c:	3302      	adds	r3, #2
 8003f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	f003 0303 	and.w	r3, r3, #3
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	220f      	movs	r2, #15
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	43db      	mvns	r3, r3
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	4013      	ands	r3, r2
 8003f98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a52      	ldr	r2, [pc, #328]	@ (80040e8 <HAL_GPIO_Init+0x314>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d02b      	beq.n	8003ffa <HAL_GPIO_Init+0x226>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a51      	ldr	r2, [pc, #324]	@ (80040ec <HAL_GPIO_Init+0x318>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d025      	beq.n	8003ff6 <HAL_GPIO_Init+0x222>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a50      	ldr	r2, [pc, #320]	@ (80040f0 <HAL_GPIO_Init+0x31c>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d01f      	beq.n	8003ff2 <HAL_GPIO_Init+0x21e>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a4f      	ldr	r2, [pc, #316]	@ (80040f4 <HAL_GPIO_Init+0x320>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d019      	beq.n	8003fee <HAL_GPIO_Init+0x21a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a4e      	ldr	r2, [pc, #312]	@ (80040f8 <HAL_GPIO_Init+0x324>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d013      	beq.n	8003fea <HAL_GPIO_Init+0x216>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a4d      	ldr	r2, [pc, #308]	@ (80040fc <HAL_GPIO_Init+0x328>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d00d      	beq.n	8003fe6 <HAL_GPIO_Init+0x212>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a4c      	ldr	r2, [pc, #304]	@ (8004100 <HAL_GPIO_Init+0x32c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d007      	beq.n	8003fe2 <HAL_GPIO_Init+0x20e>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a4b      	ldr	r2, [pc, #300]	@ (8004104 <HAL_GPIO_Init+0x330>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d101      	bne.n	8003fde <HAL_GPIO_Init+0x20a>
 8003fda:	2307      	movs	r3, #7
 8003fdc:	e00e      	b.n	8003ffc <HAL_GPIO_Init+0x228>
 8003fde:	2308      	movs	r3, #8
 8003fe0:	e00c      	b.n	8003ffc <HAL_GPIO_Init+0x228>
 8003fe2:	2306      	movs	r3, #6
 8003fe4:	e00a      	b.n	8003ffc <HAL_GPIO_Init+0x228>
 8003fe6:	2305      	movs	r3, #5
 8003fe8:	e008      	b.n	8003ffc <HAL_GPIO_Init+0x228>
 8003fea:	2304      	movs	r3, #4
 8003fec:	e006      	b.n	8003ffc <HAL_GPIO_Init+0x228>
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e004      	b.n	8003ffc <HAL_GPIO_Init+0x228>
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	e002      	b.n	8003ffc <HAL_GPIO_Init+0x228>
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e000      	b.n	8003ffc <HAL_GPIO_Init+0x228>
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	69fa      	ldr	r2, [r7, #28]
 8003ffe:	f002 0203 	and.w	r2, r2, #3
 8004002:	0092      	lsls	r2, r2, #2
 8004004:	4093      	lsls	r3, r2
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	4313      	orrs	r3, r2
 800400a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800400c:	4935      	ldr	r1, [pc, #212]	@ (80040e4 <HAL_GPIO_Init+0x310>)
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	089b      	lsrs	r3, r3, #2
 8004012:	3302      	adds	r3, #2
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800401a:	4b3b      	ldr	r3, [pc, #236]	@ (8004108 <HAL_GPIO_Init+0x334>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	43db      	mvns	r3, r3
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	4013      	ands	r3, r2
 8004028:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d003      	beq.n	800403e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	4313      	orrs	r3, r2
 800403c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800403e:	4a32      	ldr	r2, [pc, #200]	@ (8004108 <HAL_GPIO_Init+0x334>)
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004044:	4b30      	ldr	r3, [pc, #192]	@ (8004108 <HAL_GPIO_Init+0x334>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	43db      	mvns	r3, r3
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	4013      	ands	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d003      	beq.n	8004068 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	4313      	orrs	r3, r2
 8004066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004068:	4a27      	ldr	r2, [pc, #156]	@ (8004108 <HAL_GPIO_Init+0x334>)
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800406e:	4b26      	ldr	r3, [pc, #152]	@ (8004108 <HAL_GPIO_Init+0x334>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	43db      	mvns	r3, r3
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	4013      	ands	r3, r2
 800407c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	4313      	orrs	r3, r2
 8004090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004092:	4a1d      	ldr	r2, [pc, #116]	@ (8004108 <HAL_GPIO_Init+0x334>)
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004098:	4b1b      	ldr	r3, [pc, #108]	@ (8004108 <HAL_GPIO_Init+0x334>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	43db      	mvns	r3, r3
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	4013      	ands	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d003      	beq.n	80040bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040bc:	4a12      	ldr	r2, [pc, #72]	@ (8004108 <HAL_GPIO_Init+0x334>)
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	3301      	adds	r3, #1
 80040c6:	61fb      	str	r3, [r7, #28]
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	2b0f      	cmp	r3, #15
 80040cc:	f67f ae90 	bls.w	8003df0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040d0:	bf00      	nop
 80040d2:	bf00      	nop
 80040d4:	3724      	adds	r7, #36	@ 0x24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	40023800 	.word	0x40023800
 80040e4:	40013800 	.word	0x40013800
 80040e8:	40020000 	.word	0x40020000
 80040ec:	40020400 	.word	0x40020400
 80040f0:	40020800 	.word	0x40020800
 80040f4:	40020c00 	.word	0x40020c00
 80040f8:	40021000 	.word	0x40021000
 80040fc:	40021400 	.word	0x40021400
 8004100:	40021800 	.word	0x40021800
 8004104:	40021c00 	.word	0x40021c00
 8004108:	40013c00 	.word	0x40013c00

0800410c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	460b      	mov	r3, r1
 8004116:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691a      	ldr	r2, [r3, #16]
 800411c:	887b      	ldrh	r3, [r7, #2]
 800411e:	4013      	ands	r3, r2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d002      	beq.n	800412a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004124:	2301      	movs	r3, #1
 8004126:	73fb      	strb	r3, [r7, #15]
 8004128:	e001      	b.n	800412e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800412a:	2300      	movs	r3, #0
 800412c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800412e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	460b      	mov	r3, r1
 8004146:	807b      	strh	r3, [r7, #2]
 8004148:	4613      	mov	r3, r2
 800414a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800414c:	787b      	ldrb	r3, [r7, #1]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004152:	887a      	ldrh	r2, [r7, #2]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004158:	e003      	b.n	8004162 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800415a:	887b      	ldrh	r3, [r7, #2]
 800415c:	041a      	lsls	r2, r3, #16
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	619a      	str	r2, [r3, #24]
}
 8004162:	bf00      	nop
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
	...

08004170 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e12b      	b.n	80043da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d106      	bne.n	800419c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7fe fe24 	bl	8002de4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2224      	movs	r2, #36	@ 0x24
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 0201 	bic.w	r2, r2, #1
 80041b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80041c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041d4:	f001 fdc6 	bl	8005d64 <HAL_RCC_GetPCLK1Freq>
 80041d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	4a81      	ldr	r2, [pc, #516]	@ (80043e4 <HAL_I2C_Init+0x274>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d807      	bhi.n	80041f4 <HAL_I2C_Init+0x84>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4a80      	ldr	r2, [pc, #512]	@ (80043e8 <HAL_I2C_Init+0x278>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	bf94      	ite	ls
 80041ec:	2301      	movls	r3, #1
 80041ee:	2300      	movhi	r3, #0
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	e006      	b.n	8004202 <HAL_I2C_Init+0x92>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	4a7d      	ldr	r2, [pc, #500]	@ (80043ec <HAL_I2C_Init+0x27c>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	bf94      	ite	ls
 80041fc:	2301      	movls	r3, #1
 80041fe:	2300      	movhi	r3, #0
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e0e7      	b.n	80043da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	4a78      	ldr	r2, [pc, #480]	@ (80043f0 <HAL_I2C_Init+0x280>)
 800420e:	fba2 2303 	umull	r2, r3, r2, r3
 8004212:	0c9b      	lsrs	r3, r3, #18
 8004214:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	430a      	orrs	r2, r1
 8004228:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	4a6a      	ldr	r2, [pc, #424]	@ (80043e4 <HAL_I2C_Init+0x274>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d802      	bhi.n	8004244 <HAL_I2C_Init+0xd4>
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	3301      	adds	r3, #1
 8004242:	e009      	b.n	8004258 <HAL_I2C_Init+0xe8>
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800424a:	fb02 f303 	mul.w	r3, r2, r3
 800424e:	4a69      	ldr	r2, [pc, #420]	@ (80043f4 <HAL_I2C_Init+0x284>)
 8004250:	fba2 2303 	umull	r2, r3, r2, r3
 8004254:	099b      	lsrs	r3, r3, #6
 8004256:	3301      	adds	r3, #1
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6812      	ldr	r2, [r2, #0]
 800425c:	430b      	orrs	r3, r1
 800425e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800426a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	495c      	ldr	r1, [pc, #368]	@ (80043e4 <HAL_I2C_Init+0x274>)
 8004274:	428b      	cmp	r3, r1
 8004276:	d819      	bhi.n	80042ac <HAL_I2C_Init+0x13c>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	1e59      	subs	r1, r3, #1
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	fbb1 f3f3 	udiv	r3, r1, r3
 8004286:	1c59      	adds	r1, r3, #1
 8004288:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800428c:	400b      	ands	r3, r1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00a      	beq.n	80042a8 <HAL_I2C_Init+0x138>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	1e59      	subs	r1, r3, #1
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	fbb1 f3f3 	udiv	r3, r1, r3
 80042a0:	3301      	adds	r3, #1
 80042a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042a6:	e051      	b.n	800434c <HAL_I2C_Init+0x1dc>
 80042a8:	2304      	movs	r3, #4
 80042aa:	e04f      	b.n	800434c <HAL_I2C_Init+0x1dc>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d111      	bne.n	80042d8 <HAL_I2C_Init+0x168>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	1e58      	subs	r0, r3, #1
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6859      	ldr	r1, [r3, #4]
 80042bc:	460b      	mov	r3, r1
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	440b      	add	r3, r1
 80042c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80042c6:	3301      	adds	r3, #1
 80042c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	bf0c      	ite	eq
 80042d0:	2301      	moveq	r3, #1
 80042d2:	2300      	movne	r3, #0
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	e012      	b.n	80042fe <HAL_I2C_Init+0x18e>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	1e58      	subs	r0, r3, #1
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6859      	ldr	r1, [r3, #4]
 80042e0:	460b      	mov	r3, r1
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	440b      	add	r3, r1
 80042e6:	0099      	lsls	r1, r3, #2
 80042e8:	440b      	add	r3, r1
 80042ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80042ee:	3301      	adds	r3, #1
 80042f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	bf0c      	ite	eq
 80042f8:	2301      	moveq	r3, #1
 80042fa:	2300      	movne	r3, #0
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <HAL_I2C_Init+0x196>
 8004302:	2301      	movs	r3, #1
 8004304:	e022      	b.n	800434c <HAL_I2C_Init+0x1dc>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10e      	bne.n	800432c <HAL_I2C_Init+0x1bc>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	1e58      	subs	r0, r3, #1
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6859      	ldr	r1, [r3, #4]
 8004316:	460b      	mov	r3, r1
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	440b      	add	r3, r1
 800431c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004320:	3301      	adds	r3, #1
 8004322:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004326:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800432a:	e00f      	b.n	800434c <HAL_I2C_Init+0x1dc>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	1e58      	subs	r0, r3, #1
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6859      	ldr	r1, [r3, #4]
 8004334:	460b      	mov	r3, r1
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	440b      	add	r3, r1
 800433a:	0099      	lsls	r1, r3, #2
 800433c:	440b      	add	r3, r1
 800433e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004342:	3301      	adds	r3, #1
 8004344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004348:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	6809      	ldr	r1, [r1, #0]
 8004350:	4313      	orrs	r3, r2
 8004352:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	69da      	ldr	r2, [r3, #28]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	430a      	orrs	r2, r1
 800436e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800437a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6911      	ldr	r1, [r2, #16]
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	68d2      	ldr	r2, [r2, #12]
 8004386:	4311      	orrs	r1, r2
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6812      	ldr	r2, [r2, #0]
 800438c:	430b      	orrs	r3, r1
 800438e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	695a      	ldr	r2, [r3, #20]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	430a      	orrs	r2, r1
 80043aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0201 	orr.w	r2, r2, #1
 80043ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2220      	movs	r2, #32
 80043c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	000186a0 	.word	0x000186a0
 80043e8:	001e847f 	.word	0x001e847f
 80043ec:	003d08ff 	.word	0x003d08ff
 80043f0:	431bde83 	.word	0x431bde83
 80043f4:	10624dd3 	.word	0x10624dd3

080043f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af02      	add	r7, sp, #8
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	607a      	str	r2, [r7, #4]
 8004402:	461a      	mov	r2, r3
 8004404:	460b      	mov	r3, r1
 8004406:	817b      	strh	r3, [r7, #10]
 8004408:	4613      	mov	r3, r2
 800440a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800440c:	f7fe ffcc 	bl	80033a8 <HAL_GetTick>
 8004410:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b20      	cmp	r3, #32
 800441c:	f040 80e0 	bne.w	80045e0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	2319      	movs	r3, #25
 8004426:	2201      	movs	r2, #1
 8004428:	4970      	ldr	r1, [pc, #448]	@ (80045ec <HAL_I2C_Master_Transmit+0x1f4>)
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 fdf4 	bl	8005018 <I2C_WaitOnFlagUntilTimeout>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004436:	2302      	movs	r3, #2
 8004438:	e0d3      	b.n	80045e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004440:	2b01      	cmp	r3, #1
 8004442:	d101      	bne.n	8004448 <HAL_I2C_Master_Transmit+0x50>
 8004444:	2302      	movs	r3, #2
 8004446:	e0cc      	b.n	80045e2 <HAL_I2C_Master_Transmit+0x1ea>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b01      	cmp	r3, #1
 800445c:	d007      	beq.n	800446e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f042 0201 	orr.w	r2, r2, #1
 800446c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800447c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2221      	movs	r2, #33	@ 0x21
 8004482:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2210      	movs	r2, #16
 800448a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	893a      	ldrh	r2, [r7, #8]
 800449e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	4a50      	ldr	r2, [pc, #320]	@ (80045f0 <HAL_I2C_Master_Transmit+0x1f8>)
 80044ae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80044b0:	8979      	ldrh	r1, [r7, #10]
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	6a3a      	ldr	r2, [r7, #32]
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 fbc8 	bl	8004c4c <I2C_MasterRequestWrite>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e08d      	b.n	80045e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044c6:	2300      	movs	r3, #0
 80044c8:	613b      	str	r3, [r7, #16]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	613b      	str	r3, [r7, #16]
 80044da:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80044dc:	e066      	b.n	80045ac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	6a39      	ldr	r1, [r7, #32]
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f000 feb2 	bl	800524c <I2C_WaitOnTXEFlagUntilTimeout>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00d      	beq.n	800450a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f2:	2b04      	cmp	r3, #4
 80044f4:	d107      	bne.n	8004506 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004504:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e06b      	b.n	80045e2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450e:	781a      	ldrb	r2, [r3, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451a:	1c5a      	adds	r2, r3, #1
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004524:	b29b      	uxth	r3, r3
 8004526:	3b01      	subs	r3, #1
 8004528:	b29a      	uxth	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004532:	3b01      	subs	r3, #1
 8004534:	b29a      	uxth	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b04      	cmp	r3, #4
 8004546:	d11b      	bne.n	8004580 <HAL_I2C_Master_Transmit+0x188>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800454c:	2b00      	cmp	r3, #0
 800454e:	d017      	beq.n	8004580 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004554:	781a      	ldrb	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004560:	1c5a      	adds	r2, r3, #1
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800456a:	b29b      	uxth	r3, r3
 800456c:	3b01      	subs	r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004578:	3b01      	subs	r3, #1
 800457a:	b29a      	uxth	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	6a39      	ldr	r1, [r7, #32]
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f000 fea9 	bl	80052dc <I2C_WaitOnBTFFlagUntilTimeout>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00d      	beq.n	80045ac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004594:	2b04      	cmp	r3, #4
 8004596:	d107      	bne.n	80045a8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045a6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e01a      	b.n	80045e2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d194      	bne.n	80044de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2220      	movs	r2, #32
 80045c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80045dc:	2300      	movs	r3, #0
 80045de:	e000      	b.n	80045e2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80045e0:	2302      	movs	r3, #2
  }
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	00100002 	.word	0x00100002
 80045f0:	ffff0000 	.word	0xffff0000

080045f4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b08c      	sub	sp, #48	@ 0x30
 80045f8:	af02      	add	r7, sp, #8
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	607a      	str	r2, [r7, #4]
 80045fe:	461a      	mov	r2, r3
 8004600:	460b      	mov	r3, r1
 8004602:	817b      	strh	r3, [r7, #10]
 8004604:	4613      	mov	r3, r2
 8004606:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004608:	f7fe fece 	bl	80033a8 <HAL_GetTick>
 800460c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b20      	cmp	r3, #32
 8004618:	f040 8217 	bne.w	8004a4a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800461c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	2319      	movs	r3, #25
 8004622:	2201      	movs	r2, #1
 8004624:	497c      	ldr	r1, [pc, #496]	@ (8004818 <HAL_I2C_Master_Receive+0x224>)
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 fcf6 	bl	8005018 <I2C_WaitOnFlagUntilTimeout>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004632:	2302      	movs	r3, #2
 8004634:	e20a      	b.n	8004a4c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800463c:	2b01      	cmp	r3, #1
 800463e:	d101      	bne.n	8004644 <HAL_I2C_Master_Receive+0x50>
 8004640:	2302      	movs	r3, #2
 8004642:	e203      	b.n	8004a4c <HAL_I2C_Master_Receive+0x458>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b01      	cmp	r3, #1
 8004658:	d007      	beq.n	800466a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f042 0201 	orr.w	r2, r2, #1
 8004668:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004678:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2222      	movs	r2, #34	@ 0x22
 800467e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2210      	movs	r2, #16
 8004686:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	893a      	ldrh	r2, [r7, #8]
 800469a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	4a5c      	ldr	r2, [pc, #368]	@ (800481c <HAL_I2C_Master_Receive+0x228>)
 80046aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80046ac:	8979      	ldrh	r1, [r7, #10]
 80046ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 fb4c 	bl	8004d50 <I2C_MasterRequestRead>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e1c4      	b.n	8004a4c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d113      	bne.n	80046f2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ca:	2300      	movs	r3, #0
 80046cc:	623b      	str	r3, [r7, #32]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	623b      	str	r3, [r7, #32]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	623b      	str	r3, [r7, #32]
 80046de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	e198      	b.n	8004a24 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d11b      	bne.n	8004732 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004708:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800470a:	2300      	movs	r3, #0
 800470c:	61fb      	str	r3, [r7, #28]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	61fb      	str	r3, [r7, #28]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	61fb      	str	r3, [r7, #28]
 800471e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	e178      	b.n	8004a24 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004736:	2b02      	cmp	r3, #2
 8004738:	d11b      	bne.n	8004772 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004748:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004758:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800475a:	2300      	movs	r3, #0
 800475c:	61bb      	str	r3, [r7, #24]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	61bb      	str	r3, [r7, #24]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	61bb      	str	r3, [r7, #24]
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	e158      	b.n	8004a24 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004780:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004782:	2300      	movs	r3, #0
 8004784:	617b      	str	r3, [r7, #20]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	617b      	str	r3, [r7, #20]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	617b      	str	r3, [r7, #20]
 8004796:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004798:	e144      	b.n	8004a24 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800479e:	2b03      	cmp	r3, #3
 80047a0:	f200 80f1 	bhi.w	8004986 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d123      	bne.n	80047f4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047ae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 fddb 	bl	800536c <I2C_WaitOnRXNEFlagUntilTimeout>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e145      	b.n	8004a4c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	691a      	ldr	r2, [r3, #16]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ca:	b2d2      	uxtb	r2, r2
 80047cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d2:	1c5a      	adds	r2, r3, #1
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047dc:	3b01      	subs	r3, #1
 80047de:	b29a      	uxth	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	3b01      	subs	r3, #1
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80047f2:	e117      	b.n	8004a24 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d14e      	bne.n	800489a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004802:	2200      	movs	r2, #0
 8004804:	4906      	ldr	r1, [pc, #24]	@ (8004820 <HAL_I2C_Master_Receive+0x22c>)
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f000 fc06 	bl	8005018 <I2C_WaitOnFlagUntilTimeout>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d008      	beq.n	8004824 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e11a      	b.n	8004a4c <HAL_I2C_Master_Receive+0x458>
 8004816:	bf00      	nop
 8004818:	00100002 	.word	0x00100002
 800481c:	ffff0000 	.word	0xffff0000
 8004820:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004832:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	691a      	ldr	r2, [r3, #16]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800483e:	b2d2      	uxtb	r2, r2
 8004840:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004846:	1c5a      	adds	r2, r3, #1
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004850:	3b01      	subs	r3, #1
 8004852:	b29a      	uxth	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800485c:	b29b      	uxth	r3, r3
 800485e:	3b01      	subs	r3, #1
 8004860:	b29a      	uxth	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	691a      	ldr	r2, [r3, #16]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004870:	b2d2      	uxtb	r2, r2
 8004872:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004878:	1c5a      	adds	r2, r3, #1
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004882:	3b01      	subs	r3, #1
 8004884:	b29a      	uxth	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800488e:	b29b      	uxth	r3, r3
 8004890:	3b01      	subs	r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004898:	e0c4      	b.n	8004a24 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800489a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a0:	2200      	movs	r2, #0
 80048a2:	496c      	ldr	r1, [pc, #432]	@ (8004a54 <HAL_I2C_Master_Receive+0x460>)
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f000 fbb7 	bl	8005018 <I2C_WaitOnFlagUntilTimeout>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d001      	beq.n	80048b4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e0cb      	b.n	8004a4c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	691a      	ldr	r2, [r3, #16]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ce:	b2d2      	uxtb	r2, r2
 80048d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d6:	1c5a      	adds	r2, r3, #1
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048e0:	3b01      	subs	r3, #1
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	3b01      	subs	r3, #1
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048fc:	2200      	movs	r2, #0
 80048fe:	4955      	ldr	r1, [pc, #340]	@ (8004a54 <HAL_I2C_Master_Receive+0x460>)
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f000 fb89 	bl	8005018 <I2C_WaitOnFlagUntilTimeout>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d001      	beq.n	8004910 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e09d      	b.n	8004a4c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800491e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	691a      	ldr	r2, [r3, #16]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492a:	b2d2      	uxtb	r2, r2
 800492c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004932:	1c5a      	adds	r2, r3, #1
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800493c:	3b01      	subs	r3, #1
 800493e:	b29a      	uxth	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004948:	b29b      	uxth	r3, r3
 800494a:	3b01      	subs	r3, #1
 800494c:	b29a      	uxth	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	691a      	ldr	r2, [r3, #16]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495c:	b2d2      	uxtb	r2, r2
 800495e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004964:	1c5a      	adds	r2, r3, #1
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800496e:	3b01      	subs	r3, #1
 8004970:	b29a      	uxth	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800497a:	b29b      	uxth	r3, r3
 800497c:	3b01      	subs	r3, #1
 800497e:	b29a      	uxth	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004984:	e04e      	b.n	8004a24 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004986:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004988:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f000 fcee 	bl	800536c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e058      	b.n	8004a4c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	691a      	ldr	r2, [r3, #16]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a4:	b2d2      	uxtb	r2, r2
 80049a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ac:	1c5a      	adds	r2, r3, #1
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049b6:	3b01      	subs	r3, #1
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	3b01      	subs	r3, #1
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	f003 0304 	and.w	r3, r3, #4
 80049d6:	2b04      	cmp	r3, #4
 80049d8:	d124      	bne.n	8004a24 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049de:	2b03      	cmp	r3, #3
 80049e0:	d107      	bne.n	80049f2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049f0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	691a      	ldr	r2, [r3, #16]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fc:	b2d2      	uxtb	r2, r2
 80049fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a04:	1c5a      	adds	r2, r3, #1
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f47f aeb6 	bne.w	800479a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2220      	movs	r2, #32
 8004a32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004a46:	2300      	movs	r3, #0
 8004a48:	e000      	b.n	8004a4c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004a4a:	2302      	movs	r3, #2
  }
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3728      	adds	r7, #40	@ 0x28
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	00010004 	.word	0x00010004

08004a58 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b088      	sub	sp, #32
 8004a5c:	af02      	add	r7, sp, #8
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	4608      	mov	r0, r1
 8004a62:	4611      	mov	r1, r2
 8004a64:	461a      	mov	r2, r3
 8004a66:	4603      	mov	r3, r0
 8004a68:	817b      	strh	r3, [r7, #10]
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	813b      	strh	r3, [r7, #8]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a72:	f7fe fc99 	bl	80033a8 <HAL_GetTick>
 8004a76:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b20      	cmp	r3, #32
 8004a82:	f040 80d9 	bne.w	8004c38 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	2319      	movs	r3, #25
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	496d      	ldr	r1, [pc, #436]	@ (8004c44 <HAL_I2C_Mem_Write+0x1ec>)
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 fac1 	bl	8005018 <I2C_WaitOnFlagUntilTimeout>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	e0cc      	b.n	8004c3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d101      	bne.n	8004aae <HAL_I2C_Mem_Write+0x56>
 8004aaa:	2302      	movs	r3, #2
 8004aac:	e0c5      	b.n	8004c3a <HAL_I2C_Mem_Write+0x1e2>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d007      	beq.n	8004ad4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f042 0201 	orr.w	r2, r2, #1
 8004ad2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ae2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2221      	movs	r2, #33	@ 0x21
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2240      	movs	r2, #64	@ 0x40
 8004af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6a3a      	ldr	r2, [r7, #32]
 8004afe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004b04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4a4d      	ldr	r2, [pc, #308]	@ (8004c48 <HAL_I2C_Mem_Write+0x1f0>)
 8004b14:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b16:	88f8      	ldrh	r0, [r7, #6]
 8004b18:	893a      	ldrh	r2, [r7, #8]
 8004b1a:	8979      	ldrh	r1, [r7, #10]
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	9301      	str	r3, [sp, #4]
 8004b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b22:	9300      	str	r3, [sp, #0]
 8004b24:	4603      	mov	r3, r0
 8004b26:	68f8      	ldr	r0, [r7, #12]
 8004b28:	f000 f9e0 	bl	8004eec <I2C_RequestMemoryWrite>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d052      	beq.n	8004bd8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e081      	b.n	8004c3a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 fb86 	bl	800524c <I2C_WaitOnTXEFlagUntilTimeout>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00d      	beq.n	8004b62 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d107      	bne.n	8004b5e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e06b      	b.n	8004c3a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b66:	781a      	ldrb	r2, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b72:	1c5a      	adds	r2, r3, #1
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b04      	cmp	r3, #4
 8004b9e:	d11b      	bne.n	8004bd8 <HAL_I2C_Mem_Write+0x180>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d017      	beq.n	8004bd8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bac:	781a      	ldrb	r2, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb8:	1c5a      	adds	r2, r3, #1
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1aa      	bne.n	8004b36 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 fb79 	bl	80052dc <I2C_WaitOnBTFFlagUntilTimeout>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00d      	beq.n	8004c0c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf4:	2b04      	cmp	r3, #4
 8004bf6:	d107      	bne.n	8004c08 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c06:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e016      	b.n	8004c3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004c34:	2300      	movs	r3, #0
 8004c36:	e000      	b.n	8004c3a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004c38:	2302      	movs	r3, #2
  }
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3718      	adds	r7, #24
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	00100002 	.word	0x00100002
 8004c48:	ffff0000 	.word	0xffff0000

08004c4c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b088      	sub	sp, #32
 8004c50:	af02      	add	r7, sp, #8
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	607a      	str	r2, [r7, #4]
 8004c56:	603b      	str	r3, [r7, #0]
 8004c58:	460b      	mov	r3, r1
 8004c5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c60:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2b08      	cmp	r3, #8
 8004c66:	d006      	beq.n	8004c76 <I2C_MasterRequestWrite+0x2a>
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d003      	beq.n	8004c76 <I2C_MasterRequestWrite+0x2a>
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c74:	d108      	bne.n	8004c88 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c84:	601a      	str	r2, [r3, #0]
 8004c86:	e00b      	b.n	8004ca0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c8c:	2b12      	cmp	r3, #18
 8004c8e:	d107      	bne.n	8004ca0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	f000 f9b3 	bl	8005018 <I2C_WaitOnFlagUntilTimeout>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00d      	beq.n	8004cd4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cc6:	d103      	bne.n	8004cd0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e035      	b.n	8004d40 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cdc:	d108      	bne.n	8004cf0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004cde:	897b      	ldrh	r3, [r7, #10]
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004cec:	611a      	str	r2, [r3, #16]
 8004cee:	e01b      	b.n	8004d28 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004cf0:	897b      	ldrh	r3, [r7, #10]
 8004cf2:	11db      	asrs	r3, r3, #7
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	f003 0306 	and.w	r3, r3, #6
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	f063 030f 	orn	r3, r3, #15
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	490e      	ldr	r1, [pc, #56]	@ (8004d48 <I2C_MasterRequestWrite+0xfc>)
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f000 f9fc 	bl	800510c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e010      	b.n	8004d40 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004d1e:	897b      	ldrh	r3, [r7, #10]
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	4907      	ldr	r1, [pc, #28]	@ (8004d4c <I2C_MasterRequestWrite+0x100>)
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f000 f9ec 	bl	800510c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e000      	b.n	8004d40 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3718      	adds	r7, #24
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	00010008 	.word	0x00010008
 8004d4c:	00010002 	.word	0x00010002

08004d50 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b088      	sub	sp, #32
 8004d54:	af02      	add	r7, sp, #8
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	607a      	str	r2, [r7, #4]
 8004d5a:	603b      	str	r3, [r7, #0]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d64:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004d74:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d006      	beq.n	8004d8a <I2C_MasterRequestRead+0x3a>
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d003      	beq.n	8004d8a <I2C_MasterRequestRead+0x3a>
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004d88:	d108      	bne.n	8004d9c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d98:	601a      	str	r2, [r3, #0]
 8004d9a:	e00b      	b.n	8004db4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da0:	2b11      	cmp	r3, #17
 8004da2:	d107      	bne.n	8004db4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004db2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 f929 	bl	8005018 <I2C_WaitOnFlagUntilTimeout>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00d      	beq.n	8004de8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004dda:	d103      	bne.n	8004de4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004de2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e079      	b.n	8004edc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004df0:	d108      	bne.n	8004e04 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004df2:	897b      	ldrh	r3, [r7, #10]
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	f043 0301 	orr.w	r3, r3, #1
 8004dfa:	b2da      	uxtb	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	611a      	str	r2, [r3, #16]
 8004e02:	e05f      	b.n	8004ec4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004e04:	897b      	ldrh	r3, [r7, #10]
 8004e06:	11db      	asrs	r3, r3, #7
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	f003 0306 	and.w	r3, r3, #6
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	f063 030f 	orn	r3, r3, #15
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	4930      	ldr	r1, [pc, #192]	@ (8004ee4 <I2C_MasterRequestRead+0x194>)
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f000 f972 	bl	800510c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e054      	b.n	8004edc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004e32:	897b      	ldrh	r3, [r7, #10]
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	4929      	ldr	r1, [pc, #164]	@ (8004ee8 <I2C_MasterRequestRead+0x198>)
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f000 f962 	bl	800510c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e044      	b.n	8004edc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e52:	2300      	movs	r3, #0
 8004e54:	613b      	str	r3, [r7, #16]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	613b      	str	r3, [r7, #16]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	613b      	str	r3, [r7, #16]
 8004e66:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e76:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f000 f8c7 	bl	8005018 <I2C_WaitOnFlagUntilTimeout>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00d      	beq.n	8004eac <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e9e:	d103      	bne.n	8004ea8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ea6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e017      	b.n	8004edc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004eac:	897b      	ldrh	r3, [r7, #10]
 8004eae:	11db      	asrs	r3, r3, #7
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	f003 0306 	and.w	r3, r3, #6
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	f063 030e 	orn	r3, r3, #14
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	4907      	ldr	r1, [pc, #28]	@ (8004ee8 <I2C_MasterRequestRead+0x198>)
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f000 f91e 	bl	800510c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d001      	beq.n	8004eda <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e000      	b.n	8004edc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3718      	adds	r7, #24
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	00010008 	.word	0x00010008
 8004ee8:	00010002 	.word	0x00010002

08004eec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b088      	sub	sp, #32
 8004ef0:	af02      	add	r7, sp, #8
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	4608      	mov	r0, r1
 8004ef6:	4611      	mov	r1, r2
 8004ef8:	461a      	mov	r2, r3
 8004efa:	4603      	mov	r3, r0
 8004efc:	817b      	strh	r3, [r7, #10]
 8004efe:	460b      	mov	r3, r1
 8004f00:	813b      	strh	r3, [r7, #8]
 8004f02:	4613      	mov	r3, r2
 8004f04:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	6a3b      	ldr	r3, [r7, #32]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 f878 	bl	8005018 <I2C_WaitOnFlagUntilTimeout>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00d      	beq.n	8004f4a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f3c:	d103      	bne.n	8004f46 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f44:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e05f      	b.n	800500a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f4a:	897b      	ldrh	r3, [r7, #10]
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	461a      	mov	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004f58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5c:	6a3a      	ldr	r2, [r7, #32]
 8004f5e:	492d      	ldr	r1, [pc, #180]	@ (8005014 <I2C_RequestMemoryWrite+0x128>)
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f000 f8d3 	bl	800510c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e04c      	b.n	800500a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f70:	2300      	movs	r3, #0
 8004f72:	617b      	str	r3, [r7, #20]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	617b      	str	r3, [r7, #20]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	617b      	str	r3, [r7, #20]
 8004f84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f88:	6a39      	ldr	r1, [r7, #32]
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f000 f95e 	bl	800524c <I2C_WaitOnTXEFlagUntilTimeout>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00d      	beq.n	8004fb2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9a:	2b04      	cmp	r3, #4
 8004f9c:	d107      	bne.n	8004fae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e02b      	b.n	800500a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004fb2:	88fb      	ldrh	r3, [r7, #6]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d105      	bne.n	8004fc4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fb8:	893b      	ldrh	r3, [r7, #8]
 8004fba:	b2da      	uxtb	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	611a      	str	r2, [r3, #16]
 8004fc2:	e021      	b.n	8005008 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004fc4:	893b      	ldrh	r3, [r7, #8]
 8004fc6:	0a1b      	lsrs	r3, r3, #8
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	b2da      	uxtb	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fd4:	6a39      	ldr	r1, [r7, #32]
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f000 f938 	bl	800524c <I2C_WaitOnTXEFlagUntilTimeout>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00d      	beq.n	8004ffe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe6:	2b04      	cmp	r3, #4
 8004fe8:	d107      	bne.n	8004ffa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ff8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e005      	b.n	800500a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ffe:	893b      	ldrh	r3, [r7, #8]
 8005000:	b2da      	uxtb	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3718      	adds	r7, #24
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	00010002 	.word	0x00010002

08005018 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	603b      	str	r3, [r7, #0]
 8005024:	4613      	mov	r3, r2
 8005026:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005028:	e048      	b.n	80050bc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005030:	d044      	beq.n	80050bc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005032:	f7fe f9b9 	bl	80033a8 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	429a      	cmp	r2, r3
 8005040:	d302      	bcc.n	8005048 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d139      	bne.n	80050bc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	0c1b      	lsrs	r3, r3, #16
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b01      	cmp	r3, #1
 8005050:	d10d      	bne.n	800506e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	43da      	mvns	r2, r3
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	4013      	ands	r3, r2
 800505e:	b29b      	uxth	r3, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	bf0c      	ite	eq
 8005064:	2301      	moveq	r3, #1
 8005066:	2300      	movne	r3, #0
 8005068:	b2db      	uxtb	r3, r3
 800506a:	461a      	mov	r2, r3
 800506c:	e00c      	b.n	8005088 <I2C_WaitOnFlagUntilTimeout+0x70>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	43da      	mvns	r2, r3
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	4013      	ands	r3, r2
 800507a:	b29b      	uxth	r3, r3
 800507c:	2b00      	cmp	r3, #0
 800507e:	bf0c      	ite	eq
 8005080:	2301      	moveq	r3, #1
 8005082:	2300      	movne	r3, #0
 8005084:	b2db      	uxtb	r3, r3
 8005086:	461a      	mov	r2, r3
 8005088:	79fb      	ldrb	r3, [r7, #7]
 800508a:	429a      	cmp	r2, r3
 800508c:	d116      	bne.n	80050bc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2220      	movs	r2, #32
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a8:	f043 0220 	orr.w	r2, r3, #32
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e023      	b.n	8005104 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	0c1b      	lsrs	r3, r3, #16
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d10d      	bne.n	80050e2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	43da      	mvns	r2, r3
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	4013      	ands	r3, r2
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	bf0c      	ite	eq
 80050d8:	2301      	moveq	r3, #1
 80050da:	2300      	movne	r3, #0
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	461a      	mov	r2, r3
 80050e0:	e00c      	b.n	80050fc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	43da      	mvns	r2, r3
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	4013      	ands	r3, r2
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	bf0c      	ite	eq
 80050f4:	2301      	moveq	r3, #1
 80050f6:	2300      	movne	r3, #0
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	461a      	mov	r2, r3
 80050fc:	79fb      	ldrb	r3, [r7, #7]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d093      	beq.n	800502a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
 8005118:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800511a:	e071      	b.n	8005200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005126:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800512a:	d123      	bne.n	8005174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800513a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005144:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2220      	movs	r2, #32
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005160:	f043 0204 	orr.w	r2, r3, #4
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e067      	b.n	8005244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517a:	d041      	beq.n	8005200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800517c:	f7fe f914 	bl	80033a8 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	429a      	cmp	r2, r3
 800518a:	d302      	bcc.n	8005192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d136      	bne.n	8005200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	0c1b      	lsrs	r3, r3, #16
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2b01      	cmp	r3, #1
 800519a:	d10c      	bne.n	80051b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	43da      	mvns	r2, r3
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	4013      	ands	r3, r2
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	bf14      	ite	ne
 80051ae:	2301      	movne	r3, #1
 80051b0:	2300      	moveq	r3, #0
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	e00b      	b.n	80051ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	43da      	mvns	r2, r3
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	4013      	ands	r3, r2
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	bf14      	ite	ne
 80051c8:	2301      	movne	r3, #1
 80051ca:	2300      	moveq	r3, #0
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d016      	beq.n	8005200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2220      	movs	r2, #32
 80051dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ec:	f043 0220 	orr.w	r2, r3, #32
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e021      	b.n	8005244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	0c1b      	lsrs	r3, r3, #16
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b01      	cmp	r3, #1
 8005208:	d10c      	bne.n	8005224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	43da      	mvns	r2, r3
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	4013      	ands	r3, r2
 8005216:	b29b      	uxth	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	bf14      	ite	ne
 800521c:	2301      	movne	r3, #1
 800521e:	2300      	moveq	r3, #0
 8005220:	b2db      	uxtb	r3, r3
 8005222:	e00b      	b.n	800523c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	43da      	mvns	r2, r3
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	4013      	ands	r3, r2
 8005230:	b29b      	uxth	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	bf14      	ite	ne
 8005236:	2301      	movne	r3, #1
 8005238:	2300      	moveq	r3, #0
 800523a:	b2db      	uxtb	r3, r3
 800523c:	2b00      	cmp	r3, #0
 800523e:	f47f af6d 	bne.w	800511c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3710      	adds	r7, #16
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005258:	e034      	b.n	80052c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f000 f8e3 	bl	8005426 <I2C_IsAcknowledgeFailed>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e034      	b.n	80052d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005270:	d028      	beq.n	80052c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005272:	f7fe f899 	bl	80033a8 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	429a      	cmp	r2, r3
 8005280:	d302      	bcc.n	8005288 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d11d      	bne.n	80052c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005292:	2b80      	cmp	r3, #128	@ 0x80
 8005294:	d016      	beq.n	80052c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2220      	movs	r2, #32
 80052a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b0:	f043 0220 	orr.w	r2, r3, #32
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e007      	b.n	80052d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052ce:	2b80      	cmp	r3, #128	@ 0x80
 80052d0:	d1c3      	bne.n	800525a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052e8:	e034      	b.n	8005354 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f000 f89b 	bl	8005426 <I2C_IsAcknowledgeFailed>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e034      	b.n	8005364 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005300:	d028      	beq.n	8005354 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005302:	f7fe f851 	bl	80033a8 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	429a      	cmp	r2, r3
 8005310:	d302      	bcc.n	8005318 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d11d      	bne.n	8005354 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	f003 0304 	and.w	r3, r3, #4
 8005322:	2b04      	cmp	r3, #4
 8005324:	d016      	beq.n	8005354 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2220      	movs	r2, #32
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005340:	f043 0220 	orr.w	r2, r3, #32
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e007      	b.n	8005364 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	f003 0304 	and.w	r3, r3, #4
 800535e:	2b04      	cmp	r3, #4
 8005360:	d1c3      	bne.n	80052ea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005378:	e049      	b.n	800540e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	f003 0310 	and.w	r3, r3, #16
 8005384:	2b10      	cmp	r3, #16
 8005386:	d119      	bne.n	80053bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f06f 0210 	mvn.w	r2, #16
 8005390:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2220      	movs	r2, #32
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e030      	b.n	800541e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053bc:	f7fd fff4 	bl	80033a8 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d302      	bcc.n	80053d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d11d      	bne.n	800540e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	695b      	ldr	r3, [r3, #20]
 80053d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053dc:	2b40      	cmp	r3, #64	@ 0x40
 80053de:	d016      	beq.n	800540e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2220      	movs	r2, #32
 80053ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053fa:	f043 0220 	orr.w	r2, r3, #32
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e007      	b.n	800541e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005418:	2b40      	cmp	r3, #64	@ 0x40
 800541a:	d1ae      	bne.n	800537a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005426:	b480      	push	{r7}
 8005428:	b083      	sub	sp, #12
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	695b      	ldr	r3, [r3, #20]
 8005434:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005438:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800543c:	d11b      	bne.n	8005476 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005446:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2220      	movs	r2, #32
 8005452:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005462:	f043 0204 	orr.w	r2, r3, #4
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e000      	b.n	8005478 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e267      	b.n	8005966 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d075      	beq.n	800558e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80054a2:	4b88      	ldr	r3, [pc, #544]	@ (80056c4 <HAL_RCC_OscConfig+0x240>)
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f003 030c 	and.w	r3, r3, #12
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	d00c      	beq.n	80054c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054ae:	4b85      	ldr	r3, [pc, #532]	@ (80056c4 <HAL_RCC_OscConfig+0x240>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80054b6:	2b08      	cmp	r3, #8
 80054b8:	d112      	bne.n	80054e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054ba:	4b82      	ldr	r3, [pc, #520]	@ (80056c4 <HAL_RCC_OscConfig+0x240>)
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054c6:	d10b      	bne.n	80054e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054c8:	4b7e      	ldr	r3, [pc, #504]	@ (80056c4 <HAL_RCC_OscConfig+0x240>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d05b      	beq.n	800558c <HAL_RCC_OscConfig+0x108>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d157      	bne.n	800558c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e242      	b.n	8005966 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054e8:	d106      	bne.n	80054f8 <HAL_RCC_OscConfig+0x74>
 80054ea:	4b76      	ldr	r3, [pc, #472]	@ (80056c4 <HAL_RCC_OscConfig+0x240>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a75      	ldr	r2, [pc, #468]	@ (80056c4 <HAL_RCC_OscConfig+0x240>)
 80054f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054f4:	6013      	str	r3, [r2, #0]
 80054f6:	e01d      	b.n	8005534 <HAL_RCC_OscConfig+0xb0>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005500:	d10c      	bne.n	800551c <HAL_RCC_OscConfig+0x98>
 8005502:	4b70      	ldr	r3, [pc, #448]	@ (80056c4 <HAL_RCC_OscConfig+0x240>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a6f      	ldr	r2, [pc, #444]	@ (80056c4 <HAL_RCC_OscConfig+0x240>)
 8005508:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800550c:	6013      	str	r3, [r2, #0]
 800550e:	4b6d      	ldr	r3, [pc, #436]	@ (80056c4 <HAL_RCC_OscConfig+0x240>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a6c      	ldr	r2, [pc, #432]	@ (80056c4 <HAL_RCC_OscConfig+0x240>)
 8005514:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005518:	6013      	str	r3, [r2, #0]
 800551a:	e00b      	b.n	8005534 <HAL_RCC_OscConfig+0xb0>
 800551c:	4b69      	ldr	r3, [pc, #420]	@ (80056c4 <HAL_RCC_OscConfig+0x240>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a68      	ldr	r2, [pc, #416]	@ (80056c4 <HAL_RCC_OscConfig+0x240>)
 8005522:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005526:	6013      	str	r3, [r2, #0]
 8005528:	4b66      	ldr	r3, [pc, #408]	@ (80056c4 <HAL_RCC_OscConfig+0x240>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a65      	ldr	r2, [pc, #404]	@ (80056c4 <HAL_RCC_OscConfig+0x240>)
 800552e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005532:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d013      	beq.n	8005564 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800553c:	f7fd ff34 	bl	80033a8 <HAL_GetTick>
 8005540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005542:	e008      	b.n	8005556 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005544:	f7fd ff30 	bl	80033a8 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b64      	cmp	r3, #100	@ 0x64
 8005550:	d901      	bls.n	8005556 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e207      	b.n	8005966 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005556:	4b5b      	ldr	r3, [pc, #364]	@ (80056c4 <HAL_RCC_OscConfig+0x240>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d0f0      	beq.n	8005544 <HAL_RCC_OscConfig+0xc0>
 8005562:	e014      	b.n	800558e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005564:	f7fd ff20 	bl	80033a8 <HAL_GetTick>
 8005568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800556a:	e008      	b.n	800557e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800556c:	f7fd ff1c 	bl	80033a8 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	2b64      	cmp	r3, #100	@ 0x64
 8005578:	d901      	bls.n	800557e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e1f3      	b.n	8005966 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800557e:	4b51      	ldr	r3, [pc, #324]	@ (80056c4 <HAL_RCC_OscConfig+0x240>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1f0      	bne.n	800556c <HAL_RCC_OscConfig+0xe8>
 800558a:	e000      	b.n	800558e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800558c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d063      	beq.n	8005662 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800559a:	4b4a      	ldr	r3, [pc, #296]	@ (80056c4 <HAL_RCC_OscConfig+0x240>)
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f003 030c 	and.w	r3, r3, #12
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00b      	beq.n	80055be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055a6:	4b47      	ldr	r3, [pc, #284]	@ (80056c4 <HAL_RCC_OscConfig+0x240>)
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80055ae:	2b08      	cmp	r3, #8
 80055b0:	d11c      	bne.n	80055ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055b2:	4b44      	ldr	r3, [pc, #272]	@ (80056c4 <HAL_RCC_OscConfig+0x240>)
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d116      	bne.n	80055ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055be:	4b41      	ldr	r3, [pc, #260]	@ (80056c4 <HAL_RCC_OscConfig+0x240>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d005      	beq.n	80055d6 <HAL_RCC_OscConfig+0x152>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d001      	beq.n	80055d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e1c7      	b.n	8005966 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055d6:	4b3b      	ldr	r3, [pc, #236]	@ (80056c4 <HAL_RCC_OscConfig+0x240>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	4937      	ldr	r1, [pc, #220]	@ (80056c4 <HAL_RCC_OscConfig+0x240>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055ea:	e03a      	b.n	8005662 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d020      	beq.n	8005636 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055f4:	4b34      	ldr	r3, [pc, #208]	@ (80056c8 <HAL_RCC_OscConfig+0x244>)
 80055f6:	2201      	movs	r2, #1
 80055f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055fa:	f7fd fed5 	bl	80033a8 <HAL_GetTick>
 80055fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005600:	e008      	b.n	8005614 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005602:	f7fd fed1 	bl	80033a8 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b02      	cmp	r3, #2
 800560e:	d901      	bls.n	8005614 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e1a8      	b.n	8005966 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005614:	4b2b      	ldr	r3, [pc, #172]	@ (80056c4 <HAL_RCC_OscConfig+0x240>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0302 	and.w	r3, r3, #2
 800561c:	2b00      	cmp	r3, #0
 800561e:	d0f0      	beq.n	8005602 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005620:	4b28      	ldr	r3, [pc, #160]	@ (80056c4 <HAL_RCC_OscConfig+0x240>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	00db      	lsls	r3, r3, #3
 800562e:	4925      	ldr	r1, [pc, #148]	@ (80056c4 <HAL_RCC_OscConfig+0x240>)
 8005630:	4313      	orrs	r3, r2
 8005632:	600b      	str	r3, [r1, #0]
 8005634:	e015      	b.n	8005662 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005636:	4b24      	ldr	r3, [pc, #144]	@ (80056c8 <HAL_RCC_OscConfig+0x244>)
 8005638:	2200      	movs	r2, #0
 800563a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800563c:	f7fd feb4 	bl	80033a8 <HAL_GetTick>
 8005640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005642:	e008      	b.n	8005656 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005644:	f7fd feb0 	bl	80033a8 <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	2b02      	cmp	r3, #2
 8005650:	d901      	bls.n	8005656 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e187      	b.n	8005966 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005656:	4b1b      	ldr	r3, [pc, #108]	@ (80056c4 <HAL_RCC_OscConfig+0x240>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0302 	and.w	r3, r3, #2
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1f0      	bne.n	8005644 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0308 	and.w	r3, r3, #8
 800566a:	2b00      	cmp	r3, #0
 800566c:	d036      	beq.n	80056dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d016      	beq.n	80056a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005676:	4b15      	ldr	r3, [pc, #84]	@ (80056cc <HAL_RCC_OscConfig+0x248>)
 8005678:	2201      	movs	r2, #1
 800567a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800567c:	f7fd fe94 	bl	80033a8 <HAL_GetTick>
 8005680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005682:	e008      	b.n	8005696 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005684:	f7fd fe90 	bl	80033a8 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b02      	cmp	r3, #2
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e167      	b.n	8005966 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005696:	4b0b      	ldr	r3, [pc, #44]	@ (80056c4 <HAL_RCC_OscConfig+0x240>)
 8005698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d0f0      	beq.n	8005684 <HAL_RCC_OscConfig+0x200>
 80056a2:	e01b      	b.n	80056dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056a4:	4b09      	ldr	r3, [pc, #36]	@ (80056cc <HAL_RCC_OscConfig+0x248>)
 80056a6:	2200      	movs	r2, #0
 80056a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056aa:	f7fd fe7d 	bl	80033a8 <HAL_GetTick>
 80056ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056b0:	e00e      	b.n	80056d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056b2:	f7fd fe79 	bl	80033a8 <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d907      	bls.n	80056d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e150      	b.n	8005966 <HAL_RCC_OscConfig+0x4e2>
 80056c4:	40023800 	.word	0x40023800
 80056c8:	42470000 	.word	0x42470000
 80056cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056d0:	4b88      	ldr	r3, [pc, #544]	@ (80058f4 <HAL_RCC_OscConfig+0x470>)
 80056d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056d4:	f003 0302 	and.w	r3, r3, #2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1ea      	bne.n	80056b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0304 	and.w	r3, r3, #4
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 8097 	beq.w	8005818 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056ea:	2300      	movs	r3, #0
 80056ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056ee:	4b81      	ldr	r3, [pc, #516]	@ (80058f4 <HAL_RCC_OscConfig+0x470>)
 80056f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10f      	bne.n	800571a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056fa:	2300      	movs	r3, #0
 80056fc:	60bb      	str	r3, [r7, #8]
 80056fe:	4b7d      	ldr	r3, [pc, #500]	@ (80058f4 <HAL_RCC_OscConfig+0x470>)
 8005700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005702:	4a7c      	ldr	r2, [pc, #496]	@ (80058f4 <HAL_RCC_OscConfig+0x470>)
 8005704:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005708:	6413      	str	r3, [r2, #64]	@ 0x40
 800570a:	4b7a      	ldr	r3, [pc, #488]	@ (80058f4 <HAL_RCC_OscConfig+0x470>)
 800570c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800570e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005712:	60bb      	str	r3, [r7, #8]
 8005714:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005716:	2301      	movs	r3, #1
 8005718:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800571a:	4b77      	ldr	r3, [pc, #476]	@ (80058f8 <HAL_RCC_OscConfig+0x474>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005722:	2b00      	cmp	r3, #0
 8005724:	d118      	bne.n	8005758 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005726:	4b74      	ldr	r3, [pc, #464]	@ (80058f8 <HAL_RCC_OscConfig+0x474>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a73      	ldr	r2, [pc, #460]	@ (80058f8 <HAL_RCC_OscConfig+0x474>)
 800572c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005730:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005732:	f7fd fe39 	bl	80033a8 <HAL_GetTick>
 8005736:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005738:	e008      	b.n	800574c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800573a:	f7fd fe35 	bl	80033a8 <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	2b02      	cmp	r3, #2
 8005746:	d901      	bls.n	800574c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e10c      	b.n	8005966 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800574c:	4b6a      	ldr	r3, [pc, #424]	@ (80058f8 <HAL_RCC_OscConfig+0x474>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005754:	2b00      	cmp	r3, #0
 8005756:	d0f0      	beq.n	800573a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d106      	bne.n	800576e <HAL_RCC_OscConfig+0x2ea>
 8005760:	4b64      	ldr	r3, [pc, #400]	@ (80058f4 <HAL_RCC_OscConfig+0x470>)
 8005762:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005764:	4a63      	ldr	r2, [pc, #396]	@ (80058f4 <HAL_RCC_OscConfig+0x470>)
 8005766:	f043 0301 	orr.w	r3, r3, #1
 800576a:	6713      	str	r3, [r2, #112]	@ 0x70
 800576c:	e01c      	b.n	80057a8 <HAL_RCC_OscConfig+0x324>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	2b05      	cmp	r3, #5
 8005774:	d10c      	bne.n	8005790 <HAL_RCC_OscConfig+0x30c>
 8005776:	4b5f      	ldr	r3, [pc, #380]	@ (80058f4 <HAL_RCC_OscConfig+0x470>)
 8005778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800577a:	4a5e      	ldr	r2, [pc, #376]	@ (80058f4 <HAL_RCC_OscConfig+0x470>)
 800577c:	f043 0304 	orr.w	r3, r3, #4
 8005780:	6713      	str	r3, [r2, #112]	@ 0x70
 8005782:	4b5c      	ldr	r3, [pc, #368]	@ (80058f4 <HAL_RCC_OscConfig+0x470>)
 8005784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005786:	4a5b      	ldr	r2, [pc, #364]	@ (80058f4 <HAL_RCC_OscConfig+0x470>)
 8005788:	f043 0301 	orr.w	r3, r3, #1
 800578c:	6713      	str	r3, [r2, #112]	@ 0x70
 800578e:	e00b      	b.n	80057a8 <HAL_RCC_OscConfig+0x324>
 8005790:	4b58      	ldr	r3, [pc, #352]	@ (80058f4 <HAL_RCC_OscConfig+0x470>)
 8005792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005794:	4a57      	ldr	r2, [pc, #348]	@ (80058f4 <HAL_RCC_OscConfig+0x470>)
 8005796:	f023 0301 	bic.w	r3, r3, #1
 800579a:	6713      	str	r3, [r2, #112]	@ 0x70
 800579c:	4b55      	ldr	r3, [pc, #340]	@ (80058f4 <HAL_RCC_OscConfig+0x470>)
 800579e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057a0:	4a54      	ldr	r2, [pc, #336]	@ (80058f4 <HAL_RCC_OscConfig+0x470>)
 80057a2:	f023 0304 	bic.w	r3, r3, #4
 80057a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d015      	beq.n	80057dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b0:	f7fd fdfa 	bl	80033a8 <HAL_GetTick>
 80057b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057b6:	e00a      	b.n	80057ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057b8:	f7fd fdf6 	bl	80033a8 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e0cb      	b.n	8005966 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057ce:	4b49      	ldr	r3, [pc, #292]	@ (80058f4 <HAL_RCC_OscConfig+0x470>)
 80057d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d0ee      	beq.n	80057b8 <HAL_RCC_OscConfig+0x334>
 80057da:	e014      	b.n	8005806 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057dc:	f7fd fde4 	bl	80033a8 <HAL_GetTick>
 80057e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057e2:	e00a      	b.n	80057fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057e4:	f7fd fde0 	bl	80033a8 <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e0b5      	b.n	8005966 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057fa:	4b3e      	ldr	r3, [pc, #248]	@ (80058f4 <HAL_RCC_OscConfig+0x470>)
 80057fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1ee      	bne.n	80057e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005806:	7dfb      	ldrb	r3, [r7, #23]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d105      	bne.n	8005818 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800580c:	4b39      	ldr	r3, [pc, #228]	@ (80058f4 <HAL_RCC_OscConfig+0x470>)
 800580e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005810:	4a38      	ldr	r2, [pc, #224]	@ (80058f4 <HAL_RCC_OscConfig+0x470>)
 8005812:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005816:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	2b00      	cmp	r3, #0
 800581e:	f000 80a1 	beq.w	8005964 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005822:	4b34      	ldr	r3, [pc, #208]	@ (80058f4 <HAL_RCC_OscConfig+0x470>)
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f003 030c 	and.w	r3, r3, #12
 800582a:	2b08      	cmp	r3, #8
 800582c:	d05c      	beq.n	80058e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	2b02      	cmp	r3, #2
 8005834:	d141      	bne.n	80058ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005836:	4b31      	ldr	r3, [pc, #196]	@ (80058fc <HAL_RCC_OscConfig+0x478>)
 8005838:	2200      	movs	r2, #0
 800583a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800583c:	f7fd fdb4 	bl	80033a8 <HAL_GetTick>
 8005840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005842:	e008      	b.n	8005856 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005844:	f7fd fdb0 	bl	80033a8 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b02      	cmp	r3, #2
 8005850:	d901      	bls.n	8005856 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e087      	b.n	8005966 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005856:	4b27      	ldr	r3, [pc, #156]	@ (80058f4 <HAL_RCC_OscConfig+0x470>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1f0      	bne.n	8005844 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	69da      	ldr	r2, [r3, #28]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	431a      	orrs	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005870:	019b      	lsls	r3, r3, #6
 8005872:	431a      	orrs	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005878:	085b      	lsrs	r3, r3, #1
 800587a:	3b01      	subs	r3, #1
 800587c:	041b      	lsls	r3, r3, #16
 800587e:	431a      	orrs	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005884:	061b      	lsls	r3, r3, #24
 8005886:	491b      	ldr	r1, [pc, #108]	@ (80058f4 <HAL_RCC_OscConfig+0x470>)
 8005888:	4313      	orrs	r3, r2
 800588a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800588c:	4b1b      	ldr	r3, [pc, #108]	@ (80058fc <HAL_RCC_OscConfig+0x478>)
 800588e:	2201      	movs	r2, #1
 8005890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005892:	f7fd fd89 	bl	80033a8 <HAL_GetTick>
 8005896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005898:	e008      	b.n	80058ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800589a:	f7fd fd85 	bl	80033a8 <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d901      	bls.n	80058ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e05c      	b.n	8005966 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058ac:	4b11      	ldr	r3, [pc, #68]	@ (80058f4 <HAL_RCC_OscConfig+0x470>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d0f0      	beq.n	800589a <HAL_RCC_OscConfig+0x416>
 80058b8:	e054      	b.n	8005964 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058ba:	4b10      	ldr	r3, [pc, #64]	@ (80058fc <HAL_RCC_OscConfig+0x478>)
 80058bc:	2200      	movs	r2, #0
 80058be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058c0:	f7fd fd72 	bl	80033a8 <HAL_GetTick>
 80058c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058c6:	e008      	b.n	80058da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058c8:	f7fd fd6e 	bl	80033a8 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d901      	bls.n	80058da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e045      	b.n	8005966 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058da:	4b06      	ldr	r3, [pc, #24]	@ (80058f4 <HAL_RCC_OscConfig+0x470>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1f0      	bne.n	80058c8 <HAL_RCC_OscConfig+0x444>
 80058e6:	e03d      	b.n	8005964 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d107      	bne.n	8005900 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e038      	b.n	8005966 <HAL_RCC_OscConfig+0x4e2>
 80058f4:	40023800 	.word	0x40023800
 80058f8:	40007000 	.word	0x40007000
 80058fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005900:	4b1b      	ldr	r3, [pc, #108]	@ (8005970 <HAL_RCC_OscConfig+0x4ec>)
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d028      	beq.n	8005960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005918:	429a      	cmp	r2, r3
 800591a:	d121      	bne.n	8005960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005926:	429a      	cmp	r2, r3
 8005928:	d11a      	bne.n	8005960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005930:	4013      	ands	r3, r2
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005936:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005938:	4293      	cmp	r3, r2
 800593a:	d111      	bne.n	8005960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005946:	085b      	lsrs	r3, r3, #1
 8005948:	3b01      	subs	r3, #1
 800594a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800594c:	429a      	cmp	r2, r3
 800594e:	d107      	bne.n	8005960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800595a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800595c:	429a      	cmp	r2, r3
 800595e:	d001      	beq.n	8005964 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e000      	b.n	8005966 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3718      	adds	r7, #24
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	40023800 	.word	0x40023800

08005974 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d101      	bne.n	8005988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e0cc      	b.n	8005b22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005988:	4b68      	ldr	r3, [pc, #416]	@ (8005b2c <HAL_RCC_ClockConfig+0x1b8>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0307 	and.w	r3, r3, #7
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	429a      	cmp	r2, r3
 8005994:	d90c      	bls.n	80059b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005996:	4b65      	ldr	r3, [pc, #404]	@ (8005b2c <HAL_RCC_ClockConfig+0x1b8>)
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	b2d2      	uxtb	r2, r2
 800599c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800599e:	4b63      	ldr	r3, [pc, #396]	@ (8005b2c <HAL_RCC_ClockConfig+0x1b8>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0307 	and.w	r3, r3, #7
 80059a6:	683a      	ldr	r2, [r7, #0]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d001      	beq.n	80059b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e0b8      	b.n	8005b22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0302 	and.w	r3, r3, #2
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d020      	beq.n	80059fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0304 	and.w	r3, r3, #4
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d005      	beq.n	80059d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059c8:	4b59      	ldr	r3, [pc, #356]	@ (8005b30 <HAL_RCC_ClockConfig+0x1bc>)
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	4a58      	ldr	r2, [pc, #352]	@ (8005b30 <HAL_RCC_ClockConfig+0x1bc>)
 80059ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80059d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0308 	and.w	r3, r3, #8
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d005      	beq.n	80059ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059e0:	4b53      	ldr	r3, [pc, #332]	@ (8005b30 <HAL_RCC_ClockConfig+0x1bc>)
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	4a52      	ldr	r2, [pc, #328]	@ (8005b30 <HAL_RCC_ClockConfig+0x1bc>)
 80059e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80059ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059ec:	4b50      	ldr	r3, [pc, #320]	@ (8005b30 <HAL_RCC_ClockConfig+0x1bc>)
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	494d      	ldr	r1, [pc, #308]	@ (8005b30 <HAL_RCC_ClockConfig+0x1bc>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d044      	beq.n	8005a94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d107      	bne.n	8005a22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a12:	4b47      	ldr	r3, [pc, #284]	@ (8005b30 <HAL_RCC_ClockConfig+0x1bc>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d119      	bne.n	8005a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e07f      	b.n	8005b22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d003      	beq.n	8005a32 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a2e:	2b03      	cmp	r3, #3
 8005a30:	d107      	bne.n	8005a42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a32:	4b3f      	ldr	r3, [pc, #252]	@ (8005b30 <HAL_RCC_ClockConfig+0x1bc>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d109      	bne.n	8005a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e06f      	b.n	8005b22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a42:	4b3b      	ldr	r3, [pc, #236]	@ (8005b30 <HAL_RCC_ClockConfig+0x1bc>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0302 	and.w	r3, r3, #2
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e067      	b.n	8005b22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a52:	4b37      	ldr	r3, [pc, #220]	@ (8005b30 <HAL_RCC_ClockConfig+0x1bc>)
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f023 0203 	bic.w	r2, r3, #3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	4934      	ldr	r1, [pc, #208]	@ (8005b30 <HAL_RCC_ClockConfig+0x1bc>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a64:	f7fd fca0 	bl	80033a8 <HAL_GetTick>
 8005a68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a6a:	e00a      	b.n	8005a82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a6c:	f7fd fc9c 	bl	80033a8 <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d901      	bls.n	8005a82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e04f      	b.n	8005b22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a82:	4b2b      	ldr	r3, [pc, #172]	@ (8005b30 <HAL_RCC_ClockConfig+0x1bc>)
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f003 020c 	and.w	r2, r3, #12
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d1eb      	bne.n	8005a6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a94:	4b25      	ldr	r3, [pc, #148]	@ (8005b2c <HAL_RCC_ClockConfig+0x1b8>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0307 	and.w	r3, r3, #7
 8005a9c:	683a      	ldr	r2, [r7, #0]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d20c      	bcs.n	8005abc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aa2:	4b22      	ldr	r3, [pc, #136]	@ (8005b2c <HAL_RCC_ClockConfig+0x1b8>)
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	b2d2      	uxtb	r2, r2
 8005aa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aaa:	4b20      	ldr	r3, [pc, #128]	@ (8005b2c <HAL_RCC_ClockConfig+0x1b8>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0307 	and.w	r3, r3, #7
 8005ab2:	683a      	ldr	r2, [r7, #0]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d001      	beq.n	8005abc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e032      	b.n	8005b22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0304 	and.w	r3, r3, #4
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d008      	beq.n	8005ada <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ac8:	4b19      	ldr	r3, [pc, #100]	@ (8005b30 <HAL_RCC_ClockConfig+0x1bc>)
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	4916      	ldr	r1, [pc, #88]	@ (8005b30 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0308 	and.w	r3, r3, #8
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d009      	beq.n	8005afa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ae6:	4b12      	ldr	r3, [pc, #72]	@ (8005b30 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	00db      	lsls	r3, r3, #3
 8005af4:	490e      	ldr	r1, [pc, #56]	@ (8005b30 <HAL_RCC_ClockConfig+0x1bc>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005afa:	f000 f821 	bl	8005b40 <HAL_RCC_GetSysClockFreq>
 8005afe:	4602      	mov	r2, r0
 8005b00:	4b0b      	ldr	r3, [pc, #44]	@ (8005b30 <HAL_RCC_ClockConfig+0x1bc>)
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	091b      	lsrs	r3, r3, #4
 8005b06:	f003 030f 	and.w	r3, r3, #15
 8005b0a:	490a      	ldr	r1, [pc, #40]	@ (8005b34 <HAL_RCC_ClockConfig+0x1c0>)
 8005b0c:	5ccb      	ldrb	r3, [r1, r3]
 8005b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b12:	4a09      	ldr	r2, [pc, #36]	@ (8005b38 <HAL_RCC_ClockConfig+0x1c4>)
 8005b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005b16:	4b09      	ldr	r3, [pc, #36]	@ (8005b3c <HAL_RCC_ClockConfig+0x1c8>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7fd fc00 	bl	8003320 <HAL_InitTick>

  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	40023c00 	.word	0x40023c00
 8005b30:	40023800 	.word	0x40023800
 8005b34:	0800c908 	.word	0x0800c908
 8005b38:	20000024 	.word	0x20000024
 8005b3c:	20000028 	.word	0x20000028

08005b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b44:	b094      	sub	sp, #80	@ 0x50
 8005b46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005b50:	2300      	movs	r3, #0
 8005b52:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005b54:	2300      	movs	r3, #0
 8005b56:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b58:	4b79      	ldr	r3, [pc, #484]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f003 030c 	and.w	r3, r3, #12
 8005b60:	2b08      	cmp	r3, #8
 8005b62:	d00d      	beq.n	8005b80 <HAL_RCC_GetSysClockFreq+0x40>
 8005b64:	2b08      	cmp	r3, #8
 8005b66:	f200 80e1 	bhi.w	8005d2c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d002      	beq.n	8005b74 <HAL_RCC_GetSysClockFreq+0x34>
 8005b6e:	2b04      	cmp	r3, #4
 8005b70:	d003      	beq.n	8005b7a <HAL_RCC_GetSysClockFreq+0x3a>
 8005b72:	e0db      	b.n	8005d2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b74:	4b73      	ldr	r3, [pc, #460]	@ (8005d44 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b78:	e0db      	b.n	8005d32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b7a:	4b73      	ldr	r3, [pc, #460]	@ (8005d48 <HAL_RCC_GetSysClockFreq+0x208>)
 8005b7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b7e:	e0d8      	b.n	8005d32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b80:	4b6f      	ldr	r3, [pc, #444]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b88:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b8a:	4b6d      	ldr	r3, [pc, #436]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d063      	beq.n	8005c5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b96:	4b6a      	ldr	r3, [pc, #424]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	099b      	lsrs	r3, r3, #6
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ba0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ba8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005baa:	2300      	movs	r3, #0
 8005bac:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005bb2:	4622      	mov	r2, r4
 8005bb4:	462b      	mov	r3, r5
 8005bb6:	f04f 0000 	mov.w	r0, #0
 8005bba:	f04f 0100 	mov.w	r1, #0
 8005bbe:	0159      	lsls	r1, r3, #5
 8005bc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bc4:	0150      	lsls	r0, r2, #5
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	460b      	mov	r3, r1
 8005bca:	4621      	mov	r1, r4
 8005bcc:	1a51      	subs	r1, r2, r1
 8005bce:	6139      	str	r1, [r7, #16]
 8005bd0:	4629      	mov	r1, r5
 8005bd2:	eb63 0301 	sbc.w	r3, r3, r1
 8005bd6:	617b      	str	r3, [r7, #20]
 8005bd8:	f04f 0200 	mov.w	r2, #0
 8005bdc:	f04f 0300 	mov.w	r3, #0
 8005be0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005be4:	4659      	mov	r1, fp
 8005be6:	018b      	lsls	r3, r1, #6
 8005be8:	4651      	mov	r1, sl
 8005bea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005bee:	4651      	mov	r1, sl
 8005bf0:	018a      	lsls	r2, r1, #6
 8005bf2:	4651      	mov	r1, sl
 8005bf4:	ebb2 0801 	subs.w	r8, r2, r1
 8005bf8:	4659      	mov	r1, fp
 8005bfa:	eb63 0901 	sbc.w	r9, r3, r1
 8005bfe:	f04f 0200 	mov.w	r2, #0
 8005c02:	f04f 0300 	mov.w	r3, #0
 8005c06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c12:	4690      	mov	r8, r2
 8005c14:	4699      	mov	r9, r3
 8005c16:	4623      	mov	r3, r4
 8005c18:	eb18 0303 	adds.w	r3, r8, r3
 8005c1c:	60bb      	str	r3, [r7, #8]
 8005c1e:	462b      	mov	r3, r5
 8005c20:	eb49 0303 	adc.w	r3, r9, r3
 8005c24:	60fb      	str	r3, [r7, #12]
 8005c26:	f04f 0200 	mov.w	r2, #0
 8005c2a:	f04f 0300 	mov.w	r3, #0
 8005c2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005c32:	4629      	mov	r1, r5
 8005c34:	024b      	lsls	r3, r1, #9
 8005c36:	4621      	mov	r1, r4
 8005c38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c3c:	4621      	mov	r1, r4
 8005c3e:	024a      	lsls	r2, r1, #9
 8005c40:	4610      	mov	r0, r2
 8005c42:	4619      	mov	r1, r3
 8005c44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c46:	2200      	movs	r2, #0
 8005c48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c50:	f7fb f81a 	bl	8000c88 <__aeabi_uldivmod>
 8005c54:	4602      	mov	r2, r0
 8005c56:	460b      	mov	r3, r1
 8005c58:	4613      	mov	r3, r2
 8005c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c5c:	e058      	b.n	8005d10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c5e:	4b38      	ldr	r3, [pc, #224]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	099b      	lsrs	r3, r3, #6
 8005c64:	2200      	movs	r2, #0
 8005c66:	4618      	mov	r0, r3
 8005c68:	4611      	mov	r1, r2
 8005c6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005c6e:	623b      	str	r3, [r7, #32]
 8005c70:	2300      	movs	r3, #0
 8005c72:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005c78:	4642      	mov	r2, r8
 8005c7a:	464b      	mov	r3, r9
 8005c7c:	f04f 0000 	mov.w	r0, #0
 8005c80:	f04f 0100 	mov.w	r1, #0
 8005c84:	0159      	lsls	r1, r3, #5
 8005c86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c8a:	0150      	lsls	r0, r2, #5
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4641      	mov	r1, r8
 8005c92:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c96:	4649      	mov	r1, r9
 8005c98:	eb63 0b01 	sbc.w	fp, r3, r1
 8005c9c:	f04f 0200 	mov.w	r2, #0
 8005ca0:	f04f 0300 	mov.w	r3, #0
 8005ca4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ca8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005cac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005cb0:	ebb2 040a 	subs.w	r4, r2, sl
 8005cb4:	eb63 050b 	sbc.w	r5, r3, fp
 8005cb8:	f04f 0200 	mov.w	r2, #0
 8005cbc:	f04f 0300 	mov.w	r3, #0
 8005cc0:	00eb      	lsls	r3, r5, #3
 8005cc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cc6:	00e2      	lsls	r2, r4, #3
 8005cc8:	4614      	mov	r4, r2
 8005cca:	461d      	mov	r5, r3
 8005ccc:	4643      	mov	r3, r8
 8005cce:	18e3      	adds	r3, r4, r3
 8005cd0:	603b      	str	r3, [r7, #0]
 8005cd2:	464b      	mov	r3, r9
 8005cd4:	eb45 0303 	adc.w	r3, r5, r3
 8005cd8:	607b      	str	r3, [r7, #4]
 8005cda:	f04f 0200 	mov.w	r2, #0
 8005cde:	f04f 0300 	mov.w	r3, #0
 8005ce2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ce6:	4629      	mov	r1, r5
 8005ce8:	028b      	lsls	r3, r1, #10
 8005cea:	4621      	mov	r1, r4
 8005cec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005cf0:	4621      	mov	r1, r4
 8005cf2:	028a      	lsls	r2, r1, #10
 8005cf4:	4610      	mov	r0, r2
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	61bb      	str	r3, [r7, #24]
 8005cfe:	61fa      	str	r2, [r7, #28]
 8005d00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d04:	f7fa ffc0 	bl	8000c88 <__aeabi_uldivmod>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005d10:	4b0b      	ldr	r3, [pc, #44]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	0c1b      	lsrs	r3, r3, #16
 8005d16:	f003 0303 	and.w	r3, r3, #3
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	005b      	lsls	r3, r3, #1
 8005d1e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005d20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d2a:	e002      	b.n	8005d32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d2c:	4b05      	ldr	r3, [pc, #20]	@ (8005d44 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d2e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3750      	adds	r7, #80	@ 0x50
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d3e:	bf00      	nop
 8005d40:	40023800 	.word	0x40023800
 8005d44:	00f42400 	.word	0x00f42400
 8005d48:	007a1200 	.word	0x007a1200

08005d4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d50:	4b03      	ldr	r3, [pc, #12]	@ (8005d60 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d52:	681b      	ldr	r3, [r3, #0]
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	20000024 	.word	0x20000024

08005d64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d68:	f7ff fff0 	bl	8005d4c <HAL_RCC_GetHCLKFreq>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	4b05      	ldr	r3, [pc, #20]	@ (8005d84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	0a9b      	lsrs	r3, r3, #10
 8005d74:	f003 0307 	and.w	r3, r3, #7
 8005d78:	4903      	ldr	r1, [pc, #12]	@ (8005d88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d7a:	5ccb      	ldrb	r3, [r1, r3]
 8005d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	40023800 	.word	0x40023800
 8005d88:	0800c918 	.word	0x0800c918

08005d8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d101      	bne.n	8005d9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e041      	b.n	8005e22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d106      	bne.n	8005db8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f7fd f85e 	bl	8002e74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2202      	movs	r2, #2
 8005dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	3304      	adds	r3, #4
 8005dc8:	4619      	mov	r1, r3
 8005dca:	4610      	mov	r0, r2
 8005dcc:	f000 face 	bl	800636c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b082      	sub	sp, #8
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d101      	bne.n	8005e3c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e041      	b.n	8005ec0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d106      	bne.n	8005e56 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f7fd f845 	bl	8002ee0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2202      	movs	r2, #2
 8005e5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	3304      	adds	r3, #4
 8005e66:	4619      	mov	r1, r3
 8005e68:	4610      	mov	r0, r2
 8005e6a:	f000 fa7f 	bl	800636c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2201      	movs	r2, #1
 8005e72:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3708      	adds	r7, #8
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d109      	bne.n	8005eec <HAL_TIM_PWM_Start+0x24>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	bf14      	ite	ne
 8005ee4:	2301      	movne	r3, #1
 8005ee6:	2300      	moveq	r3, #0
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	e022      	b.n	8005f32 <HAL_TIM_PWM_Start+0x6a>
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2b04      	cmp	r3, #4
 8005ef0:	d109      	bne.n	8005f06 <HAL_TIM_PWM_Start+0x3e>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	bf14      	ite	ne
 8005efe:	2301      	movne	r3, #1
 8005f00:	2300      	moveq	r3, #0
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	e015      	b.n	8005f32 <HAL_TIM_PWM_Start+0x6a>
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	2b08      	cmp	r3, #8
 8005f0a:	d109      	bne.n	8005f20 <HAL_TIM_PWM_Start+0x58>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	bf14      	ite	ne
 8005f18:	2301      	movne	r3, #1
 8005f1a:	2300      	moveq	r3, #0
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	e008      	b.n	8005f32 <HAL_TIM_PWM_Start+0x6a>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	bf14      	ite	ne
 8005f2c:	2301      	movne	r3, #1
 8005f2e:	2300      	moveq	r3, #0
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d001      	beq.n	8005f3a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e07c      	b.n	8006034 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d104      	bne.n	8005f4a <HAL_TIM_PWM_Start+0x82>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2202      	movs	r2, #2
 8005f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f48:	e013      	b.n	8005f72 <HAL_TIM_PWM_Start+0xaa>
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	2b04      	cmp	r3, #4
 8005f4e:	d104      	bne.n	8005f5a <HAL_TIM_PWM_Start+0x92>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2202      	movs	r2, #2
 8005f54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f58:	e00b      	b.n	8005f72 <HAL_TIM_PWM_Start+0xaa>
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	2b08      	cmp	r3, #8
 8005f5e:	d104      	bne.n	8005f6a <HAL_TIM_PWM_Start+0xa2>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2202      	movs	r2, #2
 8005f64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f68:	e003      	b.n	8005f72 <HAL_TIM_PWM_Start+0xaa>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2202      	movs	r2, #2
 8005f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2201      	movs	r2, #1
 8005f78:	6839      	ldr	r1, [r7, #0]
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f000 fcec 	bl	8006958 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a2d      	ldr	r2, [pc, #180]	@ (800603c <HAL_TIM_PWM_Start+0x174>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d004      	beq.n	8005f94 <HAL_TIM_PWM_Start+0xcc>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a2c      	ldr	r2, [pc, #176]	@ (8006040 <HAL_TIM_PWM_Start+0x178>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d101      	bne.n	8005f98 <HAL_TIM_PWM_Start+0xd0>
 8005f94:	2301      	movs	r3, #1
 8005f96:	e000      	b.n	8005f9a <HAL_TIM_PWM_Start+0xd2>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d007      	beq.n	8005fae <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005fac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a22      	ldr	r2, [pc, #136]	@ (800603c <HAL_TIM_PWM_Start+0x174>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d022      	beq.n	8005ffe <HAL_TIM_PWM_Start+0x136>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fc0:	d01d      	beq.n	8005ffe <HAL_TIM_PWM_Start+0x136>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a1f      	ldr	r2, [pc, #124]	@ (8006044 <HAL_TIM_PWM_Start+0x17c>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d018      	beq.n	8005ffe <HAL_TIM_PWM_Start+0x136>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a1d      	ldr	r2, [pc, #116]	@ (8006048 <HAL_TIM_PWM_Start+0x180>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d013      	beq.n	8005ffe <HAL_TIM_PWM_Start+0x136>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a1c      	ldr	r2, [pc, #112]	@ (800604c <HAL_TIM_PWM_Start+0x184>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d00e      	beq.n	8005ffe <HAL_TIM_PWM_Start+0x136>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a16      	ldr	r2, [pc, #88]	@ (8006040 <HAL_TIM_PWM_Start+0x178>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d009      	beq.n	8005ffe <HAL_TIM_PWM_Start+0x136>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a18      	ldr	r2, [pc, #96]	@ (8006050 <HAL_TIM_PWM_Start+0x188>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d004      	beq.n	8005ffe <HAL_TIM_PWM_Start+0x136>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a16      	ldr	r2, [pc, #88]	@ (8006054 <HAL_TIM_PWM_Start+0x18c>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d111      	bne.n	8006022 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f003 0307 	and.w	r3, r3, #7
 8006008:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2b06      	cmp	r3, #6
 800600e:	d010      	beq.n	8006032 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f042 0201 	orr.w	r2, r2, #1
 800601e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006020:	e007      	b.n	8006032 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f042 0201 	orr.w	r2, r2, #1
 8006030:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	40010000 	.word	0x40010000
 8006040:	40010400 	.word	0x40010400
 8006044:	40000400 	.word	0x40000400
 8006048:	40000800 	.word	0x40000800
 800604c:	40000c00 	.word	0x40000c00
 8006050:	40014000 	.word	0x40014000
 8006054:	40001800 	.word	0x40001800

08006058 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006064:	2300      	movs	r3, #0
 8006066:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800606e:	2b01      	cmp	r3, #1
 8006070:	d101      	bne.n	8006076 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006072:	2302      	movs	r3, #2
 8006074:	e0ae      	b.n	80061d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b0c      	cmp	r3, #12
 8006082:	f200 809f 	bhi.w	80061c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006086:	a201      	add	r2, pc, #4	@ (adr r2, 800608c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800608c:	080060c1 	.word	0x080060c1
 8006090:	080061c5 	.word	0x080061c5
 8006094:	080061c5 	.word	0x080061c5
 8006098:	080061c5 	.word	0x080061c5
 800609c:	08006101 	.word	0x08006101
 80060a0:	080061c5 	.word	0x080061c5
 80060a4:	080061c5 	.word	0x080061c5
 80060a8:	080061c5 	.word	0x080061c5
 80060ac:	08006143 	.word	0x08006143
 80060b0:	080061c5 	.word	0x080061c5
 80060b4:	080061c5 	.word	0x080061c5
 80060b8:	080061c5 	.word	0x080061c5
 80060bc:	08006183 	.word	0x08006183
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68b9      	ldr	r1, [r7, #8]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f000 f9fc 	bl	80064c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	699a      	ldr	r2, [r3, #24]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f042 0208 	orr.w	r2, r2, #8
 80060da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	699a      	ldr	r2, [r3, #24]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f022 0204 	bic.w	r2, r2, #4
 80060ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6999      	ldr	r1, [r3, #24]
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	691a      	ldr	r2, [r3, #16]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	430a      	orrs	r2, r1
 80060fc:	619a      	str	r2, [r3, #24]
      break;
 80060fe:	e064      	b.n	80061ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68b9      	ldr	r1, [r7, #8]
 8006106:	4618      	mov	r0, r3
 8006108:	f000 fa4c 	bl	80065a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	699a      	ldr	r2, [r3, #24]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800611a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	699a      	ldr	r2, [r3, #24]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800612a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6999      	ldr	r1, [r3, #24]
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	021a      	lsls	r2, r3, #8
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	430a      	orrs	r2, r1
 800613e:	619a      	str	r2, [r3, #24]
      break;
 8006140:	e043      	b.n	80061ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68b9      	ldr	r1, [r7, #8]
 8006148:	4618      	mov	r0, r3
 800614a:	f000 faa1 	bl	8006690 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	69da      	ldr	r2, [r3, #28]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f042 0208 	orr.w	r2, r2, #8
 800615c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	69da      	ldr	r2, [r3, #28]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f022 0204 	bic.w	r2, r2, #4
 800616c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	69d9      	ldr	r1, [r3, #28]
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	691a      	ldr	r2, [r3, #16]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	430a      	orrs	r2, r1
 800617e:	61da      	str	r2, [r3, #28]
      break;
 8006180:	e023      	b.n	80061ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68b9      	ldr	r1, [r7, #8]
 8006188:	4618      	mov	r0, r3
 800618a:	f000 faf5 	bl	8006778 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	69da      	ldr	r2, [r3, #28]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800619c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	69da      	ldr	r2, [r3, #28]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	69d9      	ldr	r1, [r3, #28]
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	021a      	lsls	r2, r3, #8
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	430a      	orrs	r2, r1
 80061c0:	61da      	str	r2, [r3, #28]
      break;
 80061c2:	e002      	b.n	80061ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	75fb      	strb	r3, [r7, #23]
      break;
 80061c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80061d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3718      	adds	r7, #24
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061e6:	2300      	movs	r3, #0
 80061e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d101      	bne.n	80061f8 <HAL_TIM_ConfigClockSource+0x1c>
 80061f4:	2302      	movs	r3, #2
 80061f6:	e0b4      	b.n	8006362 <HAL_TIM_ConfigClockSource+0x186>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2202      	movs	r2, #2
 8006204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006216:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800621e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68ba      	ldr	r2, [r7, #8]
 8006226:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006230:	d03e      	beq.n	80062b0 <HAL_TIM_ConfigClockSource+0xd4>
 8006232:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006236:	f200 8087 	bhi.w	8006348 <HAL_TIM_ConfigClockSource+0x16c>
 800623a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800623e:	f000 8086 	beq.w	800634e <HAL_TIM_ConfigClockSource+0x172>
 8006242:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006246:	d87f      	bhi.n	8006348 <HAL_TIM_ConfigClockSource+0x16c>
 8006248:	2b70      	cmp	r3, #112	@ 0x70
 800624a:	d01a      	beq.n	8006282 <HAL_TIM_ConfigClockSource+0xa6>
 800624c:	2b70      	cmp	r3, #112	@ 0x70
 800624e:	d87b      	bhi.n	8006348 <HAL_TIM_ConfigClockSource+0x16c>
 8006250:	2b60      	cmp	r3, #96	@ 0x60
 8006252:	d050      	beq.n	80062f6 <HAL_TIM_ConfigClockSource+0x11a>
 8006254:	2b60      	cmp	r3, #96	@ 0x60
 8006256:	d877      	bhi.n	8006348 <HAL_TIM_ConfigClockSource+0x16c>
 8006258:	2b50      	cmp	r3, #80	@ 0x50
 800625a:	d03c      	beq.n	80062d6 <HAL_TIM_ConfigClockSource+0xfa>
 800625c:	2b50      	cmp	r3, #80	@ 0x50
 800625e:	d873      	bhi.n	8006348 <HAL_TIM_ConfigClockSource+0x16c>
 8006260:	2b40      	cmp	r3, #64	@ 0x40
 8006262:	d058      	beq.n	8006316 <HAL_TIM_ConfigClockSource+0x13a>
 8006264:	2b40      	cmp	r3, #64	@ 0x40
 8006266:	d86f      	bhi.n	8006348 <HAL_TIM_ConfigClockSource+0x16c>
 8006268:	2b30      	cmp	r3, #48	@ 0x30
 800626a:	d064      	beq.n	8006336 <HAL_TIM_ConfigClockSource+0x15a>
 800626c:	2b30      	cmp	r3, #48	@ 0x30
 800626e:	d86b      	bhi.n	8006348 <HAL_TIM_ConfigClockSource+0x16c>
 8006270:	2b20      	cmp	r3, #32
 8006272:	d060      	beq.n	8006336 <HAL_TIM_ConfigClockSource+0x15a>
 8006274:	2b20      	cmp	r3, #32
 8006276:	d867      	bhi.n	8006348 <HAL_TIM_ConfigClockSource+0x16c>
 8006278:	2b00      	cmp	r3, #0
 800627a:	d05c      	beq.n	8006336 <HAL_TIM_ConfigClockSource+0x15a>
 800627c:	2b10      	cmp	r3, #16
 800627e:	d05a      	beq.n	8006336 <HAL_TIM_ConfigClockSource+0x15a>
 8006280:	e062      	b.n	8006348 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006292:	f000 fb41 	bl	8006918 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80062a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	609a      	str	r2, [r3, #8]
      break;
 80062ae:	e04f      	b.n	8006350 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062c0:	f000 fb2a 	bl	8006918 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689a      	ldr	r2, [r3, #8]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80062d2:	609a      	str	r2, [r3, #8]
      break;
 80062d4:	e03c      	b.n	8006350 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062e2:	461a      	mov	r2, r3
 80062e4:	f000 fa9e 	bl	8006824 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2150      	movs	r1, #80	@ 0x50
 80062ee:	4618      	mov	r0, r3
 80062f0:	f000 faf7 	bl	80068e2 <TIM_ITRx_SetConfig>
      break;
 80062f4:	e02c      	b.n	8006350 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006302:	461a      	mov	r2, r3
 8006304:	f000 fabd 	bl	8006882 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2160      	movs	r1, #96	@ 0x60
 800630e:	4618      	mov	r0, r3
 8006310:	f000 fae7 	bl	80068e2 <TIM_ITRx_SetConfig>
      break;
 8006314:	e01c      	b.n	8006350 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006322:	461a      	mov	r2, r3
 8006324:	f000 fa7e 	bl	8006824 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2140      	movs	r1, #64	@ 0x40
 800632e:	4618      	mov	r0, r3
 8006330:	f000 fad7 	bl	80068e2 <TIM_ITRx_SetConfig>
      break;
 8006334:	e00c      	b.n	8006350 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4619      	mov	r1, r3
 8006340:	4610      	mov	r0, r2
 8006342:	f000 face 	bl	80068e2 <TIM_ITRx_SetConfig>
      break;
 8006346:	e003      	b.n	8006350 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	73fb      	strb	r3, [r7, #15]
      break;
 800634c:	e000      	b.n	8006350 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800634e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006360:	7bfb      	ldrb	r3, [r7, #15]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
	...

0800636c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a46      	ldr	r2, [pc, #280]	@ (8006498 <TIM_Base_SetConfig+0x12c>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d013      	beq.n	80063ac <TIM_Base_SetConfig+0x40>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800638a:	d00f      	beq.n	80063ac <TIM_Base_SetConfig+0x40>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a43      	ldr	r2, [pc, #268]	@ (800649c <TIM_Base_SetConfig+0x130>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d00b      	beq.n	80063ac <TIM_Base_SetConfig+0x40>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a42      	ldr	r2, [pc, #264]	@ (80064a0 <TIM_Base_SetConfig+0x134>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d007      	beq.n	80063ac <TIM_Base_SetConfig+0x40>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a41      	ldr	r2, [pc, #260]	@ (80064a4 <TIM_Base_SetConfig+0x138>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d003      	beq.n	80063ac <TIM_Base_SetConfig+0x40>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a40      	ldr	r2, [pc, #256]	@ (80064a8 <TIM_Base_SetConfig+0x13c>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d108      	bne.n	80063be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a35      	ldr	r2, [pc, #212]	@ (8006498 <TIM_Base_SetConfig+0x12c>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d02b      	beq.n	800641e <TIM_Base_SetConfig+0xb2>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063cc:	d027      	beq.n	800641e <TIM_Base_SetConfig+0xb2>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a32      	ldr	r2, [pc, #200]	@ (800649c <TIM_Base_SetConfig+0x130>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d023      	beq.n	800641e <TIM_Base_SetConfig+0xb2>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a31      	ldr	r2, [pc, #196]	@ (80064a0 <TIM_Base_SetConfig+0x134>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d01f      	beq.n	800641e <TIM_Base_SetConfig+0xb2>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a30      	ldr	r2, [pc, #192]	@ (80064a4 <TIM_Base_SetConfig+0x138>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d01b      	beq.n	800641e <TIM_Base_SetConfig+0xb2>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a2f      	ldr	r2, [pc, #188]	@ (80064a8 <TIM_Base_SetConfig+0x13c>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d017      	beq.n	800641e <TIM_Base_SetConfig+0xb2>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a2e      	ldr	r2, [pc, #184]	@ (80064ac <TIM_Base_SetConfig+0x140>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d013      	beq.n	800641e <TIM_Base_SetConfig+0xb2>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a2d      	ldr	r2, [pc, #180]	@ (80064b0 <TIM_Base_SetConfig+0x144>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d00f      	beq.n	800641e <TIM_Base_SetConfig+0xb2>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a2c      	ldr	r2, [pc, #176]	@ (80064b4 <TIM_Base_SetConfig+0x148>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d00b      	beq.n	800641e <TIM_Base_SetConfig+0xb2>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a2b      	ldr	r2, [pc, #172]	@ (80064b8 <TIM_Base_SetConfig+0x14c>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d007      	beq.n	800641e <TIM_Base_SetConfig+0xb2>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a2a      	ldr	r2, [pc, #168]	@ (80064bc <TIM_Base_SetConfig+0x150>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d003      	beq.n	800641e <TIM_Base_SetConfig+0xb2>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a29      	ldr	r2, [pc, #164]	@ (80064c0 <TIM_Base_SetConfig+0x154>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d108      	bne.n	8006430 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006424:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	4313      	orrs	r3, r2
 800642e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	4313      	orrs	r3, r2
 800643c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	689a      	ldr	r2, [r3, #8]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a10      	ldr	r2, [pc, #64]	@ (8006498 <TIM_Base_SetConfig+0x12c>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d003      	beq.n	8006464 <TIM_Base_SetConfig+0xf8>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a12      	ldr	r2, [pc, #72]	@ (80064a8 <TIM_Base_SetConfig+0x13c>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d103      	bne.n	800646c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	691a      	ldr	r2, [r3, #16]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	f003 0301 	and.w	r3, r3, #1
 800647a:	2b01      	cmp	r3, #1
 800647c:	d105      	bne.n	800648a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	f023 0201 	bic.w	r2, r3, #1
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	611a      	str	r2, [r3, #16]
  }
}
 800648a:	bf00      	nop
 800648c:	3714      	adds	r7, #20
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	40010000 	.word	0x40010000
 800649c:	40000400 	.word	0x40000400
 80064a0:	40000800 	.word	0x40000800
 80064a4:	40000c00 	.word	0x40000c00
 80064a8:	40010400 	.word	0x40010400
 80064ac:	40014000 	.word	0x40014000
 80064b0:	40014400 	.word	0x40014400
 80064b4:	40014800 	.word	0x40014800
 80064b8:	40001800 	.word	0x40001800
 80064bc:	40001c00 	.word	0x40001c00
 80064c0:	40002000 	.word	0x40002000

080064c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b087      	sub	sp, #28
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a1b      	ldr	r3, [r3, #32]
 80064d8:	f023 0201 	bic.w	r2, r3, #1
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f023 0303 	bic.w	r3, r3, #3
 80064fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	4313      	orrs	r3, r2
 8006504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	f023 0302 	bic.w	r3, r3, #2
 800650c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	4313      	orrs	r3, r2
 8006516:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a20      	ldr	r2, [pc, #128]	@ (800659c <TIM_OC1_SetConfig+0xd8>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d003      	beq.n	8006528 <TIM_OC1_SetConfig+0x64>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a1f      	ldr	r2, [pc, #124]	@ (80065a0 <TIM_OC1_SetConfig+0xdc>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d10c      	bne.n	8006542 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	f023 0308 	bic.w	r3, r3, #8
 800652e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	4313      	orrs	r3, r2
 8006538:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	f023 0304 	bic.w	r3, r3, #4
 8006540:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a15      	ldr	r2, [pc, #84]	@ (800659c <TIM_OC1_SetConfig+0xd8>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d003      	beq.n	8006552 <TIM_OC1_SetConfig+0x8e>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a14      	ldr	r2, [pc, #80]	@ (80065a0 <TIM_OC1_SetConfig+0xdc>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d111      	bne.n	8006576 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006558:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006560:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	4313      	orrs	r3, r2
 800656a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	4313      	orrs	r3, r2
 8006574:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	693a      	ldr	r2, [r7, #16]
 800657a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	621a      	str	r2, [r3, #32]
}
 8006590:	bf00      	nop
 8006592:	371c      	adds	r7, #28
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr
 800659c:	40010000 	.word	0x40010000
 80065a0:	40010400 	.word	0x40010400

080065a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b087      	sub	sp, #28
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a1b      	ldr	r3, [r3, #32]
 80065b8:	f023 0210 	bic.w	r2, r3, #16
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	021b      	lsls	r3, r3, #8
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	f023 0320 	bic.w	r3, r3, #32
 80065ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	011b      	lsls	r3, r3, #4
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a22      	ldr	r2, [pc, #136]	@ (8006688 <TIM_OC2_SetConfig+0xe4>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d003      	beq.n	800660c <TIM_OC2_SetConfig+0x68>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a21      	ldr	r2, [pc, #132]	@ (800668c <TIM_OC2_SetConfig+0xe8>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d10d      	bne.n	8006628 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006612:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	011b      	lsls	r3, r3, #4
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	4313      	orrs	r3, r2
 800661e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006626:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4a17      	ldr	r2, [pc, #92]	@ (8006688 <TIM_OC2_SetConfig+0xe4>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d003      	beq.n	8006638 <TIM_OC2_SetConfig+0x94>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a16      	ldr	r2, [pc, #88]	@ (800668c <TIM_OC2_SetConfig+0xe8>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d113      	bne.n	8006660 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800663e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006646:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	695b      	ldr	r3, [r3, #20]
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	693a      	ldr	r2, [r7, #16]
 8006650:	4313      	orrs	r3, r2
 8006652:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	699b      	ldr	r3, [r3, #24]
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	693a      	ldr	r2, [r7, #16]
 800665c:	4313      	orrs	r3, r2
 800665e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	693a      	ldr	r2, [r7, #16]
 8006664:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	685a      	ldr	r2, [r3, #4]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	697a      	ldr	r2, [r7, #20]
 8006678:	621a      	str	r2, [r3, #32]
}
 800667a:	bf00      	nop
 800667c:	371c      	adds	r7, #28
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop
 8006688:	40010000 	.word	0x40010000
 800668c:	40010400 	.word	0x40010400

08006690 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006690:	b480      	push	{r7}
 8006692:	b087      	sub	sp, #28
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a1b      	ldr	r3, [r3, #32]
 80066a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f023 0303 	bic.w	r3, r3, #3
 80066c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80066d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	021b      	lsls	r3, r3, #8
 80066e0:	697a      	ldr	r2, [r7, #20]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a21      	ldr	r2, [pc, #132]	@ (8006770 <TIM_OC3_SetConfig+0xe0>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d003      	beq.n	80066f6 <TIM_OC3_SetConfig+0x66>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a20      	ldr	r2, [pc, #128]	@ (8006774 <TIM_OC3_SetConfig+0xe4>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d10d      	bne.n	8006712 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	021b      	lsls	r3, r3, #8
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	4313      	orrs	r3, r2
 8006708:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006710:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a16      	ldr	r2, [pc, #88]	@ (8006770 <TIM_OC3_SetConfig+0xe0>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d003      	beq.n	8006722 <TIM_OC3_SetConfig+0x92>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a15      	ldr	r2, [pc, #84]	@ (8006774 <TIM_OC3_SetConfig+0xe4>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d113      	bne.n	800674a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006728:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006730:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	011b      	lsls	r3, r3, #4
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	4313      	orrs	r3, r2
 800673c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	011b      	lsls	r3, r3, #4
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	4313      	orrs	r3, r2
 8006748:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	685a      	ldr	r2, [r3, #4]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	621a      	str	r2, [r3, #32]
}
 8006764:	bf00      	nop
 8006766:	371c      	adds	r7, #28
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr
 8006770:	40010000 	.word	0x40010000
 8006774:	40010400 	.word	0x40010400

08006778 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006778:	b480      	push	{r7}
 800677a:	b087      	sub	sp, #28
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a1b      	ldr	r3, [r3, #32]
 800678c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	69db      	ldr	r3, [r3, #28]
 800679e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	021b      	lsls	r3, r3, #8
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	031b      	lsls	r3, r3, #12
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a12      	ldr	r2, [pc, #72]	@ (800681c <TIM_OC4_SetConfig+0xa4>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d003      	beq.n	80067e0 <TIM_OC4_SetConfig+0x68>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a11      	ldr	r2, [pc, #68]	@ (8006820 <TIM_OC4_SetConfig+0xa8>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d109      	bne.n	80067f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	019b      	lsls	r3, r3, #6
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	685a      	ldr	r2, [r3, #4]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	621a      	str	r2, [r3, #32]
}
 800680e:	bf00      	nop
 8006810:	371c      	adds	r7, #28
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	40010000 	.word	0x40010000
 8006820:	40010400 	.word	0x40010400

08006824 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006824:	b480      	push	{r7}
 8006826:	b087      	sub	sp, #28
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	f023 0201 	bic.w	r2, r3, #1
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800684e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	011b      	lsls	r3, r3, #4
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	4313      	orrs	r3, r2
 8006858:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f023 030a 	bic.w	r3, r3, #10
 8006860:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	4313      	orrs	r3, r2
 8006868:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	693a      	ldr	r2, [r7, #16]
 800686e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	621a      	str	r2, [r3, #32]
}
 8006876:	bf00      	nop
 8006878:	371c      	adds	r7, #28
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006882:	b480      	push	{r7}
 8006884:	b087      	sub	sp, #28
 8006886:	af00      	add	r7, sp, #0
 8006888:	60f8      	str	r0, [r7, #12]
 800688a:	60b9      	str	r1, [r7, #8]
 800688c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6a1b      	ldr	r3, [r3, #32]
 8006892:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6a1b      	ldr	r3, [r3, #32]
 8006898:	f023 0210 	bic.w	r2, r3, #16
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	699b      	ldr	r3, [r3, #24]
 80068a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80068ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	031b      	lsls	r3, r3, #12
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80068be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	011b      	lsls	r3, r3, #4
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	621a      	str	r2, [r3, #32]
}
 80068d6:	bf00      	nop
 80068d8:	371c      	adds	r7, #28
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr

080068e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068e2:	b480      	push	{r7}
 80068e4:	b085      	sub	sp, #20
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
 80068ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	4313      	orrs	r3, r2
 8006900:	f043 0307 	orr.w	r3, r3, #7
 8006904:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	609a      	str	r2, [r3, #8]
}
 800690c:	bf00      	nop
 800690e:	3714      	adds	r7, #20
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006918:	b480      	push	{r7}
 800691a:	b087      	sub	sp, #28
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	607a      	str	r2, [r7, #4]
 8006924:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006932:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	021a      	lsls	r2, r3, #8
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	431a      	orrs	r2, r3
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	4313      	orrs	r3, r2
 8006940:	697a      	ldr	r2, [r7, #20]
 8006942:	4313      	orrs	r3, r2
 8006944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	697a      	ldr	r2, [r7, #20]
 800694a:	609a      	str	r2, [r3, #8]
}
 800694c:	bf00      	nop
 800694e:	371c      	adds	r7, #28
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006958:	b480      	push	{r7}
 800695a:	b087      	sub	sp, #28
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	f003 031f 	and.w	r3, r3, #31
 800696a:	2201      	movs	r2, #1
 800696c:	fa02 f303 	lsl.w	r3, r2, r3
 8006970:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6a1a      	ldr	r2, [r3, #32]
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	43db      	mvns	r3, r3
 800697a:	401a      	ands	r2, r3
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6a1a      	ldr	r2, [r3, #32]
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	f003 031f 	and.w	r3, r3, #31
 800698a:	6879      	ldr	r1, [r7, #4]
 800698c:	fa01 f303 	lsl.w	r3, r1, r3
 8006990:	431a      	orrs	r2, r3
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	621a      	str	r2, [r3, #32]
}
 8006996:	bf00      	nop
 8006998:	371c      	adds	r7, #28
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
	...

080069a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d101      	bne.n	80069bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069b8:	2302      	movs	r3, #2
 80069ba:	e05a      	b.n	8006a72 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2202      	movs	r2, #2
 80069c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a21      	ldr	r2, [pc, #132]	@ (8006a80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d022      	beq.n	8006a46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a08:	d01d      	beq.n	8006a46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a1d      	ldr	r2, [pc, #116]	@ (8006a84 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d018      	beq.n	8006a46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a1b      	ldr	r2, [pc, #108]	@ (8006a88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d013      	beq.n	8006a46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a1a      	ldr	r2, [pc, #104]	@ (8006a8c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d00e      	beq.n	8006a46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a18      	ldr	r2, [pc, #96]	@ (8006a90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d009      	beq.n	8006a46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a17      	ldr	r2, [pc, #92]	@ (8006a94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d004      	beq.n	8006a46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a15      	ldr	r2, [pc, #84]	@ (8006a98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d10c      	bne.n	8006a60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68ba      	ldr	r2, [r7, #8]
 8006a5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3714      	adds	r7, #20
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	40010000 	.word	0x40010000
 8006a84:	40000400 	.word	0x40000400
 8006a88:	40000800 	.word	0x40000800
 8006a8c:	40000c00 	.word	0x40000c00
 8006a90:	40010400 	.word	0x40010400
 8006a94:	40014000 	.word	0x40014000
 8006a98:	40001800 	.word	0x40001800

08006a9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d101      	bne.n	8006ab8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	e03d      	b.n	8006b34 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	695b      	ldr	r3, [r3, #20]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3714      	adds	r7, #20
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <__cvt>:
 8006b40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b44:	ec57 6b10 	vmov	r6, r7, d0
 8006b48:	2f00      	cmp	r7, #0
 8006b4a:	460c      	mov	r4, r1
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	463b      	mov	r3, r7
 8006b50:	bfbb      	ittet	lt
 8006b52:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006b56:	461f      	movlt	r7, r3
 8006b58:	2300      	movge	r3, #0
 8006b5a:	232d      	movlt	r3, #45	@ 0x2d
 8006b5c:	700b      	strb	r3, [r1, #0]
 8006b5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b60:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006b64:	4691      	mov	r9, r2
 8006b66:	f023 0820 	bic.w	r8, r3, #32
 8006b6a:	bfbc      	itt	lt
 8006b6c:	4632      	movlt	r2, r6
 8006b6e:	4616      	movlt	r6, r2
 8006b70:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006b74:	d005      	beq.n	8006b82 <__cvt+0x42>
 8006b76:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006b7a:	d100      	bne.n	8006b7e <__cvt+0x3e>
 8006b7c:	3401      	adds	r4, #1
 8006b7e:	2102      	movs	r1, #2
 8006b80:	e000      	b.n	8006b84 <__cvt+0x44>
 8006b82:	2103      	movs	r1, #3
 8006b84:	ab03      	add	r3, sp, #12
 8006b86:	9301      	str	r3, [sp, #4]
 8006b88:	ab02      	add	r3, sp, #8
 8006b8a:	9300      	str	r3, [sp, #0]
 8006b8c:	ec47 6b10 	vmov	d0, r6, r7
 8006b90:	4653      	mov	r3, sl
 8006b92:	4622      	mov	r2, r4
 8006b94:	f001 f874 	bl	8007c80 <_dtoa_r>
 8006b98:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006b9c:	4605      	mov	r5, r0
 8006b9e:	d119      	bne.n	8006bd4 <__cvt+0x94>
 8006ba0:	f019 0f01 	tst.w	r9, #1
 8006ba4:	d00e      	beq.n	8006bc4 <__cvt+0x84>
 8006ba6:	eb00 0904 	add.w	r9, r0, r4
 8006baa:	2200      	movs	r2, #0
 8006bac:	2300      	movs	r3, #0
 8006bae:	4630      	mov	r0, r6
 8006bb0:	4639      	mov	r1, r7
 8006bb2:	f7f9 ff89 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bb6:	b108      	cbz	r0, 8006bbc <__cvt+0x7c>
 8006bb8:	f8cd 900c 	str.w	r9, [sp, #12]
 8006bbc:	2230      	movs	r2, #48	@ 0x30
 8006bbe:	9b03      	ldr	r3, [sp, #12]
 8006bc0:	454b      	cmp	r3, r9
 8006bc2:	d31e      	bcc.n	8006c02 <__cvt+0xc2>
 8006bc4:	9b03      	ldr	r3, [sp, #12]
 8006bc6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006bc8:	1b5b      	subs	r3, r3, r5
 8006bca:	4628      	mov	r0, r5
 8006bcc:	6013      	str	r3, [r2, #0]
 8006bce:	b004      	add	sp, #16
 8006bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bd4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006bd8:	eb00 0904 	add.w	r9, r0, r4
 8006bdc:	d1e5      	bne.n	8006baa <__cvt+0x6a>
 8006bde:	7803      	ldrb	r3, [r0, #0]
 8006be0:	2b30      	cmp	r3, #48	@ 0x30
 8006be2:	d10a      	bne.n	8006bfa <__cvt+0xba>
 8006be4:	2200      	movs	r2, #0
 8006be6:	2300      	movs	r3, #0
 8006be8:	4630      	mov	r0, r6
 8006bea:	4639      	mov	r1, r7
 8006bec:	f7f9 ff6c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bf0:	b918      	cbnz	r0, 8006bfa <__cvt+0xba>
 8006bf2:	f1c4 0401 	rsb	r4, r4, #1
 8006bf6:	f8ca 4000 	str.w	r4, [sl]
 8006bfa:	f8da 3000 	ldr.w	r3, [sl]
 8006bfe:	4499      	add	r9, r3
 8006c00:	e7d3      	b.n	8006baa <__cvt+0x6a>
 8006c02:	1c59      	adds	r1, r3, #1
 8006c04:	9103      	str	r1, [sp, #12]
 8006c06:	701a      	strb	r2, [r3, #0]
 8006c08:	e7d9      	b.n	8006bbe <__cvt+0x7e>

08006c0a <__exponent>:
 8006c0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c0c:	2900      	cmp	r1, #0
 8006c0e:	bfba      	itte	lt
 8006c10:	4249      	neglt	r1, r1
 8006c12:	232d      	movlt	r3, #45	@ 0x2d
 8006c14:	232b      	movge	r3, #43	@ 0x2b
 8006c16:	2909      	cmp	r1, #9
 8006c18:	7002      	strb	r2, [r0, #0]
 8006c1a:	7043      	strb	r3, [r0, #1]
 8006c1c:	dd29      	ble.n	8006c72 <__exponent+0x68>
 8006c1e:	f10d 0307 	add.w	r3, sp, #7
 8006c22:	461d      	mov	r5, r3
 8006c24:	270a      	movs	r7, #10
 8006c26:	461a      	mov	r2, r3
 8006c28:	fbb1 f6f7 	udiv	r6, r1, r7
 8006c2c:	fb07 1416 	mls	r4, r7, r6, r1
 8006c30:	3430      	adds	r4, #48	@ 0x30
 8006c32:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006c36:	460c      	mov	r4, r1
 8006c38:	2c63      	cmp	r4, #99	@ 0x63
 8006c3a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006c3e:	4631      	mov	r1, r6
 8006c40:	dcf1      	bgt.n	8006c26 <__exponent+0x1c>
 8006c42:	3130      	adds	r1, #48	@ 0x30
 8006c44:	1e94      	subs	r4, r2, #2
 8006c46:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006c4a:	1c41      	adds	r1, r0, #1
 8006c4c:	4623      	mov	r3, r4
 8006c4e:	42ab      	cmp	r3, r5
 8006c50:	d30a      	bcc.n	8006c68 <__exponent+0x5e>
 8006c52:	f10d 0309 	add.w	r3, sp, #9
 8006c56:	1a9b      	subs	r3, r3, r2
 8006c58:	42ac      	cmp	r4, r5
 8006c5a:	bf88      	it	hi
 8006c5c:	2300      	movhi	r3, #0
 8006c5e:	3302      	adds	r3, #2
 8006c60:	4403      	add	r3, r0
 8006c62:	1a18      	subs	r0, r3, r0
 8006c64:	b003      	add	sp, #12
 8006c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c68:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006c6c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006c70:	e7ed      	b.n	8006c4e <__exponent+0x44>
 8006c72:	2330      	movs	r3, #48	@ 0x30
 8006c74:	3130      	adds	r1, #48	@ 0x30
 8006c76:	7083      	strb	r3, [r0, #2]
 8006c78:	70c1      	strb	r1, [r0, #3]
 8006c7a:	1d03      	adds	r3, r0, #4
 8006c7c:	e7f1      	b.n	8006c62 <__exponent+0x58>
	...

08006c80 <_printf_float>:
 8006c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c84:	b08d      	sub	sp, #52	@ 0x34
 8006c86:	460c      	mov	r4, r1
 8006c88:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006c8c:	4616      	mov	r6, r2
 8006c8e:	461f      	mov	r7, r3
 8006c90:	4605      	mov	r5, r0
 8006c92:	f000 feef 	bl	8007a74 <_localeconv_r>
 8006c96:	6803      	ldr	r3, [r0, #0]
 8006c98:	9304      	str	r3, [sp, #16]
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7f9 fae8 	bl	8000270 <strlen>
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ca4:	f8d8 3000 	ldr.w	r3, [r8]
 8006ca8:	9005      	str	r0, [sp, #20]
 8006caa:	3307      	adds	r3, #7
 8006cac:	f023 0307 	bic.w	r3, r3, #7
 8006cb0:	f103 0208 	add.w	r2, r3, #8
 8006cb4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006cb8:	f8d4 b000 	ldr.w	fp, [r4]
 8006cbc:	f8c8 2000 	str.w	r2, [r8]
 8006cc0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006cc4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006cc8:	9307      	str	r3, [sp, #28]
 8006cca:	f8cd 8018 	str.w	r8, [sp, #24]
 8006cce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006cd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006cd6:	4b9c      	ldr	r3, [pc, #624]	@ (8006f48 <_printf_float+0x2c8>)
 8006cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8006cdc:	f7f9 ff26 	bl	8000b2c <__aeabi_dcmpun>
 8006ce0:	bb70      	cbnz	r0, 8006d40 <_printf_float+0xc0>
 8006ce2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ce6:	4b98      	ldr	r3, [pc, #608]	@ (8006f48 <_printf_float+0x2c8>)
 8006ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8006cec:	f7f9 ff00 	bl	8000af0 <__aeabi_dcmple>
 8006cf0:	bb30      	cbnz	r0, 8006d40 <_printf_float+0xc0>
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	4640      	mov	r0, r8
 8006cf8:	4649      	mov	r1, r9
 8006cfa:	f7f9 feef 	bl	8000adc <__aeabi_dcmplt>
 8006cfe:	b110      	cbz	r0, 8006d06 <_printf_float+0x86>
 8006d00:	232d      	movs	r3, #45	@ 0x2d
 8006d02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d06:	4a91      	ldr	r2, [pc, #580]	@ (8006f4c <_printf_float+0x2cc>)
 8006d08:	4b91      	ldr	r3, [pc, #580]	@ (8006f50 <_printf_float+0x2d0>)
 8006d0a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006d0e:	bf94      	ite	ls
 8006d10:	4690      	movls	r8, r2
 8006d12:	4698      	movhi	r8, r3
 8006d14:	2303      	movs	r3, #3
 8006d16:	6123      	str	r3, [r4, #16]
 8006d18:	f02b 0304 	bic.w	r3, fp, #4
 8006d1c:	6023      	str	r3, [r4, #0]
 8006d1e:	f04f 0900 	mov.w	r9, #0
 8006d22:	9700      	str	r7, [sp, #0]
 8006d24:	4633      	mov	r3, r6
 8006d26:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006d28:	4621      	mov	r1, r4
 8006d2a:	4628      	mov	r0, r5
 8006d2c:	f000 f9d2 	bl	80070d4 <_printf_common>
 8006d30:	3001      	adds	r0, #1
 8006d32:	f040 808d 	bne.w	8006e50 <_printf_float+0x1d0>
 8006d36:	f04f 30ff 	mov.w	r0, #4294967295
 8006d3a:	b00d      	add	sp, #52	@ 0x34
 8006d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d40:	4642      	mov	r2, r8
 8006d42:	464b      	mov	r3, r9
 8006d44:	4640      	mov	r0, r8
 8006d46:	4649      	mov	r1, r9
 8006d48:	f7f9 fef0 	bl	8000b2c <__aeabi_dcmpun>
 8006d4c:	b140      	cbz	r0, 8006d60 <_printf_float+0xe0>
 8006d4e:	464b      	mov	r3, r9
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	bfbc      	itt	lt
 8006d54:	232d      	movlt	r3, #45	@ 0x2d
 8006d56:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006d5a:	4a7e      	ldr	r2, [pc, #504]	@ (8006f54 <_printf_float+0x2d4>)
 8006d5c:	4b7e      	ldr	r3, [pc, #504]	@ (8006f58 <_printf_float+0x2d8>)
 8006d5e:	e7d4      	b.n	8006d0a <_printf_float+0x8a>
 8006d60:	6863      	ldr	r3, [r4, #4]
 8006d62:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006d66:	9206      	str	r2, [sp, #24]
 8006d68:	1c5a      	adds	r2, r3, #1
 8006d6a:	d13b      	bne.n	8006de4 <_printf_float+0x164>
 8006d6c:	2306      	movs	r3, #6
 8006d6e:	6063      	str	r3, [r4, #4]
 8006d70:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006d74:	2300      	movs	r3, #0
 8006d76:	6022      	str	r2, [r4, #0]
 8006d78:	9303      	str	r3, [sp, #12]
 8006d7a:	ab0a      	add	r3, sp, #40	@ 0x28
 8006d7c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006d80:	ab09      	add	r3, sp, #36	@ 0x24
 8006d82:	9300      	str	r3, [sp, #0]
 8006d84:	6861      	ldr	r1, [r4, #4]
 8006d86:	ec49 8b10 	vmov	d0, r8, r9
 8006d8a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006d8e:	4628      	mov	r0, r5
 8006d90:	f7ff fed6 	bl	8006b40 <__cvt>
 8006d94:	9b06      	ldr	r3, [sp, #24]
 8006d96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006d98:	2b47      	cmp	r3, #71	@ 0x47
 8006d9a:	4680      	mov	r8, r0
 8006d9c:	d129      	bne.n	8006df2 <_printf_float+0x172>
 8006d9e:	1cc8      	adds	r0, r1, #3
 8006da0:	db02      	blt.n	8006da8 <_printf_float+0x128>
 8006da2:	6863      	ldr	r3, [r4, #4]
 8006da4:	4299      	cmp	r1, r3
 8006da6:	dd41      	ble.n	8006e2c <_printf_float+0x1ac>
 8006da8:	f1aa 0a02 	sub.w	sl, sl, #2
 8006dac:	fa5f fa8a 	uxtb.w	sl, sl
 8006db0:	3901      	subs	r1, #1
 8006db2:	4652      	mov	r2, sl
 8006db4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006db8:	9109      	str	r1, [sp, #36]	@ 0x24
 8006dba:	f7ff ff26 	bl	8006c0a <__exponent>
 8006dbe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006dc0:	1813      	adds	r3, r2, r0
 8006dc2:	2a01      	cmp	r2, #1
 8006dc4:	4681      	mov	r9, r0
 8006dc6:	6123      	str	r3, [r4, #16]
 8006dc8:	dc02      	bgt.n	8006dd0 <_printf_float+0x150>
 8006dca:	6822      	ldr	r2, [r4, #0]
 8006dcc:	07d2      	lsls	r2, r2, #31
 8006dce:	d501      	bpl.n	8006dd4 <_printf_float+0x154>
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	6123      	str	r3, [r4, #16]
 8006dd4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d0a2      	beq.n	8006d22 <_printf_float+0xa2>
 8006ddc:	232d      	movs	r3, #45	@ 0x2d
 8006dde:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006de2:	e79e      	b.n	8006d22 <_printf_float+0xa2>
 8006de4:	9a06      	ldr	r2, [sp, #24]
 8006de6:	2a47      	cmp	r2, #71	@ 0x47
 8006de8:	d1c2      	bne.n	8006d70 <_printf_float+0xf0>
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1c0      	bne.n	8006d70 <_printf_float+0xf0>
 8006dee:	2301      	movs	r3, #1
 8006df0:	e7bd      	b.n	8006d6e <_printf_float+0xee>
 8006df2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006df6:	d9db      	bls.n	8006db0 <_printf_float+0x130>
 8006df8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006dfc:	d118      	bne.n	8006e30 <_printf_float+0x1b0>
 8006dfe:	2900      	cmp	r1, #0
 8006e00:	6863      	ldr	r3, [r4, #4]
 8006e02:	dd0b      	ble.n	8006e1c <_printf_float+0x19c>
 8006e04:	6121      	str	r1, [r4, #16]
 8006e06:	b913      	cbnz	r3, 8006e0e <_printf_float+0x18e>
 8006e08:	6822      	ldr	r2, [r4, #0]
 8006e0a:	07d0      	lsls	r0, r2, #31
 8006e0c:	d502      	bpl.n	8006e14 <_printf_float+0x194>
 8006e0e:	3301      	adds	r3, #1
 8006e10:	440b      	add	r3, r1
 8006e12:	6123      	str	r3, [r4, #16]
 8006e14:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006e16:	f04f 0900 	mov.w	r9, #0
 8006e1a:	e7db      	b.n	8006dd4 <_printf_float+0x154>
 8006e1c:	b913      	cbnz	r3, 8006e24 <_printf_float+0x1a4>
 8006e1e:	6822      	ldr	r2, [r4, #0]
 8006e20:	07d2      	lsls	r2, r2, #31
 8006e22:	d501      	bpl.n	8006e28 <_printf_float+0x1a8>
 8006e24:	3302      	adds	r3, #2
 8006e26:	e7f4      	b.n	8006e12 <_printf_float+0x192>
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e7f2      	b.n	8006e12 <_printf_float+0x192>
 8006e2c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006e30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e32:	4299      	cmp	r1, r3
 8006e34:	db05      	blt.n	8006e42 <_printf_float+0x1c2>
 8006e36:	6823      	ldr	r3, [r4, #0]
 8006e38:	6121      	str	r1, [r4, #16]
 8006e3a:	07d8      	lsls	r0, r3, #31
 8006e3c:	d5ea      	bpl.n	8006e14 <_printf_float+0x194>
 8006e3e:	1c4b      	adds	r3, r1, #1
 8006e40:	e7e7      	b.n	8006e12 <_printf_float+0x192>
 8006e42:	2900      	cmp	r1, #0
 8006e44:	bfd4      	ite	le
 8006e46:	f1c1 0202 	rsble	r2, r1, #2
 8006e4a:	2201      	movgt	r2, #1
 8006e4c:	4413      	add	r3, r2
 8006e4e:	e7e0      	b.n	8006e12 <_printf_float+0x192>
 8006e50:	6823      	ldr	r3, [r4, #0]
 8006e52:	055a      	lsls	r2, r3, #21
 8006e54:	d407      	bmi.n	8006e66 <_printf_float+0x1e6>
 8006e56:	6923      	ldr	r3, [r4, #16]
 8006e58:	4642      	mov	r2, r8
 8006e5a:	4631      	mov	r1, r6
 8006e5c:	4628      	mov	r0, r5
 8006e5e:	47b8      	blx	r7
 8006e60:	3001      	adds	r0, #1
 8006e62:	d12b      	bne.n	8006ebc <_printf_float+0x23c>
 8006e64:	e767      	b.n	8006d36 <_printf_float+0xb6>
 8006e66:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006e6a:	f240 80dd 	bls.w	8007028 <_printf_float+0x3a8>
 8006e6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006e72:	2200      	movs	r2, #0
 8006e74:	2300      	movs	r3, #0
 8006e76:	f7f9 fe27 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e7a:	2800      	cmp	r0, #0
 8006e7c:	d033      	beq.n	8006ee6 <_printf_float+0x266>
 8006e7e:	4a37      	ldr	r2, [pc, #220]	@ (8006f5c <_printf_float+0x2dc>)
 8006e80:	2301      	movs	r3, #1
 8006e82:	4631      	mov	r1, r6
 8006e84:	4628      	mov	r0, r5
 8006e86:	47b8      	blx	r7
 8006e88:	3001      	adds	r0, #1
 8006e8a:	f43f af54 	beq.w	8006d36 <_printf_float+0xb6>
 8006e8e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006e92:	4543      	cmp	r3, r8
 8006e94:	db02      	blt.n	8006e9c <_printf_float+0x21c>
 8006e96:	6823      	ldr	r3, [r4, #0]
 8006e98:	07d8      	lsls	r0, r3, #31
 8006e9a:	d50f      	bpl.n	8006ebc <_printf_float+0x23c>
 8006e9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ea0:	4631      	mov	r1, r6
 8006ea2:	4628      	mov	r0, r5
 8006ea4:	47b8      	blx	r7
 8006ea6:	3001      	adds	r0, #1
 8006ea8:	f43f af45 	beq.w	8006d36 <_printf_float+0xb6>
 8006eac:	f04f 0900 	mov.w	r9, #0
 8006eb0:	f108 38ff 	add.w	r8, r8, #4294967295
 8006eb4:	f104 0a1a 	add.w	sl, r4, #26
 8006eb8:	45c8      	cmp	r8, r9
 8006eba:	dc09      	bgt.n	8006ed0 <_printf_float+0x250>
 8006ebc:	6823      	ldr	r3, [r4, #0]
 8006ebe:	079b      	lsls	r3, r3, #30
 8006ec0:	f100 8103 	bmi.w	80070ca <_printf_float+0x44a>
 8006ec4:	68e0      	ldr	r0, [r4, #12]
 8006ec6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ec8:	4298      	cmp	r0, r3
 8006eca:	bfb8      	it	lt
 8006ecc:	4618      	movlt	r0, r3
 8006ece:	e734      	b.n	8006d3a <_printf_float+0xba>
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	4652      	mov	r2, sl
 8006ed4:	4631      	mov	r1, r6
 8006ed6:	4628      	mov	r0, r5
 8006ed8:	47b8      	blx	r7
 8006eda:	3001      	adds	r0, #1
 8006edc:	f43f af2b 	beq.w	8006d36 <_printf_float+0xb6>
 8006ee0:	f109 0901 	add.w	r9, r9, #1
 8006ee4:	e7e8      	b.n	8006eb8 <_printf_float+0x238>
 8006ee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	dc39      	bgt.n	8006f60 <_printf_float+0x2e0>
 8006eec:	4a1b      	ldr	r2, [pc, #108]	@ (8006f5c <_printf_float+0x2dc>)
 8006eee:	2301      	movs	r3, #1
 8006ef0:	4631      	mov	r1, r6
 8006ef2:	4628      	mov	r0, r5
 8006ef4:	47b8      	blx	r7
 8006ef6:	3001      	adds	r0, #1
 8006ef8:	f43f af1d 	beq.w	8006d36 <_printf_float+0xb6>
 8006efc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006f00:	ea59 0303 	orrs.w	r3, r9, r3
 8006f04:	d102      	bne.n	8006f0c <_printf_float+0x28c>
 8006f06:	6823      	ldr	r3, [r4, #0]
 8006f08:	07d9      	lsls	r1, r3, #31
 8006f0a:	d5d7      	bpl.n	8006ebc <_printf_float+0x23c>
 8006f0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f10:	4631      	mov	r1, r6
 8006f12:	4628      	mov	r0, r5
 8006f14:	47b8      	blx	r7
 8006f16:	3001      	adds	r0, #1
 8006f18:	f43f af0d 	beq.w	8006d36 <_printf_float+0xb6>
 8006f1c:	f04f 0a00 	mov.w	sl, #0
 8006f20:	f104 0b1a 	add.w	fp, r4, #26
 8006f24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f26:	425b      	negs	r3, r3
 8006f28:	4553      	cmp	r3, sl
 8006f2a:	dc01      	bgt.n	8006f30 <_printf_float+0x2b0>
 8006f2c:	464b      	mov	r3, r9
 8006f2e:	e793      	b.n	8006e58 <_printf_float+0x1d8>
 8006f30:	2301      	movs	r3, #1
 8006f32:	465a      	mov	r2, fp
 8006f34:	4631      	mov	r1, r6
 8006f36:	4628      	mov	r0, r5
 8006f38:	47b8      	blx	r7
 8006f3a:	3001      	adds	r0, #1
 8006f3c:	f43f aefb 	beq.w	8006d36 <_printf_float+0xb6>
 8006f40:	f10a 0a01 	add.w	sl, sl, #1
 8006f44:	e7ee      	b.n	8006f24 <_printf_float+0x2a4>
 8006f46:	bf00      	nop
 8006f48:	7fefffff 	.word	0x7fefffff
 8006f4c:	0800c920 	.word	0x0800c920
 8006f50:	0800c924 	.word	0x0800c924
 8006f54:	0800c928 	.word	0x0800c928
 8006f58:	0800c92c 	.word	0x0800c92c
 8006f5c:	0800c930 	.word	0x0800c930
 8006f60:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006f62:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006f66:	4553      	cmp	r3, sl
 8006f68:	bfa8      	it	ge
 8006f6a:	4653      	movge	r3, sl
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	4699      	mov	r9, r3
 8006f70:	dc36      	bgt.n	8006fe0 <_printf_float+0x360>
 8006f72:	f04f 0b00 	mov.w	fp, #0
 8006f76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f7a:	f104 021a 	add.w	r2, r4, #26
 8006f7e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006f80:	9306      	str	r3, [sp, #24]
 8006f82:	eba3 0309 	sub.w	r3, r3, r9
 8006f86:	455b      	cmp	r3, fp
 8006f88:	dc31      	bgt.n	8006fee <_printf_float+0x36e>
 8006f8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f8c:	459a      	cmp	sl, r3
 8006f8e:	dc3a      	bgt.n	8007006 <_printf_float+0x386>
 8006f90:	6823      	ldr	r3, [r4, #0]
 8006f92:	07da      	lsls	r2, r3, #31
 8006f94:	d437      	bmi.n	8007006 <_printf_float+0x386>
 8006f96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f98:	ebaa 0903 	sub.w	r9, sl, r3
 8006f9c:	9b06      	ldr	r3, [sp, #24]
 8006f9e:	ebaa 0303 	sub.w	r3, sl, r3
 8006fa2:	4599      	cmp	r9, r3
 8006fa4:	bfa8      	it	ge
 8006fa6:	4699      	movge	r9, r3
 8006fa8:	f1b9 0f00 	cmp.w	r9, #0
 8006fac:	dc33      	bgt.n	8007016 <_printf_float+0x396>
 8006fae:	f04f 0800 	mov.w	r8, #0
 8006fb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006fb6:	f104 0b1a 	add.w	fp, r4, #26
 8006fba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fbc:	ebaa 0303 	sub.w	r3, sl, r3
 8006fc0:	eba3 0309 	sub.w	r3, r3, r9
 8006fc4:	4543      	cmp	r3, r8
 8006fc6:	f77f af79 	ble.w	8006ebc <_printf_float+0x23c>
 8006fca:	2301      	movs	r3, #1
 8006fcc:	465a      	mov	r2, fp
 8006fce:	4631      	mov	r1, r6
 8006fd0:	4628      	mov	r0, r5
 8006fd2:	47b8      	blx	r7
 8006fd4:	3001      	adds	r0, #1
 8006fd6:	f43f aeae 	beq.w	8006d36 <_printf_float+0xb6>
 8006fda:	f108 0801 	add.w	r8, r8, #1
 8006fde:	e7ec      	b.n	8006fba <_printf_float+0x33a>
 8006fe0:	4642      	mov	r2, r8
 8006fe2:	4631      	mov	r1, r6
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	47b8      	blx	r7
 8006fe8:	3001      	adds	r0, #1
 8006fea:	d1c2      	bne.n	8006f72 <_printf_float+0x2f2>
 8006fec:	e6a3      	b.n	8006d36 <_printf_float+0xb6>
 8006fee:	2301      	movs	r3, #1
 8006ff0:	4631      	mov	r1, r6
 8006ff2:	4628      	mov	r0, r5
 8006ff4:	9206      	str	r2, [sp, #24]
 8006ff6:	47b8      	blx	r7
 8006ff8:	3001      	adds	r0, #1
 8006ffa:	f43f ae9c 	beq.w	8006d36 <_printf_float+0xb6>
 8006ffe:	9a06      	ldr	r2, [sp, #24]
 8007000:	f10b 0b01 	add.w	fp, fp, #1
 8007004:	e7bb      	b.n	8006f7e <_printf_float+0x2fe>
 8007006:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800700a:	4631      	mov	r1, r6
 800700c:	4628      	mov	r0, r5
 800700e:	47b8      	blx	r7
 8007010:	3001      	adds	r0, #1
 8007012:	d1c0      	bne.n	8006f96 <_printf_float+0x316>
 8007014:	e68f      	b.n	8006d36 <_printf_float+0xb6>
 8007016:	9a06      	ldr	r2, [sp, #24]
 8007018:	464b      	mov	r3, r9
 800701a:	4442      	add	r2, r8
 800701c:	4631      	mov	r1, r6
 800701e:	4628      	mov	r0, r5
 8007020:	47b8      	blx	r7
 8007022:	3001      	adds	r0, #1
 8007024:	d1c3      	bne.n	8006fae <_printf_float+0x32e>
 8007026:	e686      	b.n	8006d36 <_printf_float+0xb6>
 8007028:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800702c:	f1ba 0f01 	cmp.w	sl, #1
 8007030:	dc01      	bgt.n	8007036 <_printf_float+0x3b6>
 8007032:	07db      	lsls	r3, r3, #31
 8007034:	d536      	bpl.n	80070a4 <_printf_float+0x424>
 8007036:	2301      	movs	r3, #1
 8007038:	4642      	mov	r2, r8
 800703a:	4631      	mov	r1, r6
 800703c:	4628      	mov	r0, r5
 800703e:	47b8      	blx	r7
 8007040:	3001      	adds	r0, #1
 8007042:	f43f ae78 	beq.w	8006d36 <_printf_float+0xb6>
 8007046:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800704a:	4631      	mov	r1, r6
 800704c:	4628      	mov	r0, r5
 800704e:	47b8      	blx	r7
 8007050:	3001      	adds	r0, #1
 8007052:	f43f ae70 	beq.w	8006d36 <_printf_float+0xb6>
 8007056:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800705a:	2200      	movs	r2, #0
 800705c:	2300      	movs	r3, #0
 800705e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007062:	f7f9 fd31 	bl	8000ac8 <__aeabi_dcmpeq>
 8007066:	b9c0      	cbnz	r0, 800709a <_printf_float+0x41a>
 8007068:	4653      	mov	r3, sl
 800706a:	f108 0201 	add.w	r2, r8, #1
 800706e:	4631      	mov	r1, r6
 8007070:	4628      	mov	r0, r5
 8007072:	47b8      	blx	r7
 8007074:	3001      	adds	r0, #1
 8007076:	d10c      	bne.n	8007092 <_printf_float+0x412>
 8007078:	e65d      	b.n	8006d36 <_printf_float+0xb6>
 800707a:	2301      	movs	r3, #1
 800707c:	465a      	mov	r2, fp
 800707e:	4631      	mov	r1, r6
 8007080:	4628      	mov	r0, r5
 8007082:	47b8      	blx	r7
 8007084:	3001      	adds	r0, #1
 8007086:	f43f ae56 	beq.w	8006d36 <_printf_float+0xb6>
 800708a:	f108 0801 	add.w	r8, r8, #1
 800708e:	45d0      	cmp	r8, sl
 8007090:	dbf3      	blt.n	800707a <_printf_float+0x3fa>
 8007092:	464b      	mov	r3, r9
 8007094:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007098:	e6df      	b.n	8006e5a <_printf_float+0x1da>
 800709a:	f04f 0800 	mov.w	r8, #0
 800709e:	f104 0b1a 	add.w	fp, r4, #26
 80070a2:	e7f4      	b.n	800708e <_printf_float+0x40e>
 80070a4:	2301      	movs	r3, #1
 80070a6:	4642      	mov	r2, r8
 80070a8:	e7e1      	b.n	800706e <_printf_float+0x3ee>
 80070aa:	2301      	movs	r3, #1
 80070ac:	464a      	mov	r2, r9
 80070ae:	4631      	mov	r1, r6
 80070b0:	4628      	mov	r0, r5
 80070b2:	47b8      	blx	r7
 80070b4:	3001      	adds	r0, #1
 80070b6:	f43f ae3e 	beq.w	8006d36 <_printf_float+0xb6>
 80070ba:	f108 0801 	add.w	r8, r8, #1
 80070be:	68e3      	ldr	r3, [r4, #12]
 80070c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80070c2:	1a5b      	subs	r3, r3, r1
 80070c4:	4543      	cmp	r3, r8
 80070c6:	dcf0      	bgt.n	80070aa <_printf_float+0x42a>
 80070c8:	e6fc      	b.n	8006ec4 <_printf_float+0x244>
 80070ca:	f04f 0800 	mov.w	r8, #0
 80070ce:	f104 0919 	add.w	r9, r4, #25
 80070d2:	e7f4      	b.n	80070be <_printf_float+0x43e>

080070d4 <_printf_common>:
 80070d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070d8:	4616      	mov	r6, r2
 80070da:	4698      	mov	r8, r3
 80070dc:	688a      	ldr	r2, [r1, #8]
 80070de:	690b      	ldr	r3, [r1, #16]
 80070e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80070e4:	4293      	cmp	r3, r2
 80070e6:	bfb8      	it	lt
 80070e8:	4613      	movlt	r3, r2
 80070ea:	6033      	str	r3, [r6, #0]
 80070ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80070f0:	4607      	mov	r7, r0
 80070f2:	460c      	mov	r4, r1
 80070f4:	b10a      	cbz	r2, 80070fa <_printf_common+0x26>
 80070f6:	3301      	adds	r3, #1
 80070f8:	6033      	str	r3, [r6, #0]
 80070fa:	6823      	ldr	r3, [r4, #0]
 80070fc:	0699      	lsls	r1, r3, #26
 80070fe:	bf42      	ittt	mi
 8007100:	6833      	ldrmi	r3, [r6, #0]
 8007102:	3302      	addmi	r3, #2
 8007104:	6033      	strmi	r3, [r6, #0]
 8007106:	6825      	ldr	r5, [r4, #0]
 8007108:	f015 0506 	ands.w	r5, r5, #6
 800710c:	d106      	bne.n	800711c <_printf_common+0x48>
 800710e:	f104 0a19 	add.w	sl, r4, #25
 8007112:	68e3      	ldr	r3, [r4, #12]
 8007114:	6832      	ldr	r2, [r6, #0]
 8007116:	1a9b      	subs	r3, r3, r2
 8007118:	42ab      	cmp	r3, r5
 800711a:	dc26      	bgt.n	800716a <_printf_common+0x96>
 800711c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007120:	6822      	ldr	r2, [r4, #0]
 8007122:	3b00      	subs	r3, #0
 8007124:	bf18      	it	ne
 8007126:	2301      	movne	r3, #1
 8007128:	0692      	lsls	r2, r2, #26
 800712a:	d42b      	bmi.n	8007184 <_printf_common+0xb0>
 800712c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007130:	4641      	mov	r1, r8
 8007132:	4638      	mov	r0, r7
 8007134:	47c8      	blx	r9
 8007136:	3001      	adds	r0, #1
 8007138:	d01e      	beq.n	8007178 <_printf_common+0xa4>
 800713a:	6823      	ldr	r3, [r4, #0]
 800713c:	6922      	ldr	r2, [r4, #16]
 800713e:	f003 0306 	and.w	r3, r3, #6
 8007142:	2b04      	cmp	r3, #4
 8007144:	bf02      	ittt	eq
 8007146:	68e5      	ldreq	r5, [r4, #12]
 8007148:	6833      	ldreq	r3, [r6, #0]
 800714a:	1aed      	subeq	r5, r5, r3
 800714c:	68a3      	ldr	r3, [r4, #8]
 800714e:	bf0c      	ite	eq
 8007150:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007154:	2500      	movne	r5, #0
 8007156:	4293      	cmp	r3, r2
 8007158:	bfc4      	itt	gt
 800715a:	1a9b      	subgt	r3, r3, r2
 800715c:	18ed      	addgt	r5, r5, r3
 800715e:	2600      	movs	r6, #0
 8007160:	341a      	adds	r4, #26
 8007162:	42b5      	cmp	r5, r6
 8007164:	d11a      	bne.n	800719c <_printf_common+0xc8>
 8007166:	2000      	movs	r0, #0
 8007168:	e008      	b.n	800717c <_printf_common+0xa8>
 800716a:	2301      	movs	r3, #1
 800716c:	4652      	mov	r2, sl
 800716e:	4641      	mov	r1, r8
 8007170:	4638      	mov	r0, r7
 8007172:	47c8      	blx	r9
 8007174:	3001      	adds	r0, #1
 8007176:	d103      	bne.n	8007180 <_printf_common+0xac>
 8007178:	f04f 30ff 	mov.w	r0, #4294967295
 800717c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007180:	3501      	adds	r5, #1
 8007182:	e7c6      	b.n	8007112 <_printf_common+0x3e>
 8007184:	18e1      	adds	r1, r4, r3
 8007186:	1c5a      	adds	r2, r3, #1
 8007188:	2030      	movs	r0, #48	@ 0x30
 800718a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800718e:	4422      	add	r2, r4
 8007190:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007194:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007198:	3302      	adds	r3, #2
 800719a:	e7c7      	b.n	800712c <_printf_common+0x58>
 800719c:	2301      	movs	r3, #1
 800719e:	4622      	mov	r2, r4
 80071a0:	4641      	mov	r1, r8
 80071a2:	4638      	mov	r0, r7
 80071a4:	47c8      	blx	r9
 80071a6:	3001      	adds	r0, #1
 80071a8:	d0e6      	beq.n	8007178 <_printf_common+0xa4>
 80071aa:	3601      	adds	r6, #1
 80071ac:	e7d9      	b.n	8007162 <_printf_common+0x8e>
	...

080071b0 <_printf_i>:
 80071b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071b4:	7e0f      	ldrb	r7, [r1, #24]
 80071b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80071b8:	2f78      	cmp	r7, #120	@ 0x78
 80071ba:	4691      	mov	r9, r2
 80071bc:	4680      	mov	r8, r0
 80071be:	460c      	mov	r4, r1
 80071c0:	469a      	mov	sl, r3
 80071c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80071c6:	d807      	bhi.n	80071d8 <_printf_i+0x28>
 80071c8:	2f62      	cmp	r7, #98	@ 0x62
 80071ca:	d80a      	bhi.n	80071e2 <_printf_i+0x32>
 80071cc:	2f00      	cmp	r7, #0
 80071ce:	f000 80d2 	beq.w	8007376 <_printf_i+0x1c6>
 80071d2:	2f58      	cmp	r7, #88	@ 0x58
 80071d4:	f000 80b9 	beq.w	800734a <_printf_i+0x19a>
 80071d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80071e0:	e03a      	b.n	8007258 <_printf_i+0xa8>
 80071e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80071e6:	2b15      	cmp	r3, #21
 80071e8:	d8f6      	bhi.n	80071d8 <_printf_i+0x28>
 80071ea:	a101      	add	r1, pc, #4	@ (adr r1, 80071f0 <_printf_i+0x40>)
 80071ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071f0:	08007249 	.word	0x08007249
 80071f4:	0800725d 	.word	0x0800725d
 80071f8:	080071d9 	.word	0x080071d9
 80071fc:	080071d9 	.word	0x080071d9
 8007200:	080071d9 	.word	0x080071d9
 8007204:	080071d9 	.word	0x080071d9
 8007208:	0800725d 	.word	0x0800725d
 800720c:	080071d9 	.word	0x080071d9
 8007210:	080071d9 	.word	0x080071d9
 8007214:	080071d9 	.word	0x080071d9
 8007218:	080071d9 	.word	0x080071d9
 800721c:	0800735d 	.word	0x0800735d
 8007220:	08007287 	.word	0x08007287
 8007224:	08007317 	.word	0x08007317
 8007228:	080071d9 	.word	0x080071d9
 800722c:	080071d9 	.word	0x080071d9
 8007230:	0800737f 	.word	0x0800737f
 8007234:	080071d9 	.word	0x080071d9
 8007238:	08007287 	.word	0x08007287
 800723c:	080071d9 	.word	0x080071d9
 8007240:	080071d9 	.word	0x080071d9
 8007244:	0800731f 	.word	0x0800731f
 8007248:	6833      	ldr	r3, [r6, #0]
 800724a:	1d1a      	adds	r2, r3, #4
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	6032      	str	r2, [r6, #0]
 8007250:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007254:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007258:	2301      	movs	r3, #1
 800725a:	e09d      	b.n	8007398 <_printf_i+0x1e8>
 800725c:	6833      	ldr	r3, [r6, #0]
 800725e:	6820      	ldr	r0, [r4, #0]
 8007260:	1d19      	adds	r1, r3, #4
 8007262:	6031      	str	r1, [r6, #0]
 8007264:	0606      	lsls	r6, r0, #24
 8007266:	d501      	bpl.n	800726c <_printf_i+0xbc>
 8007268:	681d      	ldr	r5, [r3, #0]
 800726a:	e003      	b.n	8007274 <_printf_i+0xc4>
 800726c:	0645      	lsls	r5, r0, #25
 800726e:	d5fb      	bpl.n	8007268 <_printf_i+0xb8>
 8007270:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007274:	2d00      	cmp	r5, #0
 8007276:	da03      	bge.n	8007280 <_printf_i+0xd0>
 8007278:	232d      	movs	r3, #45	@ 0x2d
 800727a:	426d      	negs	r5, r5
 800727c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007280:	4859      	ldr	r0, [pc, #356]	@ (80073e8 <_printf_i+0x238>)
 8007282:	230a      	movs	r3, #10
 8007284:	e011      	b.n	80072aa <_printf_i+0xfa>
 8007286:	6821      	ldr	r1, [r4, #0]
 8007288:	6833      	ldr	r3, [r6, #0]
 800728a:	0608      	lsls	r0, r1, #24
 800728c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007290:	d402      	bmi.n	8007298 <_printf_i+0xe8>
 8007292:	0649      	lsls	r1, r1, #25
 8007294:	bf48      	it	mi
 8007296:	b2ad      	uxthmi	r5, r5
 8007298:	2f6f      	cmp	r7, #111	@ 0x6f
 800729a:	4853      	ldr	r0, [pc, #332]	@ (80073e8 <_printf_i+0x238>)
 800729c:	6033      	str	r3, [r6, #0]
 800729e:	bf14      	ite	ne
 80072a0:	230a      	movne	r3, #10
 80072a2:	2308      	moveq	r3, #8
 80072a4:	2100      	movs	r1, #0
 80072a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80072aa:	6866      	ldr	r6, [r4, #4]
 80072ac:	60a6      	str	r6, [r4, #8]
 80072ae:	2e00      	cmp	r6, #0
 80072b0:	bfa2      	ittt	ge
 80072b2:	6821      	ldrge	r1, [r4, #0]
 80072b4:	f021 0104 	bicge.w	r1, r1, #4
 80072b8:	6021      	strge	r1, [r4, #0]
 80072ba:	b90d      	cbnz	r5, 80072c0 <_printf_i+0x110>
 80072bc:	2e00      	cmp	r6, #0
 80072be:	d04b      	beq.n	8007358 <_printf_i+0x1a8>
 80072c0:	4616      	mov	r6, r2
 80072c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80072c6:	fb03 5711 	mls	r7, r3, r1, r5
 80072ca:	5dc7      	ldrb	r7, [r0, r7]
 80072cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80072d0:	462f      	mov	r7, r5
 80072d2:	42bb      	cmp	r3, r7
 80072d4:	460d      	mov	r5, r1
 80072d6:	d9f4      	bls.n	80072c2 <_printf_i+0x112>
 80072d8:	2b08      	cmp	r3, #8
 80072da:	d10b      	bne.n	80072f4 <_printf_i+0x144>
 80072dc:	6823      	ldr	r3, [r4, #0]
 80072de:	07df      	lsls	r7, r3, #31
 80072e0:	d508      	bpl.n	80072f4 <_printf_i+0x144>
 80072e2:	6923      	ldr	r3, [r4, #16]
 80072e4:	6861      	ldr	r1, [r4, #4]
 80072e6:	4299      	cmp	r1, r3
 80072e8:	bfde      	ittt	le
 80072ea:	2330      	movle	r3, #48	@ 0x30
 80072ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80072f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80072f4:	1b92      	subs	r2, r2, r6
 80072f6:	6122      	str	r2, [r4, #16]
 80072f8:	f8cd a000 	str.w	sl, [sp]
 80072fc:	464b      	mov	r3, r9
 80072fe:	aa03      	add	r2, sp, #12
 8007300:	4621      	mov	r1, r4
 8007302:	4640      	mov	r0, r8
 8007304:	f7ff fee6 	bl	80070d4 <_printf_common>
 8007308:	3001      	adds	r0, #1
 800730a:	d14a      	bne.n	80073a2 <_printf_i+0x1f2>
 800730c:	f04f 30ff 	mov.w	r0, #4294967295
 8007310:	b004      	add	sp, #16
 8007312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007316:	6823      	ldr	r3, [r4, #0]
 8007318:	f043 0320 	orr.w	r3, r3, #32
 800731c:	6023      	str	r3, [r4, #0]
 800731e:	4833      	ldr	r0, [pc, #204]	@ (80073ec <_printf_i+0x23c>)
 8007320:	2778      	movs	r7, #120	@ 0x78
 8007322:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007326:	6823      	ldr	r3, [r4, #0]
 8007328:	6831      	ldr	r1, [r6, #0]
 800732a:	061f      	lsls	r7, r3, #24
 800732c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007330:	d402      	bmi.n	8007338 <_printf_i+0x188>
 8007332:	065f      	lsls	r7, r3, #25
 8007334:	bf48      	it	mi
 8007336:	b2ad      	uxthmi	r5, r5
 8007338:	6031      	str	r1, [r6, #0]
 800733a:	07d9      	lsls	r1, r3, #31
 800733c:	bf44      	itt	mi
 800733e:	f043 0320 	orrmi.w	r3, r3, #32
 8007342:	6023      	strmi	r3, [r4, #0]
 8007344:	b11d      	cbz	r5, 800734e <_printf_i+0x19e>
 8007346:	2310      	movs	r3, #16
 8007348:	e7ac      	b.n	80072a4 <_printf_i+0xf4>
 800734a:	4827      	ldr	r0, [pc, #156]	@ (80073e8 <_printf_i+0x238>)
 800734c:	e7e9      	b.n	8007322 <_printf_i+0x172>
 800734e:	6823      	ldr	r3, [r4, #0]
 8007350:	f023 0320 	bic.w	r3, r3, #32
 8007354:	6023      	str	r3, [r4, #0]
 8007356:	e7f6      	b.n	8007346 <_printf_i+0x196>
 8007358:	4616      	mov	r6, r2
 800735a:	e7bd      	b.n	80072d8 <_printf_i+0x128>
 800735c:	6833      	ldr	r3, [r6, #0]
 800735e:	6825      	ldr	r5, [r4, #0]
 8007360:	6961      	ldr	r1, [r4, #20]
 8007362:	1d18      	adds	r0, r3, #4
 8007364:	6030      	str	r0, [r6, #0]
 8007366:	062e      	lsls	r6, r5, #24
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	d501      	bpl.n	8007370 <_printf_i+0x1c0>
 800736c:	6019      	str	r1, [r3, #0]
 800736e:	e002      	b.n	8007376 <_printf_i+0x1c6>
 8007370:	0668      	lsls	r0, r5, #25
 8007372:	d5fb      	bpl.n	800736c <_printf_i+0x1bc>
 8007374:	8019      	strh	r1, [r3, #0]
 8007376:	2300      	movs	r3, #0
 8007378:	6123      	str	r3, [r4, #16]
 800737a:	4616      	mov	r6, r2
 800737c:	e7bc      	b.n	80072f8 <_printf_i+0x148>
 800737e:	6833      	ldr	r3, [r6, #0]
 8007380:	1d1a      	adds	r2, r3, #4
 8007382:	6032      	str	r2, [r6, #0]
 8007384:	681e      	ldr	r6, [r3, #0]
 8007386:	6862      	ldr	r2, [r4, #4]
 8007388:	2100      	movs	r1, #0
 800738a:	4630      	mov	r0, r6
 800738c:	f7f8 ff20 	bl	80001d0 <memchr>
 8007390:	b108      	cbz	r0, 8007396 <_printf_i+0x1e6>
 8007392:	1b80      	subs	r0, r0, r6
 8007394:	6060      	str	r0, [r4, #4]
 8007396:	6863      	ldr	r3, [r4, #4]
 8007398:	6123      	str	r3, [r4, #16]
 800739a:	2300      	movs	r3, #0
 800739c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073a0:	e7aa      	b.n	80072f8 <_printf_i+0x148>
 80073a2:	6923      	ldr	r3, [r4, #16]
 80073a4:	4632      	mov	r2, r6
 80073a6:	4649      	mov	r1, r9
 80073a8:	4640      	mov	r0, r8
 80073aa:	47d0      	blx	sl
 80073ac:	3001      	adds	r0, #1
 80073ae:	d0ad      	beq.n	800730c <_printf_i+0x15c>
 80073b0:	6823      	ldr	r3, [r4, #0]
 80073b2:	079b      	lsls	r3, r3, #30
 80073b4:	d413      	bmi.n	80073de <_printf_i+0x22e>
 80073b6:	68e0      	ldr	r0, [r4, #12]
 80073b8:	9b03      	ldr	r3, [sp, #12]
 80073ba:	4298      	cmp	r0, r3
 80073bc:	bfb8      	it	lt
 80073be:	4618      	movlt	r0, r3
 80073c0:	e7a6      	b.n	8007310 <_printf_i+0x160>
 80073c2:	2301      	movs	r3, #1
 80073c4:	4632      	mov	r2, r6
 80073c6:	4649      	mov	r1, r9
 80073c8:	4640      	mov	r0, r8
 80073ca:	47d0      	blx	sl
 80073cc:	3001      	adds	r0, #1
 80073ce:	d09d      	beq.n	800730c <_printf_i+0x15c>
 80073d0:	3501      	adds	r5, #1
 80073d2:	68e3      	ldr	r3, [r4, #12]
 80073d4:	9903      	ldr	r1, [sp, #12]
 80073d6:	1a5b      	subs	r3, r3, r1
 80073d8:	42ab      	cmp	r3, r5
 80073da:	dcf2      	bgt.n	80073c2 <_printf_i+0x212>
 80073dc:	e7eb      	b.n	80073b6 <_printf_i+0x206>
 80073de:	2500      	movs	r5, #0
 80073e0:	f104 0619 	add.w	r6, r4, #25
 80073e4:	e7f5      	b.n	80073d2 <_printf_i+0x222>
 80073e6:	bf00      	nop
 80073e8:	0800c932 	.word	0x0800c932
 80073ec:	0800c943 	.word	0x0800c943

080073f0 <_scanf_float>:
 80073f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f4:	b087      	sub	sp, #28
 80073f6:	4617      	mov	r7, r2
 80073f8:	9303      	str	r3, [sp, #12]
 80073fa:	688b      	ldr	r3, [r1, #8]
 80073fc:	1e5a      	subs	r2, r3, #1
 80073fe:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007402:	bf81      	itttt	hi
 8007404:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007408:	eb03 0b05 	addhi.w	fp, r3, r5
 800740c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007410:	608b      	strhi	r3, [r1, #8]
 8007412:	680b      	ldr	r3, [r1, #0]
 8007414:	460a      	mov	r2, r1
 8007416:	f04f 0500 	mov.w	r5, #0
 800741a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800741e:	f842 3b1c 	str.w	r3, [r2], #28
 8007422:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007426:	4680      	mov	r8, r0
 8007428:	460c      	mov	r4, r1
 800742a:	bf98      	it	ls
 800742c:	f04f 0b00 	movls.w	fp, #0
 8007430:	9201      	str	r2, [sp, #4]
 8007432:	4616      	mov	r6, r2
 8007434:	46aa      	mov	sl, r5
 8007436:	46a9      	mov	r9, r5
 8007438:	9502      	str	r5, [sp, #8]
 800743a:	68a2      	ldr	r2, [r4, #8]
 800743c:	b152      	cbz	r2, 8007454 <_scanf_float+0x64>
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	2b4e      	cmp	r3, #78	@ 0x4e
 8007444:	d864      	bhi.n	8007510 <_scanf_float+0x120>
 8007446:	2b40      	cmp	r3, #64	@ 0x40
 8007448:	d83c      	bhi.n	80074c4 <_scanf_float+0xd4>
 800744a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800744e:	b2c8      	uxtb	r0, r1
 8007450:	280e      	cmp	r0, #14
 8007452:	d93a      	bls.n	80074ca <_scanf_float+0xda>
 8007454:	f1b9 0f00 	cmp.w	r9, #0
 8007458:	d003      	beq.n	8007462 <_scanf_float+0x72>
 800745a:	6823      	ldr	r3, [r4, #0]
 800745c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007460:	6023      	str	r3, [r4, #0]
 8007462:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007466:	f1ba 0f01 	cmp.w	sl, #1
 800746a:	f200 8117 	bhi.w	800769c <_scanf_float+0x2ac>
 800746e:	9b01      	ldr	r3, [sp, #4]
 8007470:	429e      	cmp	r6, r3
 8007472:	f200 8108 	bhi.w	8007686 <_scanf_float+0x296>
 8007476:	2001      	movs	r0, #1
 8007478:	b007      	add	sp, #28
 800747a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800747e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007482:	2a0d      	cmp	r2, #13
 8007484:	d8e6      	bhi.n	8007454 <_scanf_float+0x64>
 8007486:	a101      	add	r1, pc, #4	@ (adr r1, 800748c <_scanf_float+0x9c>)
 8007488:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800748c:	080075d3 	.word	0x080075d3
 8007490:	08007455 	.word	0x08007455
 8007494:	08007455 	.word	0x08007455
 8007498:	08007455 	.word	0x08007455
 800749c:	08007633 	.word	0x08007633
 80074a0:	0800760b 	.word	0x0800760b
 80074a4:	08007455 	.word	0x08007455
 80074a8:	08007455 	.word	0x08007455
 80074ac:	080075e1 	.word	0x080075e1
 80074b0:	08007455 	.word	0x08007455
 80074b4:	08007455 	.word	0x08007455
 80074b8:	08007455 	.word	0x08007455
 80074bc:	08007455 	.word	0x08007455
 80074c0:	08007599 	.word	0x08007599
 80074c4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80074c8:	e7db      	b.n	8007482 <_scanf_float+0x92>
 80074ca:	290e      	cmp	r1, #14
 80074cc:	d8c2      	bhi.n	8007454 <_scanf_float+0x64>
 80074ce:	a001      	add	r0, pc, #4	@ (adr r0, 80074d4 <_scanf_float+0xe4>)
 80074d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80074d4:	08007589 	.word	0x08007589
 80074d8:	08007455 	.word	0x08007455
 80074dc:	08007589 	.word	0x08007589
 80074e0:	0800761f 	.word	0x0800761f
 80074e4:	08007455 	.word	0x08007455
 80074e8:	08007531 	.word	0x08007531
 80074ec:	0800756f 	.word	0x0800756f
 80074f0:	0800756f 	.word	0x0800756f
 80074f4:	0800756f 	.word	0x0800756f
 80074f8:	0800756f 	.word	0x0800756f
 80074fc:	0800756f 	.word	0x0800756f
 8007500:	0800756f 	.word	0x0800756f
 8007504:	0800756f 	.word	0x0800756f
 8007508:	0800756f 	.word	0x0800756f
 800750c:	0800756f 	.word	0x0800756f
 8007510:	2b6e      	cmp	r3, #110	@ 0x6e
 8007512:	d809      	bhi.n	8007528 <_scanf_float+0x138>
 8007514:	2b60      	cmp	r3, #96	@ 0x60
 8007516:	d8b2      	bhi.n	800747e <_scanf_float+0x8e>
 8007518:	2b54      	cmp	r3, #84	@ 0x54
 800751a:	d07b      	beq.n	8007614 <_scanf_float+0x224>
 800751c:	2b59      	cmp	r3, #89	@ 0x59
 800751e:	d199      	bne.n	8007454 <_scanf_float+0x64>
 8007520:	2d07      	cmp	r5, #7
 8007522:	d197      	bne.n	8007454 <_scanf_float+0x64>
 8007524:	2508      	movs	r5, #8
 8007526:	e02c      	b.n	8007582 <_scanf_float+0x192>
 8007528:	2b74      	cmp	r3, #116	@ 0x74
 800752a:	d073      	beq.n	8007614 <_scanf_float+0x224>
 800752c:	2b79      	cmp	r3, #121	@ 0x79
 800752e:	e7f6      	b.n	800751e <_scanf_float+0x12e>
 8007530:	6821      	ldr	r1, [r4, #0]
 8007532:	05c8      	lsls	r0, r1, #23
 8007534:	d51b      	bpl.n	800756e <_scanf_float+0x17e>
 8007536:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800753a:	6021      	str	r1, [r4, #0]
 800753c:	f109 0901 	add.w	r9, r9, #1
 8007540:	f1bb 0f00 	cmp.w	fp, #0
 8007544:	d003      	beq.n	800754e <_scanf_float+0x15e>
 8007546:	3201      	adds	r2, #1
 8007548:	f10b 3bff 	add.w	fp, fp, #4294967295
 800754c:	60a2      	str	r2, [r4, #8]
 800754e:	68a3      	ldr	r3, [r4, #8]
 8007550:	3b01      	subs	r3, #1
 8007552:	60a3      	str	r3, [r4, #8]
 8007554:	6923      	ldr	r3, [r4, #16]
 8007556:	3301      	adds	r3, #1
 8007558:	6123      	str	r3, [r4, #16]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	3b01      	subs	r3, #1
 800755e:	2b00      	cmp	r3, #0
 8007560:	607b      	str	r3, [r7, #4]
 8007562:	f340 8087 	ble.w	8007674 <_scanf_float+0x284>
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	3301      	adds	r3, #1
 800756a:	603b      	str	r3, [r7, #0]
 800756c:	e765      	b.n	800743a <_scanf_float+0x4a>
 800756e:	eb1a 0105 	adds.w	r1, sl, r5
 8007572:	f47f af6f 	bne.w	8007454 <_scanf_float+0x64>
 8007576:	6822      	ldr	r2, [r4, #0]
 8007578:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800757c:	6022      	str	r2, [r4, #0]
 800757e:	460d      	mov	r5, r1
 8007580:	468a      	mov	sl, r1
 8007582:	f806 3b01 	strb.w	r3, [r6], #1
 8007586:	e7e2      	b.n	800754e <_scanf_float+0x15e>
 8007588:	6822      	ldr	r2, [r4, #0]
 800758a:	0610      	lsls	r0, r2, #24
 800758c:	f57f af62 	bpl.w	8007454 <_scanf_float+0x64>
 8007590:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007594:	6022      	str	r2, [r4, #0]
 8007596:	e7f4      	b.n	8007582 <_scanf_float+0x192>
 8007598:	f1ba 0f00 	cmp.w	sl, #0
 800759c:	d10e      	bne.n	80075bc <_scanf_float+0x1cc>
 800759e:	f1b9 0f00 	cmp.w	r9, #0
 80075a2:	d10e      	bne.n	80075c2 <_scanf_float+0x1d2>
 80075a4:	6822      	ldr	r2, [r4, #0]
 80075a6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80075aa:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80075ae:	d108      	bne.n	80075c2 <_scanf_float+0x1d2>
 80075b0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80075b4:	6022      	str	r2, [r4, #0]
 80075b6:	f04f 0a01 	mov.w	sl, #1
 80075ba:	e7e2      	b.n	8007582 <_scanf_float+0x192>
 80075bc:	f1ba 0f02 	cmp.w	sl, #2
 80075c0:	d055      	beq.n	800766e <_scanf_float+0x27e>
 80075c2:	2d01      	cmp	r5, #1
 80075c4:	d002      	beq.n	80075cc <_scanf_float+0x1dc>
 80075c6:	2d04      	cmp	r5, #4
 80075c8:	f47f af44 	bne.w	8007454 <_scanf_float+0x64>
 80075cc:	3501      	adds	r5, #1
 80075ce:	b2ed      	uxtb	r5, r5
 80075d0:	e7d7      	b.n	8007582 <_scanf_float+0x192>
 80075d2:	f1ba 0f01 	cmp.w	sl, #1
 80075d6:	f47f af3d 	bne.w	8007454 <_scanf_float+0x64>
 80075da:	f04f 0a02 	mov.w	sl, #2
 80075de:	e7d0      	b.n	8007582 <_scanf_float+0x192>
 80075e0:	b97d      	cbnz	r5, 8007602 <_scanf_float+0x212>
 80075e2:	f1b9 0f00 	cmp.w	r9, #0
 80075e6:	f47f af38 	bne.w	800745a <_scanf_float+0x6a>
 80075ea:	6822      	ldr	r2, [r4, #0]
 80075ec:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80075f0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80075f4:	f040 8108 	bne.w	8007808 <_scanf_float+0x418>
 80075f8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80075fc:	6022      	str	r2, [r4, #0]
 80075fe:	2501      	movs	r5, #1
 8007600:	e7bf      	b.n	8007582 <_scanf_float+0x192>
 8007602:	2d03      	cmp	r5, #3
 8007604:	d0e2      	beq.n	80075cc <_scanf_float+0x1dc>
 8007606:	2d05      	cmp	r5, #5
 8007608:	e7de      	b.n	80075c8 <_scanf_float+0x1d8>
 800760a:	2d02      	cmp	r5, #2
 800760c:	f47f af22 	bne.w	8007454 <_scanf_float+0x64>
 8007610:	2503      	movs	r5, #3
 8007612:	e7b6      	b.n	8007582 <_scanf_float+0x192>
 8007614:	2d06      	cmp	r5, #6
 8007616:	f47f af1d 	bne.w	8007454 <_scanf_float+0x64>
 800761a:	2507      	movs	r5, #7
 800761c:	e7b1      	b.n	8007582 <_scanf_float+0x192>
 800761e:	6822      	ldr	r2, [r4, #0]
 8007620:	0591      	lsls	r1, r2, #22
 8007622:	f57f af17 	bpl.w	8007454 <_scanf_float+0x64>
 8007626:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800762a:	6022      	str	r2, [r4, #0]
 800762c:	f8cd 9008 	str.w	r9, [sp, #8]
 8007630:	e7a7      	b.n	8007582 <_scanf_float+0x192>
 8007632:	6822      	ldr	r2, [r4, #0]
 8007634:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007638:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800763c:	d006      	beq.n	800764c <_scanf_float+0x25c>
 800763e:	0550      	lsls	r0, r2, #21
 8007640:	f57f af08 	bpl.w	8007454 <_scanf_float+0x64>
 8007644:	f1b9 0f00 	cmp.w	r9, #0
 8007648:	f000 80de 	beq.w	8007808 <_scanf_float+0x418>
 800764c:	0591      	lsls	r1, r2, #22
 800764e:	bf58      	it	pl
 8007650:	9902      	ldrpl	r1, [sp, #8]
 8007652:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007656:	bf58      	it	pl
 8007658:	eba9 0101 	subpl.w	r1, r9, r1
 800765c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007660:	bf58      	it	pl
 8007662:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007666:	6022      	str	r2, [r4, #0]
 8007668:	f04f 0900 	mov.w	r9, #0
 800766c:	e789      	b.n	8007582 <_scanf_float+0x192>
 800766e:	f04f 0a03 	mov.w	sl, #3
 8007672:	e786      	b.n	8007582 <_scanf_float+0x192>
 8007674:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007678:	4639      	mov	r1, r7
 800767a:	4640      	mov	r0, r8
 800767c:	4798      	blx	r3
 800767e:	2800      	cmp	r0, #0
 8007680:	f43f aedb 	beq.w	800743a <_scanf_float+0x4a>
 8007684:	e6e6      	b.n	8007454 <_scanf_float+0x64>
 8007686:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800768a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800768e:	463a      	mov	r2, r7
 8007690:	4640      	mov	r0, r8
 8007692:	4798      	blx	r3
 8007694:	6923      	ldr	r3, [r4, #16]
 8007696:	3b01      	subs	r3, #1
 8007698:	6123      	str	r3, [r4, #16]
 800769a:	e6e8      	b.n	800746e <_scanf_float+0x7e>
 800769c:	1e6b      	subs	r3, r5, #1
 800769e:	2b06      	cmp	r3, #6
 80076a0:	d824      	bhi.n	80076ec <_scanf_float+0x2fc>
 80076a2:	2d02      	cmp	r5, #2
 80076a4:	d836      	bhi.n	8007714 <_scanf_float+0x324>
 80076a6:	9b01      	ldr	r3, [sp, #4]
 80076a8:	429e      	cmp	r6, r3
 80076aa:	f67f aee4 	bls.w	8007476 <_scanf_float+0x86>
 80076ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80076b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80076b6:	463a      	mov	r2, r7
 80076b8:	4640      	mov	r0, r8
 80076ba:	4798      	blx	r3
 80076bc:	6923      	ldr	r3, [r4, #16]
 80076be:	3b01      	subs	r3, #1
 80076c0:	6123      	str	r3, [r4, #16]
 80076c2:	e7f0      	b.n	80076a6 <_scanf_float+0x2b6>
 80076c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80076c8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80076cc:	463a      	mov	r2, r7
 80076ce:	4640      	mov	r0, r8
 80076d0:	4798      	blx	r3
 80076d2:	6923      	ldr	r3, [r4, #16]
 80076d4:	3b01      	subs	r3, #1
 80076d6:	6123      	str	r3, [r4, #16]
 80076d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076dc:	fa5f fa8a 	uxtb.w	sl, sl
 80076e0:	f1ba 0f02 	cmp.w	sl, #2
 80076e4:	d1ee      	bne.n	80076c4 <_scanf_float+0x2d4>
 80076e6:	3d03      	subs	r5, #3
 80076e8:	b2ed      	uxtb	r5, r5
 80076ea:	1b76      	subs	r6, r6, r5
 80076ec:	6823      	ldr	r3, [r4, #0]
 80076ee:	05da      	lsls	r2, r3, #23
 80076f0:	d530      	bpl.n	8007754 <_scanf_float+0x364>
 80076f2:	055b      	lsls	r3, r3, #21
 80076f4:	d511      	bpl.n	800771a <_scanf_float+0x32a>
 80076f6:	9b01      	ldr	r3, [sp, #4]
 80076f8:	429e      	cmp	r6, r3
 80076fa:	f67f aebc 	bls.w	8007476 <_scanf_float+0x86>
 80076fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007702:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007706:	463a      	mov	r2, r7
 8007708:	4640      	mov	r0, r8
 800770a:	4798      	blx	r3
 800770c:	6923      	ldr	r3, [r4, #16]
 800770e:	3b01      	subs	r3, #1
 8007710:	6123      	str	r3, [r4, #16]
 8007712:	e7f0      	b.n	80076f6 <_scanf_float+0x306>
 8007714:	46aa      	mov	sl, r5
 8007716:	46b3      	mov	fp, r6
 8007718:	e7de      	b.n	80076d8 <_scanf_float+0x2e8>
 800771a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800771e:	6923      	ldr	r3, [r4, #16]
 8007720:	2965      	cmp	r1, #101	@ 0x65
 8007722:	f103 33ff 	add.w	r3, r3, #4294967295
 8007726:	f106 35ff 	add.w	r5, r6, #4294967295
 800772a:	6123      	str	r3, [r4, #16]
 800772c:	d00c      	beq.n	8007748 <_scanf_float+0x358>
 800772e:	2945      	cmp	r1, #69	@ 0x45
 8007730:	d00a      	beq.n	8007748 <_scanf_float+0x358>
 8007732:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007736:	463a      	mov	r2, r7
 8007738:	4640      	mov	r0, r8
 800773a:	4798      	blx	r3
 800773c:	6923      	ldr	r3, [r4, #16]
 800773e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007742:	3b01      	subs	r3, #1
 8007744:	1eb5      	subs	r5, r6, #2
 8007746:	6123      	str	r3, [r4, #16]
 8007748:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800774c:	463a      	mov	r2, r7
 800774e:	4640      	mov	r0, r8
 8007750:	4798      	blx	r3
 8007752:	462e      	mov	r6, r5
 8007754:	6822      	ldr	r2, [r4, #0]
 8007756:	f012 0210 	ands.w	r2, r2, #16
 800775a:	d001      	beq.n	8007760 <_scanf_float+0x370>
 800775c:	2000      	movs	r0, #0
 800775e:	e68b      	b.n	8007478 <_scanf_float+0x88>
 8007760:	7032      	strb	r2, [r6, #0]
 8007762:	6823      	ldr	r3, [r4, #0]
 8007764:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007768:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800776c:	d11c      	bne.n	80077a8 <_scanf_float+0x3b8>
 800776e:	9b02      	ldr	r3, [sp, #8]
 8007770:	454b      	cmp	r3, r9
 8007772:	eba3 0209 	sub.w	r2, r3, r9
 8007776:	d123      	bne.n	80077c0 <_scanf_float+0x3d0>
 8007778:	9901      	ldr	r1, [sp, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	4640      	mov	r0, r8
 800777e:	f002 fbf7 	bl	8009f70 <_strtod_r>
 8007782:	9b03      	ldr	r3, [sp, #12]
 8007784:	6821      	ldr	r1, [r4, #0]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f011 0f02 	tst.w	r1, #2
 800778c:	ec57 6b10 	vmov	r6, r7, d0
 8007790:	f103 0204 	add.w	r2, r3, #4
 8007794:	d01f      	beq.n	80077d6 <_scanf_float+0x3e6>
 8007796:	9903      	ldr	r1, [sp, #12]
 8007798:	600a      	str	r2, [r1, #0]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	e9c3 6700 	strd	r6, r7, [r3]
 80077a0:	68e3      	ldr	r3, [r4, #12]
 80077a2:	3301      	adds	r3, #1
 80077a4:	60e3      	str	r3, [r4, #12]
 80077a6:	e7d9      	b.n	800775c <_scanf_float+0x36c>
 80077a8:	9b04      	ldr	r3, [sp, #16]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d0e4      	beq.n	8007778 <_scanf_float+0x388>
 80077ae:	9905      	ldr	r1, [sp, #20]
 80077b0:	230a      	movs	r3, #10
 80077b2:	3101      	adds	r1, #1
 80077b4:	4640      	mov	r0, r8
 80077b6:	f002 fc5b 	bl	800a070 <_strtol_r>
 80077ba:	9b04      	ldr	r3, [sp, #16]
 80077bc:	9e05      	ldr	r6, [sp, #20]
 80077be:	1ac2      	subs	r2, r0, r3
 80077c0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80077c4:	429e      	cmp	r6, r3
 80077c6:	bf28      	it	cs
 80077c8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80077cc:	4910      	ldr	r1, [pc, #64]	@ (8007810 <_scanf_float+0x420>)
 80077ce:	4630      	mov	r0, r6
 80077d0:	f000 f8e4 	bl	800799c <siprintf>
 80077d4:	e7d0      	b.n	8007778 <_scanf_float+0x388>
 80077d6:	f011 0f04 	tst.w	r1, #4
 80077da:	9903      	ldr	r1, [sp, #12]
 80077dc:	600a      	str	r2, [r1, #0]
 80077de:	d1dc      	bne.n	800779a <_scanf_float+0x3aa>
 80077e0:	681d      	ldr	r5, [r3, #0]
 80077e2:	4632      	mov	r2, r6
 80077e4:	463b      	mov	r3, r7
 80077e6:	4630      	mov	r0, r6
 80077e8:	4639      	mov	r1, r7
 80077ea:	f7f9 f99f 	bl	8000b2c <__aeabi_dcmpun>
 80077ee:	b128      	cbz	r0, 80077fc <_scanf_float+0x40c>
 80077f0:	4808      	ldr	r0, [pc, #32]	@ (8007814 <_scanf_float+0x424>)
 80077f2:	f000 f9b7 	bl	8007b64 <nanf>
 80077f6:	ed85 0a00 	vstr	s0, [r5]
 80077fa:	e7d1      	b.n	80077a0 <_scanf_float+0x3b0>
 80077fc:	4630      	mov	r0, r6
 80077fe:	4639      	mov	r1, r7
 8007800:	f7f9 f9f2 	bl	8000be8 <__aeabi_d2f>
 8007804:	6028      	str	r0, [r5, #0]
 8007806:	e7cb      	b.n	80077a0 <_scanf_float+0x3b0>
 8007808:	f04f 0900 	mov.w	r9, #0
 800780c:	e629      	b.n	8007462 <_scanf_float+0x72>
 800780e:	bf00      	nop
 8007810:	0800c954 	.word	0x0800c954
 8007814:	0800cced 	.word	0x0800cced

08007818 <std>:
 8007818:	2300      	movs	r3, #0
 800781a:	b510      	push	{r4, lr}
 800781c:	4604      	mov	r4, r0
 800781e:	e9c0 3300 	strd	r3, r3, [r0]
 8007822:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007826:	6083      	str	r3, [r0, #8]
 8007828:	8181      	strh	r1, [r0, #12]
 800782a:	6643      	str	r3, [r0, #100]	@ 0x64
 800782c:	81c2      	strh	r2, [r0, #14]
 800782e:	6183      	str	r3, [r0, #24]
 8007830:	4619      	mov	r1, r3
 8007832:	2208      	movs	r2, #8
 8007834:	305c      	adds	r0, #92	@ 0x5c
 8007836:	f000 f914 	bl	8007a62 <memset>
 800783a:	4b0d      	ldr	r3, [pc, #52]	@ (8007870 <std+0x58>)
 800783c:	6263      	str	r3, [r4, #36]	@ 0x24
 800783e:	4b0d      	ldr	r3, [pc, #52]	@ (8007874 <std+0x5c>)
 8007840:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007842:	4b0d      	ldr	r3, [pc, #52]	@ (8007878 <std+0x60>)
 8007844:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007846:	4b0d      	ldr	r3, [pc, #52]	@ (800787c <std+0x64>)
 8007848:	6323      	str	r3, [r4, #48]	@ 0x30
 800784a:	4b0d      	ldr	r3, [pc, #52]	@ (8007880 <std+0x68>)
 800784c:	6224      	str	r4, [r4, #32]
 800784e:	429c      	cmp	r4, r3
 8007850:	d006      	beq.n	8007860 <std+0x48>
 8007852:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007856:	4294      	cmp	r4, r2
 8007858:	d002      	beq.n	8007860 <std+0x48>
 800785a:	33d0      	adds	r3, #208	@ 0xd0
 800785c:	429c      	cmp	r4, r3
 800785e:	d105      	bne.n	800786c <std+0x54>
 8007860:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007868:	f000 b978 	b.w	8007b5c <__retarget_lock_init_recursive>
 800786c:	bd10      	pop	{r4, pc}
 800786e:	bf00      	nop
 8007870:	080079dd 	.word	0x080079dd
 8007874:	080079ff 	.word	0x080079ff
 8007878:	08007a37 	.word	0x08007a37
 800787c:	08007a5b 	.word	0x08007a5b
 8007880:	2000052c 	.word	0x2000052c

08007884 <stdio_exit_handler>:
 8007884:	4a02      	ldr	r2, [pc, #8]	@ (8007890 <stdio_exit_handler+0xc>)
 8007886:	4903      	ldr	r1, [pc, #12]	@ (8007894 <stdio_exit_handler+0x10>)
 8007888:	4803      	ldr	r0, [pc, #12]	@ (8007898 <stdio_exit_handler+0x14>)
 800788a:	f000 b869 	b.w	8007960 <_fwalk_sglue>
 800788e:	bf00      	nop
 8007890:	20000030 	.word	0x20000030
 8007894:	0800a42d 	.word	0x0800a42d
 8007898:	20000040 	.word	0x20000040

0800789c <cleanup_stdio>:
 800789c:	6841      	ldr	r1, [r0, #4]
 800789e:	4b0c      	ldr	r3, [pc, #48]	@ (80078d0 <cleanup_stdio+0x34>)
 80078a0:	4299      	cmp	r1, r3
 80078a2:	b510      	push	{r4, lr}
 80078a4:	4604      	mov	r4, r0
 80078a6:	d001      	beq.n	80078ac <cleanup_stdio+0x10>
 80078a8:	f002 fdc0 	bl	800a42c <_fflush_r>
 80078ac:	68a1      	ldr	r1, [r4, #8]
 80078ae:	4b09      	ldr	r3, [pc, #36]	@ (80078d4 <cleanup_stdio+0x38>)
 80078b0:	4299      	cmp	r1, r3
 80078b2:	d002      	beq.n	80078ba <cleanup_stdio+0x1e>
 80078b4:	4620      	mov	r0, r4
 80078b6:	f002 fdb9 	bl	800a42c <_fflush_r>
 80078ba:	68e1      	ldr	r1, [r4, #12]
 80078bc:	4b06      	ldr	r3, [pc, #24]	@ (80078d8 <cleanup_stdio+0x3c>)
 80078be:	4299      	cmp	r1, r3
 80078c0:	d004      	beq.n	80078cc <cleanup_stdio+0x30>
 80078c2:	4620      	mov	r0, r4
 80078c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078c8:	f002 bdb0 	b.w	800a42c <_fflush_r>
 80078cc:	bd10      	pop	{r4, pc}
 80078ce:	bf00      	nop
 80078d0:	2000052c 	.word	0x2000052c
 80078d4:	20000594 	.word	0x20000594
 80078d8:	200005fc 	.word	0x200005fc

080078dc <global_stdio_init.part.0>:
 80078dc:	b510      	push	{r4, lr}
 80078de:	4b0b      	ldr	r3, [pc, #44]	@ (800790c <global_stdio_init.part.0+0x30>)
 80078e0:	4c0b      	ldr	r4, [pc, #44]	@ (8007910 <global_stdio_init.part.0+0x34>)
 80078e2:	4a0c      	ldr	r2, [pc, #48]	@ (8007914 <global_stdio_init.part.0+0x38>)
 80078e4:	601a      	str	r2, [r3, #0]
 80078e6:	4620      	mov	r0, r4
 80078e8:	2200      	movs	r2, #0
 80078ea:	2104      	movs	r1, #4
 80078ec:	f7ff ff94 	bl	8007818 <std>
 80078f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80078f4:	2201      	movs	r2, #1
 80078f6:	2109      	movs	r1, #9
 80078f8:	f7ff ff8e 	bl	8007818 <std>
 80078fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007900:	2202      	movs	r2, #2
 8007902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007906:	2112      	movs	r1, #18
 8007908:	f7ff bf86 	b.w	8007818 <std>
 800790c:	20000664 	.word	0x20000664
 8007910:	2000052c 	.word	0x2000052c
 8007914:	08007885 	.word	0x08007885

08007918 <__sfp_lock_acquire>:
 8007918:	4801      	ldr	r0, [pc, #4]	@ (8007920 <__sfp_lock_acquire+0x8>)
 800791a:	f000 b920 	b.w	8007b5e <__retarget_lock_acquire_recursive>
 800791e:	bf00      	nop
 8007920:	2000066d 	.word	0x2000066d

08007924 <__sfp_lock_release>:
 8007924:	4801      	ldr	r0, [pc, #4]	@ (800792c <__sfp_lock_release+0x8>)
 8007926:	f000 b91b 	b.w	8007b60 <__retarget_lock_release_recursive>
 800792a:	bf00      	nop
 800792c:	2000066d 	.word	0x2000066d

08007930 <__sinit>:
 8007930:	b510      	push	{r4, lr}
 8007932:	4604      	mov	r4, r0
 8007934:	f7ff fff0 	bl	8007918 <__sfp_lock_acquire>
 8007938:	6a23      	ldr	r3, [r4, #32]
 800793a:	b11b      	cbz	r3, 8007944 <__sinit+0x14>
 800793c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007940:	f7ff bff0 	b.w	8007924 <__sfp_lock_release>
 8007944:	4b04      	ldr	r3, [pc, #16]	@ (8007958 <__sinit+0x28>)
 8007946:	6223      	str	r3, [r4, #32]
 8007948:	4b04      	ldr	r3, [pc, #16]	@ (800795c <__sinit+0x2c>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d1f5      	bne.n	800793c <__sinit+0xc>
 8007950:	f7ff ffc4 	bl	80078dc <global_stdio_init.part.0>
 8007954:	e7f2      	b.n	800793c <__sinit+0xc>
 8007956:	bf00      	nop
 8007958:	0800789d 	.word	0x0800789d
 800795c:	20000664 	.word	0x20000664

08007960 <_fwalk_sglue>:
 8007960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007964:	4607      	mov	r7, r0
 8007966:	4688      	mov	r8, r1
 8007968:	4614      	mov	r4, r2
 800796a:	2600      	movs	r6, #0
 800796c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007970:	f1b9 0901 	subs.w	r9, r9, #1
 8007974:	d505      	bpl.n	8007982 <_fwalk_sglue+0x22>
 8007976:	6824      	ldr	r4, [r4, #0]
 8007978:	2c00      	cmp	r4, #0
 800797a:	d1f7      	bne.n	800796c <_fwalk_sglue+0xc>
 800797c:	4630      	mov	r0, r6
 800797e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007982:	89ab      	ldrh	r3, [r5, #12]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d907      	bls.n	8007998 <_fwalk_sglue+0x38>
 8007988:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800798c:	3301      	adds	r3, #1
 800798e:	d003      	beq.n	8007998 <_fwalk_sglue+0x38>
 8007990:	4629      	mov	r1, r5
 8007992:	4638      	mov	r0, r7
 8007994:	47c0      	blx	r8
 8007996:	4306      	orrs	r6, r0
 8007998:	3568      	adds	r5, #104	@ 0x68
 800799a:	e7e9      	b.n	8007970 <_fwalk_sglue+0x10>

0800799c <siprintf>:
 800799c:	b40e      	push	{r1, r2, r3}
 800799e:	b500      	push	{lr}
 80079a0:	b09c      	sub	sp, #112	@ 0x70
 80079a2:	ab1d      	add	r3, sp, #116	@ 0x74
 80079a4:	9002      	str	r0, [sp, #8]
 80079a6:	9006      	str	r0, [sp, #24]
 80079a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80079ac:	4809      	ldr	r0, [pc, #36]	@ (80079d4 <siprintf+0x38>)
 80079ae:	9107      	str	r1, [sp, #28]
 80079b0:	9104      	str	r1, [sp, #16]
 80079b2:	4909      	ldr	r1, [pc, #36]	@ (80079d8 <siprintf+0x3c>)
 80079b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80079b8:	9105      	str	r1, [sp, #20]
 80079ba:	6800      	ldr	r0, [r0, #0]
 80079bc:	9301      	str	r3, [sp, #4]
 80079be:	a902      	add	r1, sp, #8
 80079c0:	f002 fbb4 	bl	800a12c <_svfiprintf_r>
 80079c4:	9b02      	ldr	r3, [sp, #8]
 80079c6:	2200      	movs	r2, #0
 80079c8:	701a      	strb	r2, [r3, #0]
 80079ca:	b01c      	add	sp, #112	@ 0x70
 80079cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80079d0:	b003      	add	sp, #12
 80079d2:	4770      	bx	lr
 80079d4:	2000003c 	.word	0x2000003c
 80079d8:	ffff0208 	.word	0xffff0208

080079dc <__sread>:
 80079dc:	b510      	push	{r4, lr}
 80079de:	460c      	mov	r4, r1
 80079e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079e4:	f000 f86c 	bl	8007ac0 <_read_r>
 80079e8:	2800      	cmp	r0, #0
 80079ea:	bfab      	itete	ge
 80079ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80079ee:	89a3      	ldrhlt	r3, [r4, #12]
 80079f0:	181b      	addge	r3, r3, r0
 80079f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80079f6:	bfac      	ite	ge
 80079f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80079fa:	81a3      	strhlt	r3, [r4, #12]
 80079fc:	bd10      	pop	{r4, pc}

080079fe <__swrite>:
 80079fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a02:	461f      	mov	r7, r3
 8007a04:	898b      	ldrh	r3, [r1, #12]
 8007a06:	05db      	lsls	r3, r3, #23
 8007a08:	4605      	mov	r5, r0
 8007a0a:	460c      	mov	r4, r1
 8007a0c:	4616      	mov	r6, r2
 8007a0e:	d505      	bpl.n	8007a1c <__swrite+0x1e>
 8007a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a14:	2302      	movs	r3, #2
 8007a16:	2200      	movs	r2, #0
 8007a18:	f000 f840 	bl	8007a9c <_lseek_r>
 8007a1c:	89a3      	ldrh	r3, [r4, #12]
 8007a1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a26:	81a3      	strh	r3, [r4, #12]
 8007a28:	4632      	mov	r2, r6
 8007a2a:	463b      	mov	r3, r7
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a32:	f000 b857 	b.w	8007ae4 <_write_r>

08007a36 <__sseek>:
 8007a36:	b510      	push	{r4, lr}
 8007a38:	460c      	mov	r4, r1
 8007a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a3e:	f000 f82d 	bl	8007a9c <_lseek_r>
 8007a42:	1c43      	adds	r3, r0, #1
 8007a44:	89a3      	ldrh	r3, [r4, #12]
 8007a46:	bf15      	itete	ne
 8007a48:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007a4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007a4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007a52:	81a3      	strheq	r3, [r4, #12]
 8007a54:	bf18      	it	ne
 8007a56:	81a3      	strhne	r3, [r4, #12]
 8007a58:	bd10      	pop	{r4, pc}

08007a5a <__sclose>:
 8007a5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a5e:	f000 b80d 	b.w	8007a7c <_close_r>

08007a62 <memset>:
 8007a62:	4402      	add	r2, r0
 8007a64:	4603      	mov	r3, r0
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d100      	bne.n	8007a6c <memset+0xa>
 8007a6a:	4770      	bx	lr
 8007a6c:	f803 1b01 	strb.w	r1, [r3], #1
 8007a70:	e7f9      	b.n	8007a66 <memset+0x4>
	...

08007a74 <_localeconv_r>:
 8007a74:	4800      	ldr	r0, [pc, #0]	@ (8007a78 <_localeconv_r+0x4>)
 8007a76:	4770      	bx	lr
 8007a78:	2000017c 	.word	0x2000017c

08007a7c <_close_r>:
 8007a7c:	b538      	push	{r3, r4, r5, lr}
 8007a7e:	4d06      	ldr	r5, [pc, #24]	@ (8007a98 <_close_r+0x1c>)
 8007a80:	2300      	movs	r3, #0
 8007a82:	4604      	mov	r4, r0
 8007a84:	4608      	mov	r0, r1
 8007a86:	602b      	str	r3, [r5, #0]
 8007a88:	f7fb fb81 	bl	800318e <_close>
 8007a8c:	1c43      	adds	r3, r0, #1
 8007a8e:	d102      	bne.n	8007a96 <_close_r+0x1a>
 8007a90:	682b      	ldr	r3, [r5, #0]
 8007a92:	b103      	cbz	r3, 8007a96 <_close_r+0x1a>
 8007a94:	6023      	str	r3, [r4, #0]
 8007a96:	bd38      	pop	{r3, r4, r5, pc}
 8007a98:	20000668 	.word	0x20000668

08007a9c <_lseek_r>:
 8007a9c:	b538      	push	{r3, r4, r5, lr}
 8007a9e:	4d07      	ldr	r5, [pc, #28]	@ (8007abc <_lseek_r+0x20>)
 8007aa0:	4604      	mov	r4, r0
 8007aa2:	4608      	mov	r0, r1
 8007aa4:	4611      	mov	r1, r2
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	602a      	str	r2, [r5, #0]
 8007aaa:	461a      	mov	r2, r3
 8007aac:	f7fb fb96 	bl	80031dc <_lseek>
 8007ab0:	1c43      	adds	r3, r0, #1
 8007ab2:	d102      	bne.n	8007aba <_lseek_r+0x1e>
 8007ab4:	682b      	ldr	r3, [r5, #0]
 8007ab6:	b103      	cbz	r3, 8007aba <_lseek_r+0x1e>
 8007ab8:	6023      	str	r3, [r4, #0]
 8007aba:	bd38      	pop	{r3, r4, r5, pc}
 8007abc:	20000668 	.word	0x20000668

08007ac0 <_read_r>:
 8007ac0:	b538      	push	{r3, r4, r5, lr}
 8007ac2:	4d07      	ldr	r5, [pc, #28]	@ (8007ae0 <_read_r+0x20>)
 8007ac4:	4604      	mov	r4, r0
 8007ac6:	4608      	mov	r0, r1
 8007ac8:	4611      	mov	r1, r2
 8007aca:	2200      	movs	r2, #0
 8007acc:	602a      	str	r2, [r5, #0]
 8007ace:	461a      	mov	r2, r3
 8007ad0:	f7fb fb24 	bl	800311c <_read>
 8007ad4:	1c43      	adds	r3, r0, #1
 8007ad6:	d102      	bne.n	8007ade <_read_r+0x1e>
 8007ad8:	682b      	ldr	r3, [r5, #0]
 8007ada:	b103      	cbz	r3, 8007ade <_read_r+0x1e>
 8007adc:	6023      	str	r3, [r4, #0]
 8007ade:	bd38      	pop	{r3, r4, r5, pc}
 8007ae0:	20000668 	.word	0x20000668

08007ae4 <_write_r>:
 8007ae4:	b538      	push	{r3, r4, r5, lr}
 8007ae6:	4d07      	ldr	r5, [pc, #28]	@ (8007b04 <_write_r+0x20>)
 8007ae8:	4604      	mov	r4, r0
 8007aea:	4608      	mov	r0, r1
 8007aec:	4611      	mov	r1, r2
 8007aee:	2200      	movs	r2, #0
 8007af0:	602a      	str	r2, [r5, #0]
 8007af2:	461a      	mov	r2, r3
 8007af4:	f7fb fb2f 	bl	8003156 <_write>
 8007af8:	1c43      	adds	r3, r0, #1
 8007afa:	d102      	bne.n	8007b02 <_write_r+0x1e>
 8007afc:	682b      	ldr	r3, [r5, #0]
 8007afe:	b103      	cbz	r3, 8007b02 <_write_r+0x1e>
 8007b00:	6023      	str	r3, [r4, #0]
 8007b02:	bd38      	pop	{r3, r4, r5, pc}
 8007b04:	20000668 	.word	0x20000668

08007b08 <__errno>:
 8007b08:	4b01      	ldr	r3, [pc, #4]	@ (8007b10 <__errno+0x8>)
 8007b0a:	6818      	ldr	r0, [r3, #0]
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	2000003c 	.word	0x2000003c

08007b14 <__libc_init_array>:
 8007b14:	b570      	push	{r4, r5, r6, lr}
 8007b16:	4d0d      	ldr	r5, [pc, #52]	@ (8007b4c <__libc_init_array+0x38>)
 8007b18:	4c0d      	ldr	r4, [pc, #52]	@ (8007b50 <__libc_init_array+0x3c>)
 8007b1a:	1b64      	subs	r4, r4, r5
 8007b1c:	10a4      	asrs	r4, r4, #2
 8007b1e:	2600      	movs	r6, #0
 8007b20:	42a6      	cmp	r6, r4
 8007b22:	d109      	bne.n	8007b38 <__libc_init_array+0x24>
 8007b24:	4d0b      	ldr	r5, [pc, #44]	@ (8007b54 <__libc_init_array+0x40>)
 8007b26:	4c0c      	ldr	r4, [pc, #48]	@ (8007b58 <__libc_init_array+0x44>)
 8007b28:	f004 fee2 	bl	800c8f0 <_init>
 8007b2c:	1b64      	subs	r4, r4, r5
 8007b2e:	10a4      	asrs	r4, r4, #2
 8007b30:	2600      	movs	r6, #0
 8007b32:	42a6      	cmp	r6, r4
 8007b34:	d105      	bne.n	8007b42 <__libc_init_array+0x2e>
 8007b36:	bd70      	pop	{r4, r5, r6, pc}
 8007b38:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b3c:	4798      	blx	r3
 8007b3e:	3601      	adds	r6, #1
 8007b40:	e7ee      	b.n	8007b20 <__libc_init_array+0xc>
 8007b42:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b46:	4798      	blx	r3
 8007b48:	3601      	adds	r6, #1
 8007b4a:	e7f2      	b.n	8007b32 <__libc_init_array+0x1e>
 8007b4c:	0800cf30 	.word	0x0800cf30
 8007b50:	0800cf30 	.word	0x0800cf30
 8007b54:	0800cf30 	.word	0x0800cf30
 8007b58:	0800cf34 	.word	0x0800cf34

08007b5c <__retarget_lock_init_recursive>:
 8007b5c:	4770      	bx	lr

08007b5e <__retarget_lock_acquire_recursive>:
 8007b5e:	4770      	bx	lr

08007b60 <__retarget_lock_release_recursive>:
 8007b60:	4770      	bx	lr
	...

08007b64 <nanf>:
 8007b64:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007b6c <nanf+0x8>
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop
 8007b6c:	7fc00000 	.word	0x7fc00000

08007b70 <quorem>:
 8007b70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b74:	6903      	ldr	r3, [r0, #16]
 8007b76:	690c      	ldr	r4, [r1, #16]
 8007b78:	42a3      	cmp	r3, r4
 8007b7a:	4607      	mov	r7, r0
 8007b7c:	db7e      	blt.n	8007c7c <quorem+0x10c>
 8007b7e:	3c01      	subs	r4, #1
 8007b80:	f101 0814 	add.w	r8, r1, #20
 8007b84:	00a3      	lsls	r3, r4, #2
 8007b86:	f100 0514 	add.w	r5, r0, #20
 8007b8a:	9300      	str	r3, [sp, #0]
 8007b8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b90:	9301      	str	r3, [sp, #4]
 8007b92:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007b96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ba2:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ba6:	d32e      	bcc.n	8007c06 <quorem+0x96>
 8007ba8:	f04f 0a00 	mov.w	sl, #0
 8007bac:	46c4      	mov	ip, r8
 8007bae:	46ae      	mov	lr, r5
 8007bb0:	46d3      	mov	fp, sl
 8007bb2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007bb6:	b298      	uxth	r0, r3
 8007bb8:	fb06 a000 	mla	r0, r6, r0, sl
 8007bbc:	0c02      	lsrs	r2, r0, #16
 8007bbe:	0c1b      	lsrs	r3, r3, #16
 8007bc0:	fb06 2303 	mla	r3, r6, r3, r2
 8007bc4:	f8de 2000 	ldr.w	r2, [lr]
 8007bc8:	b280      	uxth	r0, r0
 8007bca:	b292      	uxth	r2, r2
 8007bcc:	1a12      	subs	r2, r2, r0
 8007bce:	445a      	add	r2, fp
 8007bd0:	f8de 0000 	ldr.w	r0, [lr]
 8007bd4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007bde:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007be2:	b292      	uxth	r2, r2
 8007be4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007be8:	45e1      	cmp	r9, ip
 8007bea:	f84e 2b04 	str.w	r2, [lr], #4
 8007bee:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007bf2:	d2de      	bcs.n	8007bb2 <quorem+0x42>
 8007bf4:	9b00      	ldr	r3, [sp, #0]
 8007bf6:	58eb      	ldr	r3, [r5, r3]
 8007bf8:	b92b      	cbnz	r3, 8007c06 <quorem+0x96>
 8007bfa:	9b01      	ldr	r3, [sp, #4]
 8007bfc:	3b04      	subs	r3, #4
 8007bfe:	429d      	cmp	r5, r3
 8007c00:	461a      	mov	r2, r3
 8007c02:	d32f      	bcc.n	8007c64 <quorem+0xf4>
 8007c04:	613c      	str	r4, [r7, #16]
 8007c06:	4638      	mov	r0, r7
 8007c08:	f001 f9c2 	bl	8008f90 <__mcmp>
 8007c0c:	2800      	cmp	r0, #0
 8007c0e:	db25      	blt.n	8007c5c <quorem+0xec>
 8007c10:	4629      	mov	r1, r5
 8007c12:	2000      	movs	r0, #0
 8007c14:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c18:	f8d1 c000 	ldr.w	ip, [r1]
 8007c1c:	fa1f fe82 	uxth.w	lr, r2
 8007c20:	fa1f f38c 	uxth.w	r3, ip
 8007c24:	eba3 030e 	sub.w	r3, r3, lr
 8007c28:	4403      	add	r3, r0
 8007c2a:	0c12      	lsrs	r2, r2, #16
 8007c2c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007c30:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c3a:	45c1      	cmp	r9, r8
 8007c3c:	f841 3b04 	str.w	r3, [r1], #4
 8007c40:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007c44:	d2e6      	bcs.n	8007c14 <quorem+0xa4>
 8007c46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c4e:	b922      	cbnz	r2, 8007c5a <quorem+0xea>
 8007c50:	3b04      	subs	r3, #4
 8007c52:	429d      	cmp	r5, r3
 8007c54:	461a      	mov	r2, r3
 8007c56:	d30b      	bcc.n	8007c70 <quorem+0x100>
 8007c58:	613c      	str	r4, [r7, #16]
 8007c5a:	3601      	adds	r6, #1
 8007c5c:	4630      	mov	r0, r6
 8007c5e:	b003      	add	sp, #12
 8007c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c64:	6812      	ldr	r2, [r2, #0]
 8007c66:	3b04      	subs	r3, #4
 8007c68:	2a00      	cmp	r2, #0
 8007c6a:	d1cb      	bne.n	8007c04 <quorem+0x94>
 8007c6c:	3c01      	subs	r4, #1
 8007c6e:	e7c6      	b.n	8007bfe <quorem+0x8e>
 8007c70:	6812      	ldr	r2, [r2, #0]
 8007c72:	3b04      	subs	r3, #4
 8007c74:	2a00      	cmp	r2, #0
 8007c76:	d1ef      	bne.n	8007c58 <quorem+0xe8>
 8007c78:	3c01      	subs	r4, #1
 8007c7a:	e7ea      	b.n	8007c52 <quorem+0xe2>
 8007c7c:	2000      	movs	r0, #0
 8007c7e:	e7ee      	b.n	8007c5e <quorem+0xee>

08007c80 <_dtoa_r>:
 8007c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c84:	69c7      	ldr	r7, [r0, #28]
 8007c86:	b099      	sub	sp, #100	@ 0x64
 8007c88:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007c8c:	ec55 4b10 	vmov	r4, r5, d0
 8007c90:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007c92:	9109      	str	r1, [sp, #36]	@ 0x24
 8007c94:	4683      	mov	fp, r0
 8007c96:	920e      	str	r2, [sp, #56]	@ 0x38
 8007c98:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007c9a:	b97f      	cbnz	r7, 8007cbc <_dtoa_r+0x3c>
 8007c9c:	2010      	movs	r0, #16
 8007c9e:	f000 fdfd 	bl	800889c <malloc>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	f8cb 001c 	str.w	r0, [fp, #28]
 8007ca8:	b920      	cbnz	r0, 8007cb4 <_dtoa_r+0x34>
 8007caa:	4ba7      	ldr	r3, [pc, #668]	@ (8007f48 <_dtoa_r+0x2c8>)
 8007cac:	21ef      	movs	r1, #239	@ 0xef
 8007cae:	48a7      	ldr	r0, [pc, #668]	@ (8007f4c <_dtoa_r+0x2cc>)
 8007cb0:	f002 fc36 	bl	800a520 <__assert_func>
 8007cb4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007cb8:	6007      	str	r7, [r0, #0]
 8007cba:	60c7      	str	r7, [r0, #12]
 8007cbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007cc0:	6819      	ldr	r1, [r3, #0]
 8007cc2:	b159      	cbz	r1, 8007cdc <_dtoa_r+0x5c>
 8007cc4:	685a      	ldr	r2, [r3, #4]
 8007cc6:	604a      	str	r2, [r1, #4]
 8007cc8:	2301      	movs	r3, #1
 8007cca:	4093      	lsls	r3, r2
 8007ccc:	608b      	str	r3, [r1, #8]
 8007cce:	4658      	mov	r0, fp
 8007cd0:	f000 feda 	bl	8008a88 <_Bfree>
 8007cd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	601a      	str	r2, [r3, #0]
 8007cdc:	1e2b      	subs	r3, r5, #0
 8007cde:	bfb9      	ittee	lt
 8007ce0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007ce4:	9303      	strlt	r3, [sp, #12]
 8007ce6:	2300      	movge	r3, #0
 8007ce8:	6033      	strge	r3, [r6, #0]
 8007cea:	9f03      	ldr	r7, [sp, #12]
 8007cec:	4b98      	ldr	r3, [pc, #608]	@ (8007f50 <_dtoa_r+0x2d0>)
 8007cee:	bfbc      	itt	lt
 8007cf0:	2201      	movlt	r2, #1
 8007cf2:	6032      	strlt	r2, [r6, #0]
 8007cf4:	43bb      	bics	r3, r7
 8007cf6:	d112      	bne.n	8007d1e <_dtoa_r+0x9e>
 8007cf8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007cfa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007cfe:	6013      	str	r3, [r2, #0]
 8007d00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007d04:	4323      	orrs	r3, r4
 8007d06:	f000 854d 	beq.w	80087a4 <_dtoa_r+0xb24>
 8007d0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d0c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007f64 <_dtoa_r+0x2e4>
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	f000 854f 	beq.w	80087b4 <_dtoa_r+0xb34>
 8007d16:	f10a 0303 	add.w	r3, sl, #3
 8007d1a:	f000 bd49 	b.w	80087b0 <_dtoa_r+0xb30>
 8007d1e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d22:	2200      	movs	r2, #0
 8007d24:	ec51 0b17 	vmov	r0, r1, d7
 8007d28:	2300      	movs	r3, #0
 8007d2a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007d2e:	f7f8 fecb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d32:	4680      	mov	r8, r0
 8007d34:	b158      	cbz	r0, 8007d4e <_dtoa_r+0xce>
 8007d36:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007d38:	2301      	movs	r3, #1
 8007d3a:	6013      	str	r3, [r2, #0]
 8007d3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d3e:	b113      	cbz	r3, 8007d46 <_dtoa_r+0xc6>
 8007d40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007d42:	4b84      	ldr	r3, [pc, #528]	@ (8007f54 <_dtoa_r+0x2d4>)
 8007d44:	6013      	str	r3, [r2, #0]
 8007d46:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007f68 <_dtoa_r+0x2e8>
 8007d4a:	f000 bd33 	b.w	80087b4 <_dtoa_r+0xb34>
 8007d4e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007d52:	aa16      	add	r2, sp, #88	@ 0x58
 8007d54:	a917      	add	r1, sp, #92	@ 0x5c
 8007d56:	4658      	mov	r0, fp
 8007d58:	f001 fa3a 	bl	80091d0 <__d2b>
 8007d5c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007d60:	4681      	mov	r9, r0
 8007d62:	2e00      	cmp	r6, #0
 8007d64:	d077      	beq.n	8007e56 <_dtoa_r+0x1d6>
 8007d66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d68:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007d6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d74:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007d78:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007d7c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007d80:	4619      	mov	r1, r3
 8007d82:	2200      	movs	r2, #0
 8007d84:	4b74      	ldr	r3, [pc, #464]	@ (8007f58 <_dtoa_r+0x2d8>)
 8007d86:	f7f8 fa7f 	bl	8000288 <__aeabi_dsub>
 8007d8a:	a369      	add	r3, pc, #420	@ (adr r3, 8007f30 <_dtoa_r+0x2b0>)
 8007d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d90:	f7f8 fc32 	bl	80005f8 <__aeabi_dmul>
 8007d94:	a368      	add	r3, pc, #416	@ (adr r3, 8007f38 <_dtoa_r+0x2b8>)
 8007d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9a:	f7f8 fa77 	bl	800028c <__adddf3>
 8007d9e:	4604      	mov	r4, r0
 8007da0:	4630      	mov	r0, r6
 8007da2:	460d      	mov	r5, r1
 8007da4:	f7f8 fbbe 	bl	8000524 <__aeabi_i2d>
 8007da8:	a365      	add	r3, pc, #404	@ (adr r3, 8007f40 <_dtoa_r+0x2c0>)
 8007daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dae:	f7f8 fc23 	bl	80005f8 <__aeabi_dmul>
 8007db2:	4602      	mov	r2, r0
 8007db4:	460b      	mov	r3, r1
 8007db6:	4620      	mov	r0, r4
 8007db8:	4629      	mov	r1, r5
 8007dba:	f7f8 fa67 	bl	800028c <__adddf3>
 8007dbe:	4604      	mov	r4, r0
 8007dc0:	460d      	mov	r5, r1
 8007dc2:	f7f8 fec9 	bl	8000b58 <__aeabi_d2iz>
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	4607      	mov	r7, r0
 8007dca:	2300      	movs	r3, #0
 8007dcc:	4620      	mov	r0, r4
 8007dce:	4629      	mov	r1, r5
 8007dd0:	f7f8 fe84 	bl	8000adc <__aeabi_dcmplt>
 8007dd4:	b140      	cbz	r0, 8007de8 <_dtoa_r+0x168>
 8007dd6:	4638      	mov	r0, r7
 8007dd8:	f7f8 fba4 	bl	8000524 <__aeabi_i2d>
 8007ddc:	4622      	mov	r2, r4
 8007dde:	462b      	mov	r3, r5
 8007de0:	f7f8 fe72 	bl	8000ac8 <__aeabi_dcmpeq>
 8007de4:	b900      	cbnz	r0, 8007de8 <_dtoa_r+0x168>
 8007de6:	3f01      	subs	r7, #1
 8007de8:	2f16      	cmp	r7, #22
 8007dea:	d851      	bhi.n	8007e90 <_dtoa_r+0x210>
 8007dec:	4b5b      	ldr	r3, [pc, #364]	@ (8007f5c <_dtoa_r+0x2dc>)
 8007dee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007dfa:	f7f8 fe6f 	bl	8000adc <__aeabi_dcmplt>
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	d048      	beq.n	8007e94 <_dtoa_r+0x214>
 8007e02:	3f01      	subs	r7, #1
 8007e04:	2300      	movs	r3, #0
 8007e06:	9312      	str	r3, [sp, #72]	@ 0x48
 8007e08:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007e0a:	1b9b      	subs	r3, r3, r6
 8007e0c:	1e5a      	subs	r2, r3, #1
 8007e0e:	bf44      	itt	mi
 8007e10:	f1c3 0801 	rsbmi	r8, r3, #1
 8007e14:	2300      	movmi	r3, #0
 8007e16:	9208      	str	r2, [sp, #32]
 8007e18:	bf54      	ite	pl
 8007e1a:	f04f 0800 	movpl.w	r8, #0
 8007e1e:	9308      	strmi	r3, [sp, #32]
 8007e20:	2f00      	cmp	r7, #0
 8007e22:	db39      	blt.n	8007e98 <_dtoa_r+0x218>
 8007e24:	9b08      	ldr	r3, [sp, #32]
 8007e26:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007e28:	443b      	add	r3, r7
 8007e2a:	9308      	str	r3, [sp, #32]
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e32:	2b09      	cmp	r3, #9
 8007e34:	d864      	bhi.n	8007f00 <_dtoa_r+0x280>
 8007e36:	2b05      	cmp	r3, #5
 8007e38:	bfc4      	itt	gt
 8007e3a:	3b04      	subgt	r3, #4
 8007e3c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007e3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e40:	f1a3 0302 	sub.w	r3, r3, #2
 8007e44:	bfcc      	ite	gt
 8007e46:	2400      	movgt	r4, #0
 8007e48:	2401      	movle	r4, #1
 8007e4a:	2b03      	cmp	r3, #3
 8007e4c:	d863      	bhi.n	8007f16 <_dtoa_r+0x296>
 8007e4e:	e8df f003 	tbb	[pc, r3]
 8007e52:	372a      	.short	0x372a
 8007e54:	5535      	.short	0x5535
 8007e56:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007e5a:	441e      	add	r6, r3
 8007e5c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007e60:	2b20      	cmp	r3, #32
 8007e62:	bfc1      	itttt	gt
 8007e64:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007e68:	409f      	lslgt	r7, r3
 8007e6a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007e6e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007e72:	bfd6      	itet	le
 8007e74:	f1c3 0320 	rsble	r3, r3, #32
 8007e78:	ea47 0003 	orrgt.w	r0, r7, r3
 8007e7c:	fa04 f003 	lslle.w	r0, r4, r3
 8007e80:	f7f8 fb40 	bl	8000504 <__aeabi_ui2d>
 8007e84:	2201      	movs	r2, #1
 8007e86:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007e8a:	3e01      	subs	r6, #1
 8007e8c:	9214      	str	r2, [sp, #80]	@ 0x50
 8007e8e:	e777      	b.n	8007d80 <_dtoa_r+0x100>
 8007e90:	2301      	movs	r3, #1
 8007e92:	e7b8      	b.n	8007e06 <_dtoa_r+0x186>
 8007e94:	9012      	str	r0, [sp, #72]	@ 0x48
 8007e96:	e7b7      	b.n	8007e08 <_dtoa_r+0x188>
 8007e98:	427b      	negs	r3, r7
 8007e9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	eba8 0807 	sub.w	r8, r8, r7
 8007ea2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007ea4:	e7c4      	b.n	8007e30 <_dtoa_r+0x1b0>
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007eaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	dc35      	bgt.n	8007f1c <_dtoa_r+0x29c>
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	9300      	str	r3, [sp, #0]
 8007eb4:	9307      	str	r3, [sp, #28]
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	920e      	str	r2, [sp, #56]	@ 0x38
 8007eba:	e00b      	b.n	8007ed4 <_dtoa_r+0x254>
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e7f3      	b.n	8007ea8 <_dtoa_r+0x228>
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ec4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ec6:	18fb      	adds	r3, r7, r3
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	3301      	adds	r3, #1
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	9307      	str	r3, [sp, #28]
 8007ed0:	bfb8      	it	lt
 8007ed2:	2301      	movlt	r3, #1
 8007ed4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007ed8:	2100      	movs	r1, #0
 8007eda:	2204      	movs	r2, #4
 8007edc:	f102 0514 	add.w	r5, r2, #20
 8007ee0:	429d      	cmp	r5, r3
 8007ee2:	d91f      	bls.n	8007f24 <_dtoa_r+0x2a4>
 8007ee4:	6041      	str	r1, [r0, #4]
 8007ee6:	4658      	mov	r0, fp
 8007ee8:	f000 fd8e 	bl	8008a08 <_Balloc>
 8007eec:	4682      	mov	sl, r0
 8007eee:	2800      	cmp	r0, #0
 8007ef0:	d13c      	bne.n	8007f6c <_dtoa_r+0x2ec>
 8007ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8007f60 <_dtoa_r+0x2e0>)
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	f240 11af 	movw	r1, #431	@ 0x1af
 8007efa:	e6d8      	b.n	8007cae <_dtoa_r+0x2e>
 8007efc:	2301      	movs	r3, #1
 8007efe:	e7e0      	b.n	8007ec2 <_dtoa_r+0x242>
 8007f00:	2401      	movs	r4, #1
 8007f02:	2300      	movs	r3, #0
 8007f04:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f06:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007f08:	f04f 33ff 	mov.w	r3, #4294967295
 8007f0c:	9300      	str	r3, [sp, #0]
 8007f0e:	9307      	str	r3, [sp, #28]
 8007f10:	2200      	movs	r2, #0
 8007f12:	2312      	movs	r3, #18
 8007f14:	e7d0      	b.n	8007eb8 <_dtoa_r+0x238>
 8007f16:	2301      	movs	r3, #1
 8007f18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f1a:	e7f5      	b.n	8007f08 <_dtoa_r+0x288>
 8007f1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f1e:	9300      	str	r3, [sp, #0]
 8007f20:	9307      	str	r3, [sp, #28]
 8007f22:	e7d7      	b.n	8007ed4 <_dtoa_r+0x254>
 8007f24:	3101      	adds	r1, #1
 8007f26:	0052      	lsls	r2, r2, #1
 8007f28:	e7d8      	b.n	8007edc <_dtoa_r+0x25c>
 8007f2a:	bf00      	nop
 8007f2c:	f3af 8000 	nop.w
 8007f30:	636f4361 	.word	0x636f4361
 8007f34:	3fd287a7 	.word	0x3fd287a7
 8007f38:	8b60c8b3 	.word	0x8b60c8b3
 8007f3c:	3fc68a28 	.word	0x3fc68a28
 8007f40:	509f79fb 	.word	0x509f79fb
 8007f44:	3fd34413 	.word	0x3fd34413
 8007f48:	0800c966 	.word	0x0800c966
 8007f4c:	0800c97d 	.word	0x0800c97d
 8007f50:	7ff00000 	.word	0x7ff00000
 8007f54:	0800c931 	.word	0x0800c931
 8007f58:	3ff80000 	.word	0x3ff80000
 8007f5c:	0800ca78 	.word	0x0800ca78
 8007f60:	0800c9d5 	.word	0x0800c9d5
 8007f64:	0800c962 	.word	0x0800c962
 8007f68:	0800c930 	.word	0x0800c930
 8007f6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007f70:	6018      	str	r0, [r3, #0]
 8007f72:	9b07      	ldr	r3, [sp, #28]
 8007f74:	2b0e      	cmp	r3, #14
 8007f76:	f200 80a4 	bhi.w	80080c2 <_dtoa_r+0x442>
 8007f7a:	2c00      	cmp	r4, #0
 8007f7c:	f000 80a1 	beq.w	80080c2 <_dtoa_r+0x442>
 8007f80:	2f00      	cmp	r7, #0
 8007f82:	dd33      	ble.n	8007fec <_dtoa_r+0x36c>
 8007f84:	4bad      	ldr	r3, [pc, #692]	@ (800823c <_dtoa_r+0x5bc>)
 8007f86:	f007 020f 	and.w	r2, r7, #15
 8007f8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f8e:	ed93 7b00 	vldr	d7, [r3]
 8007f92:	05f8      	lsls	r0, r7, #23
 8007f94:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007f98:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007f9c:	d516      	bpl.n	8007fcc <_dtoa_r+0x34c>
 8007f9e:	4ba8      	ldr	r3, [pc, #672]	@ (8008240 <_dtoa_r+0x5c0>)
 8007fa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007fa4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007fa8:	f7f8 fc50 	bl	800084c <__aeabi_ddiv>
 8007fac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fb0:	f004 040f 	and.w	r4, r4, #15
 8007fb4:	2603      	movs	r6, #3
 8007fb6:	4da2      	ldr	r5, [pc, #648]	@ (8008240 <_dtoa_r+0x5c0>)
 8007fb8:	b954      	cbnz	r4, 8007fd0 <_dtoa_r+0x350>
 8007fba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fc2:	f7f8 fc43 	bl	800084c <__aeabi_ddiv>
 8007fc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fca:	e028      	b.n	800801e <_dtoa_r+0x39e>
 8007fcc:	2602      	movs	r6, #2
 8007fce:	e7f2      	b.n	8007fb6 <_dtoa_r+0x336>
 8007fd0:	07e1      	lsls	r1, r4, #31
 8007fd2:	d508      	bpl.n	8007fe6 <_dtoa_r+0x366>
 8007fd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007fdc:	f7f8 fb0c 	bl	80005f8 <__aeabi_dmul>
 8007fe0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007fe4:	3601      	adds	r6, #1
 8007fe6:	1064      	asrs	r4, r4, #1
 8007fe8:	3508      	adds	r5, #8
 8007fea:	e7e5      	b.n	8007fb8 <_dtoa_r+0x338>
 8007fec:	f000 80d2 	beq.w	8008194 <_dtoa_r+0x514>
 8007ff0:	427c      	negs	r4, r7
 8007ff2:	4b92      	ldr	r3, [pc, #584]	@ (800823c <_dtoa_r+0x5bc>)
 8007ff4:	4d92      	ldr	r5, [pc, #584]	@ (8008240 <_dtoa_r+0x5c0>)
 8007ff6:	f004 020f 	and.w	r2, r4, #15
 8007ffa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008002:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008006:	f7f8 faf7 	bl	80005f8 <__aeabi_dmul>
 800800a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800800e:	1124      	asrs	r4, r4, #4
 8008010:	2300      	movs	r3, #0
 8008012:	2602      	movs	r6, #2
 8008014:	2c00      	cmp	r4, #0
 8008016:	f040 80b2 	bne.w	800817e <_dtoa_r+0x4fe>
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1d3      	bne.n	8007fc6 <_dtoa_r+0x346>
 800801e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008020:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008024:	2b00      	cmp	r3, #0
 8008026:	f000 80b7 	beq.w	8008198 <_dtoa_r+0x518>
 800802a:	4b86      	ldr	r3, [pc, #536]	@ (8008244 <_dtoa_r+0x5c4>)
 800802c:	2200      	movs	r2, #0
 800802e:	4620      	mov	r0, r4
 8008030:	4629      	mov	r1, r5
 8008032:	f7f8 fd53 	bl	8000adc <__aeabi_dcmplt>
 8008036:	2800      	cmp	r0, #0
 8008038:	f000 80ae 	beq.w	8008198 <_dtoa_r+0x518>
 800803c:	9b07      	ldr	r3, [sp, #28]
 800803e:	2b00      	cmp	r3, #0
 8008040:	f000 80aa 	beq.w	8008198 <_dtoa_r+0x518>
 8008044:	9b00      	ldr	r3, [sp, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	dd37      	ble.n	80080ba <_dtoa_r+0x43a>
 800804a:	1e7b      	subs	r3, r7, #1
 800804c:	9304      	str	r3, [sp, #16]
 800804e:	4620      	mov	r0, r4
 8008050:	4b7d      	ldr	r3, [pc, #500]	@ (8008248 <_dtoa_r+0x5c8>)
 8008052:	2200      	movs	r2, #0
 8008054:	4629      	mov	r1, r5
 8008056:	f7f8 facf 	bl	80005f8 <__aeabi_dmul>
 800805a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800805e:	9c00      	ldr	r4, [sp, #0]
 8008060:	3601      	adds	r6, #1
 8008062:	4630      	mov	r0, r6
 8008064:	f7f8 fa5e 	bl	8000524 <__aeabi_i2d>
 8008068:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800806c:	f7f8 fac4 	bl	80005f8 <__aeabi_dmul>
 8008070:	4b76      	ldr	r3, [pc, #472]	@ (800824c <_dtoa_r+0x5cc>)
 8008072:	2200      	movs	r2, #0
 8008074:	f7f8 f90a 	bl	800028c <__adddf3>
 8008078:	4605      	mov	r5, r0
 800807a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800807e:	2c00      	cmp	r4, #0
 8008080:	f040 808d 	bne.w	800819e <_dtoa_r+0x51e>
 8008084:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008088:	4b71      	ldr	r3, [pc, #452]	@ (8008250 <_dtoa_r+0x5d0>)
 800808a:	2200      	movs	r2, #0
 800808c:	f7f8 f8fc 	bl	8000288 <__aeabi_dsub>
 8008090:	4602      	mov	r2, r0
 8008092:	460b      	mov	r3, r1
 8008094:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008098:	462a      	mov	r2, r5
 800809a:	4633      	mov	r3, r6
 800809c:	f7f8 fd3c 	bl	8000b18 <__aeabi_dcmpgt>
 80080a0:	2800      	cmp	r0, #0
 80080a2:	f040 828b 	bne.w	80085bc <_dtoa_r+0x93c>
 80080a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080aa:	462a      	mov	r2, r5
 80080ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80080b0:	f7f8 fd14 	bl	8000adc <__aeabi_dcmplt>
 80080b4:	2800      	cmp	r0, #0
 80080b6:	f040 8128 	bne.w	800830a <_dtoa_r+0x68a>
 80080ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80080be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80080c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f2c0 815a 	blt.w	800837e <_dtoa_r+0x6fe>
 80080ca:	2f0e      	cmp	r7, #14
 80080cc:	f300 8157 	bgt.w	800837e <_dtoa_r+0x6fe>
 80080d0:	4b5a      	ldr	r3, [pc, #360]	@ (800823c <_dtoa_r+0x5bc>)
 80080d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80080d6:	ed93 7b00 	vldr	d7, [r3]
 80080da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080dc:	2b00      	cmp	r3, #0
 80080de:	ed8d 7b00 	vstr	d7, [sp]
 80080e2:	da03      	bge.n	80080ec <_dtoa_r+0x46c>
 80080e4:	9b07      	ldr	r3, [sp, #28]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	f340 8101 	ble.w	80082ee <_dtoa_r+0x66e>
 80080ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80080f0:	4656      	mov	r6, sl
 80080f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080f6:	4620      	mov	r0, r4
 80080f8:	4629      	mov	r1, r5
 80080fa:	f7f8 fba7 	bl	800084c <__aeabi_ddiv>
 80080fe:	f7f8 fd2b 	bl	8000b58 <__aeabi_d2iz>
 8008102:	4680      	mov	r8, r0
 8008104:	f7f8 fa0e 	bl	8000524 <__aeabi_i2d>
 8008108:	e9dd 2300 	ldrd	r2, r3, [sp]
 800810c:	f7f8 fa74 	bl	80005f8 <__aeabi_dmul>
 8008110:	4602      	mov	r2, r0
 8008112:	460b      	mov	r3, r1
 8008114:	4620      	mov	r0, r4
 8008116:	4629      	mov	r1, r5
 8008118:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800811c:	f7f8 f8b4 	bl	8000288 <__aeabi_dsub>
 8008120:	f806 4b01 	strb.w	r4, [r6], #1
 8008124:	9d07      	ldr	r5, [sp, #28]
 8008126:	eba6 040a 	sub.w	r4, r6, sl
 800812a:	42a5      	cmp	r5, r4
 800812c:	4602      	mov	r2, r0
 800812e:	460b      	mov	r3, r1
 8008130:	f040 8117 	bne.w	8008362 <_dtoa_r+0x6e2>
 8008134:	f7f8 f8aa 	bl	800028c <__adddf3>
 8008138:	e9dd 2300 	ldrd	r2, r3, [sp]
 800813c:	4604      	mov	r4, r0
 800813e:	460d      	mov	r5, r1
 8008140:	f7f8 fcea 	bl	8000b18 <__aeabi_dcmpgt>
 8008144:	2800      	cmp	r0, #0
 8008146:	f040 80f9 	bne.w	800833c <_dtoa_r+0x6bc>
 800814a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800814e:	4620      	mov	r0, r4
 8008150:	4629      	mov	r1, r5
 8008152:	f7f8 fcb9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008156:	b118      	cbz	r0, 8008160 <_dtoa_r+0x4e0>
 8008158:	f018 0f01 	tst.w	r8, #1
 800815c:	f040 80ee 	bne.w	800833c <_dtoa_r+0x6bc>
 8008160:	4649      	mov	r1, r9
 8008162:	4658      	mov	r0, fp
 8008164:	f000 fc90 	bl	8008a88 <_Bfree>
 8008168:	2300      	movs	r3, #0
 800816a:	7033      	strb	r3, [r6, #0]
 800816c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800816e:	3701      	adds	r7, #1
 8008170:	601f      	str	r7, [r3, #0]
 8008172:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008174:	2b00      	cmp	r3, #0
 8008176:	f000 831d 	beq.w	80087b4 <_dtoa_r+0xb34>
 800817a:	601e      	str	r6, [r3, #0]
 800817c:	e31a      	b.n	80087b4 <_dtoa_r+0xb34>
 800817e:	07e2      	lsls	r2, r4, #31
 8008180:	d505      	bpl.n	800818e <_dtoa_r+0x50e>
 8008182:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008186:	f7f8 fa37 	bl	80005f8 <__aeabi_dmul>
 800818a:	3601      	adds	r6, #1
 800818c:	2301      	movs	r3, #1
 800818e:	1064      	asrs	r4, r4, #1
 8008190:	3508      	adds	r5, #8
 8008192:	e73f      	b.n	8008014 <_dtoa_r+0x394>
 8008194:	2602      	movs	r6, #2
 8008196:	e742      	b.n	800801e <_dtoa_r+0x39e>
 8008198:	9c07      	ldr	r4, [sp, #28]
 800819a:	9704      	str	r7, [sp, #16]
 800819c:	e761      	b.n	8008062 <_dtoa_r+0x3e2>
 800819e:	4b27      	ldr	r3, [pc, #156]	@ (800823c <_dtoa_r+0x5bc>)
 80081a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80081a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80081a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80081aa:	4454      	add	r4, sl
 80081ac:	2900      	cmp	r1, #0
 80081ae:	d053      	beq.n	8008258 <_dtoa_r+0x5d8>
 80081b0:	4928      	ldr	r1, [pc, #160]	@ (8008254 <_dtoa_r+0x5d4>)
 80081b2:	2000      	movs	r0, #0
 80081b4:	f7f8 fb4a 	bl	800084c <__aeabi_ddiv>
 80081b8:	4633      	mov	r3, r6
 80081ba:	462a      	mov	r2, r5
 80081bc:	f7f8 f864 	bl	8000288 <__aeabi_dsub>
 80081c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80081c4:	4656      	mov	r6, sl
 80081c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081ca:	f7f8 fcc5 	bl	8000b58 <__aeabi_d2iz>
 80081ce:	4605      	mov	r5, r0
 80081d0:	f7f8 f9a8 	bl	8000524 <__aeabi_i2d>
 80081d4:	4602      	mov	r2, r0
 80081d6:	460b      	mov	r3, r1
 80081d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081dc:	f7f8 f854 	bl	8000288 <__aeabi_dsub>
 80081e0:	3530      	adds	r5, #48	@ 0x30
 80081e2:	4602      	mov	r2, r0
 80081e4:	460b      	mov	r3, r1
 80081e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80081ea:	f806 5b01 	strb.w	r5, [r6], #1
 80081ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80081f2:	f7f8 fc73 	bl	8000adc <__aeabi_dcmplt>
 80081f6:	2800      	cmp	r0, #0
 80081f8:	d171      	bne.n	80082de <_dtoa_r+0x65e>
 80081fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081fe:	4911      	ldr	r1, [pc, #68]	@ (8008244 <_dtoa_r+0x5c4>)
 8008200:	2000      	movs	r0, #0
 8008202:	f7f8 f841 	bl	8000288 <__aeabi_dsub>
 8008206:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800820a:	f7f8 fc67 	bl	8000adc <__aeabi_dcmplt>
 800820e:	2800      	cmp	r0, #0
 8008210:	f040 8095 	bne.w	800833e <_dtoa_r+0x6be>
 8008214:	42a6      	cmp	r6, r4
 8008216:	f43f af50 	beq.w	80080ba <_dtoa_r+0x43a>
 800821a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800821e:	4b0a      	ldr	r3, [pc, #40]	@ (8008248 <_dtoa_r+0x5c8>)
 8008220:	2200      	movs	r2, #0
 8008222:	f7f8 f9e9 	bl	80005f8 <__aeabi_dmul>
 8008226:	4b08      	ldr	r3, [pc, #32]	@ (8008248 <_dtoa_r+0x5c8>)
 8008228:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800822c:	2200      	movs	r2, #0
 800822e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008232:	f7f8 f9e1 	bl	80005f8 <__aeabi_dmul>
 8008236:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800823a:	e7c4      	b.n	80081c6 <_dtoa_r+0x546>
 800823c:	0800ca78 	.word	0x0800ca78
 8008240:	0800ca50 	.word	0x0800ca50
 8008244:	3ff00000 	.word	0x3ff00000
 8008248:	40240000 	.word	0x40240000
 800824c:	401c0000 	.word	0x401c0000
 8008250:	40140000 	.word	0x40140000
 8008254:	3fe00000 	.word	0x3fe00000
 8008258:	4631      	mov	r1, r6
 800825a:	4628      	mov	r0, r5
 800825c:	f7f8 f9cc 	bl	80005f8 <__aeabi_dmul>
 8008260:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008264:	9415      	str	r4, [sp, #84]	@ 0x54
 8008266:	4656      	mov	r6, sl
 8008268:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800826c:	f7f8 fc74 	bl	8000b58 <__aeabi_d2iz>
 8008270:	4605      	mov	r5, r0
 8008272:	f7f8 f957 	bl	8000524 <__aeabi_i2d>
 8008276:	4602      	mov	r2, r0
 8008278:	460b      	mov	r3, r1
 800827a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800827e:	f7f8 f803 	bl	8000288 <__aeabi_dsub>
 8008282:	3530      	adds	r5, #48	@ 0x30
 8008284:	f806 5b01 	strb.w	r5, [r6], #1
 8008288:	4602      	mov	r2, r0
 800828a:	460b      	mov	r3, r1
 800828c:	42a6      	cmp	r6, r4
 800828e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008292:	f04f 0200 	mov.w	r2, #0
 8008296:	d124      	bne.n	80082e2 <_dtoa_r+0x662>
 8008298:	4bac      	ldr	r3, [pc, #688]	@ (800854c <_dtoa_r+0x8cc>)
 800829a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800829e:	f7f7 fff5 	bl	800028c <__adddf3>
 80082a2:	4602      	mov	r2, r0
 80082a4:	460b      	mov	r3, r1
 80082a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082aa:	f7f8 fc35 	bl	8000b18 <__aeabi_dcmpgt>
 80082ae:	2800      	cmp	r0, #0
 80082b0:	d145      	bne.n	800833e <_dtoa_r+0x6be>
 80082b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80082b6:	49a5      	ldr	r1, [pc, #660]	@ (800854c <_dtoa_r+0x8cc>)
 80082b8:	2000      	movs	r0, #0
 80082ba:	f7f7 ffe5 	bl	8000288 <__aeabi_dsub>
 80082be:	4602      	mov	r2, r0
 80082c0:	460b      	mov	r3, r1
 80082c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082c6:	f7f8 fc09 	bl	8000adc <__aeabi_dcmplt>
 80082ca:	2800      	cmp	r0, #0
 80082cc:	f43f aef5 	beq.w	80080ba <_dtoa_r+0x43a>
 80082d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80082d2:	1e73      	subs	r3, r6, #1
 80082d4:	9315      	str	r3, [sp, #84]	@ 0x54
 80082d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80082da:	2b30      	cmp	r3, #48	@ 0x30
 80082dc:	d0f8      	beq.n	80082d0 <_dtoa_r+0x650>
 80082de:	9f04      	ldr	r7, [sp, #16]
 80082e0:	e73e      	b.n	8008160 <_dtoa_r+0x4e0>
 80082e2:	4b9b      	ldr	r3, [pc, #620]	@ (8008550 <_dtoa_r+0x8d0>)
 80082e4:	f7f8 f988 	bl	80005f8 <__aeabi_dmul>
 80082e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082ec:	e7bc      	b.n	8008268 <_dtoa_r+0x5e8>
 80082ee:	d10c      	bne.n	800830a <_dtoa_r+0x68a>
 80082f0:	4b98      	ldr	r3, [pc, #608]	@ (8008554 <_dtoa_r+0x8d4>)
 80082f2:	2200      	movs	r2, #0
 80082f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082f8:	f7f8 f97e 	bl	80005f8 <__aeabi_dmul>
 80082fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008300:	f7f8 fc00 	bl	8000b04 <__aeabi_dcmpge>
 8008304:	2800      	cmp	r0, #0
 8008306:	f000 8157 	beq.w	80085b8 <_dtoa_r+0x938>
 800830a:	2400      	movs	r4, #0
 800830c:	4625      	mov	r5, r4
 800830e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008310:	43db      	mvns	r3, r3
 8008312:	9304      	str	r3, [sp, #16]
 8008314:	4656      	mov	r6, sl
 8008316:	2700      	movs	r7, #0
 8008318:	4621      	mov	r1, r4
 800831a:	4658      	mov	r0, fp
 800831c:	f000 fbb4 	bl	8008a88 <_Bfree>
 8008320:	2d00      	cmp	r5, #0
 8008322:	d0dc      	beq.n	80082de <_dtoa_r+0x65e>
 8008324:	b12f      	cbz	r7, 8008332 <_dtoa_r+0x6b2>
 8008326:	42af      	cmp	r7, r5
 8008328:	d003      	beq.n	8008332 <_dtoa_r+0x6b2>
 800832a:	4639      	mov	r1, r7
 800832c:	4658      	mov	r0, fp
 800832e:	f000 fbab 	bl	8008a88 <_Bfree>
 8008332:	4629      	mov	r1, r5
 8008334:	4658      	mov	r0, fp
 8008336:	f000 fba7 	bl	8008a88 <_Bfree>
 800833a:	e7d0      	b.n	80082de <_dtoa_r+0x65e>
 800833c:	9704      	str	r7, [sp, #16]
 800833e:	4633      	mov	r3, r6
 8008340:	461e      	mov	r6, r3
 8008342:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008346:	2a39      	cmp	r2, #57	@ 0x39
 8008348:	d107      	bne.n	800835a <_dtoa_r+0x6da>
 800834a:	459a      	cmp	sl, r3
 800834c:	d1f8      	bne.n	8008340 <_dtoa_r+0x6c0>
 800834e:	9a04      	ldr	r2, [sp, #16]
 8008350:	3201      	adds	r2, #1
 8008352:	9204      	str	r2, [sp, #16]
 8008354:	2230      	movs	r2, #48	@ 0x30
 8008356:	f88a 2000 	strb.w	r2, [sl]
 800835a:	781a      	ldrb	r2, [r3, #0]
 800835c:	3201      	adds	r2, #1
 800835e:	701a      	strb	r2, [r3, #0]
 8008360:	e7bd      	b.n	80082de <_dtoa_r+0x65e>
 8008362:	4b7b      	ldr	r3, [pc, #492]	@ (8008550 <_dtoa_r+0x8d0>)
 8008364:	2200      	movs	r2, #0
 8008366:	f7f8 f947 	bl	80005f8 <__aeabi_dmul>
 800836a:	2200      	movs	r2, #0
 800836c:	2300      	movs	r3, #0
 800836e:	4604      	mov	r4, r0
 8008370:	460d      	mov	r5, r1
 8008372:	f7f8 fba9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008376:	2800      	cmp	r0, #0
 8008378:	f43f aebb 	beq.w	80080f2 <_dtoa_r+0x472>
 800837c:	e6f0      	b.n	8008160 <_dtoa_r+0x4e0>
 800837e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008380:	2a00      	cmp	r2, #0
 8008382:	f000 80db 	beq.w	800853c <_dtoa_r+0x8bc>
 8008386:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008388:	2a01      	cmp	r2, #1
 800838a:	f300 80bf 	bgt.w	800850c <_dtoa_r+0x88c>
 800838e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008390:	2a00      	cmp	r2, #0
 8008392:	f000 80b7 	beq.w	8008504 <_dtoa_r+0x884>
 8008396:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800839a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800839c:	4646      	mov	r6, r8
 800839e:	9a08      	ldr	r2, [sp, #32]
 80083a0:	2101      	movs	r1, #1
 80083a2:	441a      	add	r2, r3
 80083a4:	4658      	mov	r0, fp
 80083a6:	4498      	add	r8, r3
 80083a8:	9208      	str	r2, [sp, #32]
 80083aa:	f000 fc6b 	bl	8008c84 <__i2b>
 80083ae:	4605      	mov	r5, r0
 80083b0:	b15e      	cbz	r6, 80083ca <_dtoa_r+0x74a>
 80083b2:	9b08      	ldr	r3, [sp, #32]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	dd08      	ble.n	80083ca <_dtoa_r+0x74a>
 80083b8:	42b3      	cmp	r3, r6
 80083ba:	9a08      	ldr	r2, [sp, #32]
 80083bc:	bfa8      	it	ge
 80083be:	4633      	movge	r3, r6
 80083c0:	eba8 0803 	sub.w	r8, r8, r3
 80083c4:	1af6      	subs	r6, r6, r3
 80083c6:	1ad3      	subs	r3, r2, r3
 80083c8:	9308      	str	r3, [sp, #32]
 80083ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083cc:	b1f3      	cbz	r3, 800840c <_dtoa_r+0x78c>
 80083ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f000 80b7 	beq.w	8008544 <_dtoa_r+0x8c4>
 80083d6:	b18c      	cbz	r4, 80083fc <_dtoa_r+0x77c>
 80083d8:	4629      	mov	r1, r5
 80083da:	4622      	mov	r2, r4
 80083dc:	4658      	mov	r0, fp
 80083de:	f000 fd11 	bl	8008e04 <__pow5mult>
 80083e2:	464a      	mov	r2, r9
 80083e4:	4601      	mov	r1, r0
 80083e6:	4605      	mov	r5, r0
 80083e8:	4658      	mov	r0, fp
 80083ea:	f000 fc61 	bl	8008cb0 <__multiply>
 80083ee:	4649      	mov	r1, r9
 80083f0:	9004      	str	r0, [sp, #16]
 80083f2:	4658      	mov	r0, fp
 80083f4:	f000 fb48 	bl	8008a88 <_Bfree>
 80083f8:	9b04      	ldr	r3, [sp, #16]
 80083fa:	4699      	mov	r9, r3
 80083fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083fe:	1b1a      	subs	r2, r3, r4
 8008400:	d004      	beq.n	800840c <_dtoa_r+0x78c>
 8008402:	4649      	mov	r1, r9
 8008404:	4658      	mov	r0, fp
 8008406:	f000 fcfd 	bl	8008e04 <__pow5mult>
 800840a:	4681      	mov	r9, r0
 800840c:	2101      	movs	r1, #1
 800840e:	4658      	mov	r0, fp
 8008410:	f000 fc38 	bl	8008c84 <__i2b>
 8008414:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008416:	4604      	mov	r4, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	f000 81cf 	beq.w	80087bc <_dtoa_r+0xb3c>
 800841e:	461a      	mov	r2, r3
 8008420:	4601      	mov	r1, r0
 8008422:	4658      	mov	r0, fp
 8008424:	f000 fcee 	bl	8008e04 <__pow5mult>
 8008428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800842a:	2b01      	cmp	r3, #1
 800842c:	4604      	mov	r4, r0
 800842e:	f300 8095 	bgt.w	800855c <_dtoa_r+0x8dc>
 8008432:	9b02      	ldr	r3, [sp, #8]
 8008434:	2b00      	cmp	r3, #0
 8008436:	f040 8087 	bne.w	8008548 <_dtoa_r+0x8c8>
 800843a:	9b03      	ldr	r3, [sp, #12]
 800843c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008440:	2b00      	cmp	r3, #0
 8008442:	f040 8089 	bne.w	8008558 <_dtoa_r+0x8d8>
 8008446:	9b03      	ldr	r3, [sp, #12]
 8008448:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800844c:	0d1b      	lsrs	r3, r3, #20
 800844e:	051b      	lsls	r3, r3, #20
 8008450:	b12b      	cbz	r3, 800845e <_dtoa_r+0x7de>
 8008452:	9b08      	ldr	r3, [sp, #32]
 8008454:	3301      	adds	r3, #1
 8008456:	9308      	str	r3, [sp, #32]
 8008458:	f108 0801 	add.w	r8, r8, #1
 800845c:	2301      	movs	r3, #1
 800845e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008460:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008462:	2b00      	cmp	r3, #0
 8008464:	f000 81b0 	beq.w	80087c8 <_dtoa_r+0xb48>
 8008468:	6923      	ldr	r3, [r4, #16]
 800846a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800846e:	6918      	ldr	r0, [r3, #16]
 8008470:	f000 fbbc 	bl	8008bec <__hi0bits>
 8008474:	f1c0 0020 	rsb	r0, r0, #32
 8008478:	9b08      	ldr	r3, [sp, #32]
 800847a:	4418      	add	r0, r3
 800847c:	f010 001f 	ands.w	r0, r0, #31
 8008480:	d077      	beq.n	8008572 <_dtoa_r+0x8f2>
 8008482:	f1c0 0320 	rsb	r3, r0, #32
 8008486:	2b04      	cmp	r3, #4
 8008488:	dd6b      	ble.n	8008562 <_dtoa_r+0x8e2>
 800848a:	9b08      	ldr	r3, [sp, #32]
 800848c:	f1c0 001c 	rsb	r0, r0, #28
 8008490:	4403      	add	r3, r0
 8008492:	4480      	add	r8, r0
 8008494:	4406      	add	r6, r0
 8008496:	9308      	str	r3, [sp, #32]
 8008498:	f1b8 0f00 	cmp.w	r8, #0
 800849c:	dd05      	ble.n	80084aa <_dtoa_r+0x82a>
 800849e:	4649      	mov	r1, r9
 80084a0:	4642      	mov	r2, r8
 80084a2:	4658      	mov	r0, fp
 80084a4:	f000 fd08 	bl	8008eb8 <__lshift>
 80084a8:	4681      	mov	r9, r0
 80084aa:	9b08      	ldr	r3, [sp, #32]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	dd05      	ble.n	80084bc <_dtoa_r+0x83c>
 80084b0:	4621      	mov	r1, r4
 80084b2:	461a      	mov	r2, r3
 80084b4:	4658      	mov	r0, fp
 80084b6:	f000 fcff 	bl	8008eb8 <__lshift>
 80084ba:	4604      	mov	r4, r0
 80084bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d059      	beq.n	8008576 <_dtoa_r+0x8f6>
 80084c2:	4621      	mov	r1, r4
 80084c4:	4648      	mov	r0, r9
 80084c6:	f000 fd63 	bl	8008f90 <__mcmp>
 80084ca:	2800      	cmp	r0, #0
 80084cc:	da53      	bge.n	8008576 <_dtoa_r+0x8f6>
 80084ce:	1e7b      	subs	r3, r7, #1
 80084d0:	9304      	str	r3, [sp, #16]
 80084d2:	4649      	mov	r1, r9
 80084d4:	2300      	movs	r3, #0
 80084d6:	220a      	movs	r2, #10
 80084d8:	4658      	mov	r0, fp
 80084da:	f000 faf7 	bl	8008acc <__multadd>
 80084de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084e0:	4681      	mov	r9, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	f000 8172 	beq.w	80087cc <_dtoa_r+0xb4c>
 80084e8:	2300      	movs	r3, #0
 80084ea:	4629      	mov	r1, r5
 80084ec:	220a      	movs	r2, #10
 80084ee:	4658      	mov	r0, fp
 80084f0:	f000 faec 	bl	8008acc <__multadd>
 80084f4:	9b00      	ldr	r3, [sp, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	4605      	mov	r5, r0
 80084fa:	dc67      	bgt.n	80085cc <_dtoa_r+0x94c>
 80084fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084fe:	2b02      	cmp	r3, #2
 8008500:	dc41      	bgt.n	8008586 <_dtoa_r+0x906>
 8008502:	e063      	b.n	80085cc <_dtoa_r+0x94c>
 8008504:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008506:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800850a:	e746      	b.n	800839a <_dtoa_r+0x71a>
 800850c:	9b07      	ldr	r3, [sp, #28]
 800850e:	1e5c      	subs	r4, r3, #1
 8008510:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008512:	42a3      	cmp	r3, r4
 8008514:	bfbf      	itttt	lt
 8008516:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008518:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800851a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800851c:	1ae3      	sublt	r3, r4, r3
 800851e:	bfb4      	ite	lt
 8008520:	18d2      	addlt	r2, r2, r3
 8008522:	1b1c      	subge	r4, r3, r4
 8008524:	9b07      	ldr	r3, [sp, #28]
 8008526:	bfbc      	itt	lt
 8008528:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800852a:	2400      	movlt	r4, #0
 800852c:	2b00      	cmp	r3, #0
 800852e:	bfb5      	itete	lt
 8008530:	eba8 0603 	sublt.w	r6, r8, r3
 8008534:	9b07      	ldrge	r3, [sp, #28]
 8008536:	2300      	movlt	r3, #0
 8008538:	4646      	movge	r6, r8
 800853a:	e730      	b.n	800839e <_dtoa_r+0x71e>
 800853c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800853e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008540:	4646      	mov	r6, r8
 8008542:	e735      	b.n	80083b0 <_dtoa_r+0x730>
 8008544:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008546:	e75c      	b.n	8008402 <_dtoa_r+0x782>
 8008548:	2300      	movs	r3, #0
 800854a:	e788      	b.n	800845e <_dtoa_r+0x7de>
 800854c:	3fe00000 	.word	0x3fe00000
 8008550:	40240000 	.word	0x40240000
 8008554:	40140000 	.word	0x40140000
 8008558:	9b02      	ldr	r3, [sp, #8]
 800855a:	e780      	b.n	800845e <_dtoa_r+0x7de>
 800855c:	2300      	movs	r3, #0
 800855e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008560:	e782      	b.n	8008468 <_dtoa_r+0x7e8>
 8008562:	d099      	beq.n	8008498 <_dtoa_r+0x818>
 8008564:	9a08      	ldr	r2, [sp, #32]
 8008566:	331c      	adds	r3, #28
 8008568:	441a      	add	r2, r3
 800856a:	4498      	add	r8, r3
 800856c:	441e      	add	r6, r3
 800856e:	9208      	str	r2, [sp, #32]
 8008570:	e792      	b.n	8008498 <_dtoa_r+0x818>
 8008572:	4603      	mov	r3, r0
 8008574:	e7f6      	b.n	8008564 <_dtoa_r+0x8e4>
 8008576:	9b07      	ldr	r3, [sp, #28]
 8008578:	9704      	str	r7, [sp, #16]
 800857a:	2b00      	cmp	r3, #0
 800857c:	dc20      	bgt.n	80085c0 <_dtoa_r+0x940>
 800857e:	9300      	str	r3, [sp, #0]
 8008580:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008582:	2b02      	cmp	r3, #2
 8008584:	dd1e      	ble.n	80085c4 <_dtoa_r+0x944>
 8008586:	9b00      	ldr	r3, [sp, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	f47f aec0 	bne.w	800830e <_dtoa_r+0x68e>
 800858e:	4621      	mov	r1, r4
 8008590:	2205      	movs	r2, #5
 8008592:	4658      	mov	r0, fp
 8008594:	f000 fa9a 	bl	8008acc <__multadd>
 8008598:	4601      	mov	r1, r0
 800859a:	4604      	mov	r4, r0
 800859c:	4648      	mov	r0, r9
 800859e:	f000 fcf7 	bl	8008f90 <__mcmp>
 80085a2:	2800      	cmp	r0, #0
 80085a4:	f77f aeb3 	ble.w	800830e <_dtoa_r+0x68e>
 80085a8:	4656      	mov	r6, sl
 80085aa:	2331      	movs	r3, #49	@ 0x31
 80085ac:	f806 3b01 	strb.w	r3, [r6], #1
 80085b0:	9b04      	ldr	r3, [sp, #16]
 80085b2:	3301      	adds	r3, #1
 80085b4:	9304      	str	r3, [sp, #16]
 80085b6:	e6ae      	b.n	8008316 <_dtoa_r+0x696>
 80085b8:	9c07      	ldr	r4, [sp, #28]
 80085ba:	9704      	str	r7, [sp, #16]
 80085bc:	4625      	mov	r5, r4
 80085be:	e7f3      	b.n	80085a8 <_dtoa_r+0x928>
 80085c0:	9b07      	ldr	r3, [sp, #28]
 80085c2:	9300      	str	r3, [sp, #0]
 80085c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	f000 8104 	beq.w	80087d4 <_dtoa_r+0xb54>
 80085cc:	2e00      	cmp	r6, #0
 80085ce:	dd05      	ble.n	80085dc <_dtoa_r+0x95c>
 80085d0:	4629      	mov	r1, r5
 80085d2:	4632      	mov	r2, r6
 80085d4:	4658      	mov	r0, fp
 80085d6:	f000 fc6f 	bl	8008eb8 <__lshift>
 80085da:	4605      	mov	r5, r0
 80085dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d05a      	beq.n	8008698 <_dtoa_r+0xa18>
 80085e2:	6869      	ldr	r1, [r5, #4]
 80085e4:	4658      	mov	r0, fp
 80085e6:	f000 fa0f 	bl	8008a08 <_Balloc>
 80085ea:	4606      	mov	r6, r0
 80085ec:	b928      	cbnz	r0, 80085fa <_dtoa_r+0x97a>
 80085ee:	4b84      	ldr	r3, [pc, #528]	@ (8008800 <_dtoa_r+0xb80>)
 80085f0:	4602      	mov	r2, r0
 80085f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80085f6:	f7ff bb5a 	b.w	8007cae <_dtoa_r+0x2e>
 80085fa:	692a      	ldr	r2, [r5, #16]
 80085fc:	3202      	adds	r2, #2
 80085fe:	0092      	lsls	r2, r2, #2
 8008600:	f105 010c 	add.w	r1, r5, #12
 8008604:	300c      	adds	r0, #12
 8008606:	f001 ff75 	bl	800a4f4 <memcpy>
 800860a:	2201      	movs	r2, #1
 800860c:	4631      	mov	r1, r6
 800860e:	4658      	mov	r0, fp
 8008610:	f000 fc52 	bl	8008eb8 <__lshift>
 8008614:	f10a 0301 	add.w	r3, sl, #1
 8008618:	9307      	str	r3, [sp, #28]
 800861a:	9b00      	ldr	r3, [sp, #0]
 800861c:	4453      	add	r3, sl
 800861e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008620:	9b02      	ldr	r3, [sp, #8]
 8008622:	f003 0301 	and.w	r3, r3, #1
 8008626:	462f      	mov	r7, r5
 8008628:	930a      	str	r3, [sp, #40]	@ 0x28
 800862a:	4605      	mov	r5, r0
 800862c:	9b07      	ldr	r3, [sp, #28]
 800862e:	4621      	mov	r1, r4
 8008630:	3b01      	subs	r3, #1
 8008632:	4648      	mov	r0, r9
 8008634:	9300      	str	r3, [sp, #0]
 8008636:	f7ff fa9b 	bl	8007b70 <quorem>
 800863a:	4639      	mov	r1, r7
 800863c:	9002      	str	r0, [sp, #8]
 800863e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008642:	4648      	mov	r0, r9
 8008644:	f000 fca4 	bl	8008f90 <__mcmp>
 8008648:	462a      	mov	r2, r5
 800864a:	9008      	str	r0, [sp, #32]
 800864c:	4621      	mov	r1, r4
 800864e:	4658      	mov	r0, fp
 8008650:	f000 fcba 	bl	8008fc8 <__mdiff>
 8008654:	68c2      	ldr	r2, [r0, #12]
 8008656:	4606      	mov	r6, r0
 8008658:	bb02      	cbnz	r2, 800869c <_dtoa_r+0xa1c>
 800865a:	4601      	mov	r1, r0
 800865c:	4648      	mov	r0, r9
 800865e:	f000 fc97 	bl	8008f90 <__mcmp>
 8008662:	4602      	mov	r2, r0
 8008664:	4631      	mov	r1, r6
 8008666:	4658      	mov	r0, fp
 8008668:	920e      	str	r2, [sp, #56]	@ 0x38
 800866a:	f000 fa0d 	bl	8008a88 <_Bfree>
 800866e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008670:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008672:	9e07      	ldr	r6, [sp, #28]
 8008674:	ea43 0102 	orr.w	r1, r3, r2
 8008678:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800867a:	4319      	orrs	r1, r3
 800867c:	d110      	bne.n	80086a0 <_dtoa_r+0xa20>
 800867e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008682:	d029      	beq.n	80086d8 <_dtoa_r+0xa58>
 8008684:	9b08      	ldr	r3, [sp, #32]
 8008686:	2b00      	cmp	r3, #0
 8008688:	dd02      	ble.n	8008690 <_dtoa_r+0xa10>
 800868a:	9b02      	ldr	r3, [sp, #8]
 800868c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008690:	9b00      	ldr	r3, [sp, #0]
 8008692:	f883 8000 	strb.w	r8, [r3]
 8008696:	e63f      	b.n	8008318 <_dtoa_r+0x698>
 8008698:	4628      	mov	r0, r5
 800869a:	e7bb      	b.n	8008614 <_dtoa_r+0x994>
 800869c:	2201      	movs	r2, #1
 800869e:	e7e1      	b.n	8008664 <_dtoa_r+0x9e4>
 80086a0:	9b08      	ldr	r3, [sp, #32]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	db04      	blt.n	80086b0 <_dtoa_r+0xa30>
 80086a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80086a8:	430b      	orrs	r3, r1
 80086aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80086ac:	430b      	orrs	r3, r1
 80086ae:	d120      	bne.n	80086f2 <_dtoa_r+0xa72>
 80086b0:	2a00      	cmp	r2, #0
 80086b2:	dded      	ble.n	8008690 <_dtoa_r+0xa10>
 80086b4:	4649      	mov	r1, r9
 80086b6:	2201      	movs	r2, #1
 80086b8:	4658      	mov	r0, fp
 80086ba:	f000 fbfd 	bl	8008eb8 <__lshift>
 80086be:	4621      	mov	r1, r4
 80086c0:	4681      	mov	r9, r0
 80086c2:	f000 fc65 	bl	8008f90 <__mcmp>
 80086c6:	2800      	cmp	r0, #0
 80086c8:	dc03      	bgt.n	80086d2 <_dtoa_r+0xa52>
 80086ca:	d1e1      	bne.n	8008690 <_dtoa_r+0xa10>
 80086cc:	f018 0f01 	tst.w	r8, #1
 80086d0:	d0de      	beq.n	8008690 <_dtoa_r+0xa10>
 80086d2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80086d6:	d1d8      	bne.n	800868a <_dtoa_r+0xa0a>
 80086d8:	9a00      	ldr	r2, [sp, #0]
 80086da:	2339      	movs	r3, #57	@ 0x39
 80086dc:	7013      	strb	r3, [r2, #0]
 80086de:	4633      	mov	r3, r6
 80086e0:	461e      	mov	r6, r3
 80086e2:	3b01      	subs	r3, #1
 80086e4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80086e8:	2a39      	cmp	r2, #57	@ 0x39
 80086ea:	d052      	beq.n	8008792 <_dtoa_r+0xb12>
 80086ec:	3201      	adds	r2, #1
 80086ee:	701a      	strb	r2, [r3, #0]
 80086f0:	e612      	b.n	8008318 <_dtoa_r+0x698>
 80086f2:	2a00      	cmp	r2, #0
 80086f4:	dd07      	ble.n	8008706 <_dtoa_r+0xa86>
 80086f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80086fa:	d0ed      	beq.n	80086d8 <_dtoa_r+0xa58>
 80086fc:	9a00      	ldr	r2, [sp, #0]
 80086fe:	f108 0301 	add.w	r3, r8, #1
 8008702:	7013      	strb	r3, [r2, #0]
 8008704:	e608      	b.n	8008318 <_dtoa_r+0x698>
 8008706:	9b07      	ldr	r3, [sp, #28]
 8008708:	9a07      	ldr	r2, [sp, #28]
 800870a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800870e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008710:	4293      	cmp	r3, r2
 8008712:	d028      	beq.n	8008766 <_dtoa_r+0xae6>
 8008714:	4649      	mov	r1, r9
 8008716:	2300      	movs	r3, #0
 8008718:	220a      	movs	r2, #10
 800871a:	4658      	mov	r0, fp
 800871c:	f000 f9d6 	bl	8008acc <__multadd>
 8008720:	42af      	cmp	r7, r5
 8008722:	4681      	mov	r9, r0
 8008724:	f04f 0300 	mov.w	r3, #0
 8008728:	f04f 020a 	mov.w	r2, #10
 800872c:	4639      	mov	r1, r7
 800872e:	4658      	mov	r0, fp
 8008730:	d107      	bne.n	8008742 <_dtoa_r+0xac2>
 8008732:	f000 f9cb 	bl	8008acc <__multadd>
 8008736:	4607      	mov	r7, r0
 8008738:	4605      	mov	r5, r0
 800873a:	9b07      	ldr	r3, [sp, #28]
 800873c:	3301      	adds	r3, #1
 800873e:	9307      	str	r3, [sp, #28]
 8008740:	e774      	b.n	800862c <_dtoa_r+0x9ac>
 8008742:	f000 f9c3 	bl	8008acc <__multadd>
 8008746:	4629      	mov	r1, r5
 8008748:	4607      	mov	r7, r0
 800874a:	2300      	movs	r3, #0
 800874c:	220a      	movs	r2, #10
 800874e:	4658      	mov	r0, fp
 8008750:	f000 f9bc 	bl	8008acc <__multadd>
 8008754:	4605      	mov	r5, r0
 8008756:	e7f0      	b.n	800873a <_dtoa_r+0xaba>
 8008758:	9b00      	ldr	r3, [sp, #0]
 800875a:	2b00      	cmp	r3, #0
 800875c:	bfcc      	ite	gt
 800875e:	461e      	movgt	r6, r3
 8008760:	2601      	movle	r6, #1
 8008762:	4456      	add	r6, sl
 8008764:	2700      	movs	r7, #0
 8008766:	4649      	mov	r1, r9
 8008768:	2201      	movs	r2, #1
 800876a:	4658      	mov	r0, fp
 800876c:	f000 fba4 	bl	8008eb8 <__lshift>
 8008770:	4621      	mov	r1, r4
 8008772:	4681      	mov	r9, r0
 8008774:	f000 fc0c 	bl	8008f90 <__mcmp>
 8008778:	2800      	cmp	r0, #0
 800877a:	dcb0      	bgt.n	80086de <_dtoa_r+0xa5e>
 800877c:	d102      	bne.n	8008784 <_dtoa_r+0xb04>
 800877e:	f018 0f01 	tst.w	r8, #1
 8008782:	d1ac      	bne.n	80086de <_dtoa_r+0xa5e>
 8008784:	4633      	mov	r3, r6
 8008786:	461e      	mov	r6, r3
 8008788:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800878c:	2a30      	cmp	r2, #48	@ 0x30
 800878e:	d0fa      	beq.n	8008786 <_dtoa_r+0xb06>
 8008790:	e5c2      	b.n	8008318 <_dtoa_r+0x698>
 8008792:	459a      	cmp	sl, r3
 8008794:	d1a4      	bne.n	80086e0 <_dtoa_r+0xa60>
 8008796:	9b04      	ldr	r3, [sp, #16]
 8008798:	3301      	adds	r3, #1
 800879a:	9304      	str	r3, [sp, #16]
 800879c:	2331      	movs	r3, #49	@ 0x31
 800879e:	f88a 3000 	strb.w	r3, [sl]
 80087a2:	e5b9      	b.n	8008318 <_dtoa_r+0x698>
 80087a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80087a6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008804 <_dtoa_r+0xb84>
 80087aa:	b11b      	cbz	r3, 80087b4 <_dtoa_r+0xb34>
 80087ac:	f10a 0308 	add.w	r3, sl, #8
 80087b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80087b2:	6013      	str	r3, [r2, #0]
 80087b4:	4650      	mov	r0, sl
 80087b6:	b019      	add	sp, #100	@ 0x64
 80087b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087be:	2b01      	cmp	r3, #1
 80087c0:	f77f ae37 	ble.w	8008432 <_dtoa_r+0x7b2>
 80087c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80087c8:	2001      	movs	r0, #1
 80087ca:	e655      	b.n	8008478 <_dtoa_r+0x7f8>
 80087cc:	9b00      	ldr	r3, [sp, #0]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	f77f aed6 	ble.w	8008580 <_dtoa_r+0x900>
 80087d4:	4656      	mov	r6, sl
 80087d6:	4621      	mov	r1, r4
 80087d8:	4648      	mov	r0, r9
 80087da:	f7ff f9c9 	bl	8007b70 <quorem>
 80087de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80087e2:	f806 8b01 	strb.w	r8, [r6], #1
 80087e6:	9b00      	ldr	r3, [sp, #0]
 80087e8:	eba6 020a 	sub.w	r2, r6, sl
 80087ec:	4293      	cmp	r3, r2
 80087ee:	ddb3      	ble.n	8008758 <_dtoa_r+0xad8>
 80087f0:	4649      	mov	r1, r9
 80087f2:	2300      	movs	r3, #0
 80087f4:	220a      	movs	r2, #10
 80087f6:	4658      	mov	r0, fp
 80087f8:	f000 f968 	bl	8008acc <__multadd>
 80087fc:	4681      	mov	r9, r0
 80087fe:	e7ea      	b.n	80087d6 <_dtoa_r+0xb56>
 8008800:	0800c9d5 	.word	0x0800c9d5
 8008804:	0800c959 	.word	0x0800c959

08008808 <_free_r>:
 8008808:	b538      	push	{r3, r4, r5, lr}
 800880a:	4605      	mov	r5, r0
 800880c:	2900      	cmp	r1, #0
 800880e:	d041      	beq.n	8008894 <_free_r+0x8c>
 8008810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008814:	1f0c      	subs	r4, r1, #4
 8008816:	2b00      	cmp	r3, #0
 8008818:	bfb8      	it	lt
 800881a:	18e4      	addlt	r4, r4, r3
 800881c:	f000 f8e8 	bl	80089f0 <__malloc_lock>
 8008820:	4a1d      	ldr	r2, [pc, #116]	@ (8008898 <_free_r+0x90>)
 8008822:	6813      	ldr	r3, [r2, #0]
 8008824:	b933      	cbnz	r3, 8008834 <_free_r+0x2c>
 8008826:	6063      	str	r3, [r4, #4]
 8008828:	6014      	str	r4, [r2, #0]
 800882a:	4628      	mov	r0, r5
 800882c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008830:	f000 b8e4 	b.w	80089fc <__malloc_unlock>
 8008834:	42a3      	cmp	r3, r4
 8008836:	d908      	bls.n	800884a <_free_r+0x42>
 8008838:	6820      	ldr	r0, [r4, #0]
 800883a:	1821      	adds	r1, r4, r0
 800883c:	428b      	cmp	r3, r1
 800883e:	bf01      	itttt	eq
 8008840:	6819      	ldreq	r1, [r3, #0]
 8008842:	685b      	ldreq	r3, [r3, #4]
 8008844:	1809      	addeq	r1, r1, r0
 8008846:	6021      	streq	r1, [r4, #0]
 8008848:	e7ed      	b.n	8008826 <_free_r+0x1e>
 800884a:	461a      	mov	r2, r3
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	b10b      	cbz	r3, 8008854 <_free_r+0x4c>
 8008850:	42a3      	cmp	r3, r4
 8008852:	d9fa      	bls.n	800884a <_free_r+0x42>
 8008854:	6811      	ldr	r1, [r2, #0]
 8008856:	1850      	adds	r0, r2, r1
 8008858:	42a0      	cmp	r0, r4
 800885a:	d10b      	bne.n	8008874 <_free_r+0x6c>
 800885c:	6820      	ldr	r0, [r4, #0]
 800885e:	4401      	add	r1, r0
 8008860:	1850      	adds	r0, r2, r1
 8008862:	4283      	cmp	r3, r0
 8008864:	6011      	str	r1, [r2, #0]
 8008866:	d1e0      	bne.n	800882a <_free_r+0x22>
 8008868:	6818      	ldr	r0, [r3, #0]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	6053      	str	r3, [r2, #4]
 800886e:	4408      	add	r0, r1
 8008870:	6010      	str	r0, [r2, #0]
 8008872:	e7da      	b.n	800882a <_free_r+0x22>
 8008874:	d902      	bls.n	800887c <_free_r+0x74>
 8008876:	230c      	movs	r3, #12
 8008878:	602b      	str	r3, [r5, #0]
 800887a:	e7d6      	b.n	800882a <_free_r+0x22>
 800887c:	6820      	ldr	r0, [r4, #0]
 800887e:	1821      	adds	r1, r4, r0
 8008880:	428b      	cmp	r3, r1
 8008882:	bf04      	itt	eq
 8008884:	6819      	ldreq	r1, [r3, #0]
 8008886:	685b      	ldreq	r3, [r3, #4]
 8008888:	6063      	str	r3, [r4, #4]
 800888a:	bf04      	itt	eq
 800888c:	1809      	addeq	r1, r1, r0
 800888e:	6021      	streq	r1, [r4, #0]
 8008890:	6054      	str	r4, [r2, #4]
 8008892:	e7ca      	b.n	800882a <_free_r+0x22>
 8008894:	bd38      	pop	{r3, r4, r5, pc}
 8008896:	bf00      	nop
 8008898:	20000674 	.word	0x20000674

0800889c <malloc>:
 800889c:	4b02      	ldr	r3, [pc, #8]	@ (80088a8 <malloc+0xc>)
 800889e:	4601      	mov	r1, r0
 80088a0:	6818      	ldr	r0, [r3, #0]
 80088a2:	f000 b825 	b.w	80088f0 <_malloc_r>
 80088a6:	bf00      	nop
 80088a8:	2000003c 	.word	0x2000003c

080088ac <sbrk_aligned>:
 80088ac:	b570      	push	{r4, r5, r6, lr}
 80088ae:	4e0f      	ldr	r6, [pc, #60]	@ (80088ec <sbrk_aligned+0x40>)
 80088b0:	460c      	mov	r4, r1
 80088b2:	6831      	ldr	r1, [r6, #0]
 80088b4:	4605      	mov	r5, r0
 80088b6:	b911      	cbnz	r1, 80088be <sbrk_aligned+0x12>
 80088b8:	f001 fe0c 	bl	800a4d4 <_sbrk_r>
 80088bc:	6030      	str	r0, [r6, #0]
 80088be:	4621      	mov	r1, r4
 80088c0:	4628      	mov	r0, r5
 80088c2:	f001 fe07 	bl	800a4d4 <_sbrk_r>
 80088c6:	1c43      	adds	r3, r0, #1
 80088c8:	d103      	bne.n	80088d2 <sbrk_aligned+0x26>
 80088ca:	f04f 34ff 	mov.w	r4, #4294967295
 80088ce:	4620      	mov	r0, r4
 80088d0:	bd70      	pop	{r4, r5, r6, pc}
 80088d2:	1cc4      	adds	r4, r0, #3
 80088d4:	f024 0403 	bic.w	r4, r4, #3
 80088d8:	42a0      	cmp	r0, r4
 80088da:	d0f8      	beq.n	80088ce <sbrk_aligned+0x22>
 80088dc:	1a21      	subs	r1, r4, r0
 80088de:	4628      	mov	r0, r5
 80088e0:	f001 fdf8 	bl	800a4d4 <_sbrk_r>
 80088e4:	3001      	adds	r0, #1
 80088e6:	d1f2      	bne.n	80088ce <sbrk_aligned+0x22>
 80088e8:	e7ef      	b.n	80088ca <sbrk_aligned+0x1e>
 80088ea:	bf00      	nop
 80088ec:	20000670 	.word	0x20000670

080088f0 <_malloc_r>:
 80088f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088f4:	1ccd      	adds	r5, r1, #3
 80088f6:	f025 0503 	bic.w	r5, r5, #3
 80088fa:	3508      	adds	r5, #8
 80088fc:	2d0c      	cmp	r5, #12
 80088fe:	bf38      	it	cc
 8008900:	250c      	movcc	r5, #12
 8008902:	2d00      	cmp	r5, #0
 8008904:	4606      	mov	r6, r0
 8008906:	db01      	blt.n	800890c <_malloc_r+0x1c>
 8008908:	42a9      	cmp	r1, r5
 800890a:	d904      	bls.n	8008916 <_malloc_r+0x26>
 800890c:	230c      	movs	r3, #12
 800890e:	6033      	str	r3, [r6, #0]
 8008910:	2000      	movs	r0, #0
 8008912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008916:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80089ec <_malloc_r+0xfc>
 800891a:	f000 f869 	bl	80089f0 <__malloc_lock>
 800891e:	f8d8 3000 	ldr.w	r3, [r8]
 8008922:	461c      	mov	r4, r3
 8008924:	bb44      	cbnz	r4, 8008978 <_malloc_r+0x88>
 8008926:	4629      	mov	r1, r5
 8008928:	4630      	mov	r0, r6
 800892a:	f7ff ffbf 	bl	80088ac <sbrk_aligned>
 800892e:	1c43      	adds	r3, r0, #1
 8008930:	4604      	mov	r4, r0
 8008932:	d158      	bne.n	80089e6 <_malloc_r+0xf6>
 8008934:	f8d8 4000 	ldr.w	r4, [r8]
 8008938:	4627      	mov	r7, r4
 800893a:	2f00      	cmp	r7, #0
 800893c:	d143      	bne.n	80089c6 <_malloc_r+0xd6>
 800893e:	2c00      	cmp	r4, #0
 8008940:	d04b      	beq.n	80089da <_malloc_r+0xea>
 8008942:	6823      	ldr	r3, [r4, #0]
 8008944:	4639      	mov	r1, r7
 8008946:	4630      	mov	r0, r6
 8008948:	eb04 0903 	add.w	r9, r4, r3
 800894c:	f001 fdc2 	bl	800a4d4 <_sbrk_r>
 8008950:	4581      	cmp	r9, r0
 8008952:	d142      	bne.n	80089da <_malloc_r+0xea>
 8008954:	6821      	ldr	r1, [r4, #0]
 8008956:	1a6d      	subs	r5, r5, r1
 8008958:	4629      	mov	r1, r5
 800895a:	4630      	mov	r0, r6
 800895c:	f7ff ffa6 	bl	80088ac <sbrk_aligned>
 8008960:	3001      	adds	r0, #1
 8008962:	d03a      	beq.n	80089da <_malloc_r+0xea>
 8008964:	6823      	ldr	r3, [r4, #0]
 8008966:	442b      	add	r3, r5
 8008968:	6023      	str	r3, [r4, #0]
 800896a:	f8d8 3000 	ldr.w	r3, [r8]
 800896e:	685a      	ldr	r2, [r3, #4]
 8008970:	bb62      	cbnz	r2, 80089cc <_malloc_r+0xdc>
 8008972:	f8c8 7000 	str.w	r7, [r8]
 8008976:	e00f      	b.n	8008998 <_malloc_r+0xa8>
 8008978:	6822      	ldr	r2, [r4, #0]
 800897a:	1b52      	subs	r2, r2, r5
 800897c:	d420      	bmi.n	80089c0 <_malloc_r+0xd0>
 800897e:	2a0b      	cmp	r2, #11
 8008980:	d917      	bls.n	80089b2 <_malloc_r+0xc2>
 8008982:	1961      	adds	r1, r4, r5
 8008984:	42a3      	cmp	r3, r4
 8008986:	6025      	str	r5, [r4, #0]
 8008988:	bf18      	it	ne
 800898a:	6059      	strne	r1, [r3, #4]
 800898c:	6863      	ldr	r3, [r4, #4]
 800898e:	bf08      	it	eq
 8008990:	f8c8 1000 	streq.w	r1, [r8]
 8008994:	5162      	str	r2, [r4, r5]
 8008996:	604b      	str	r3, [r1, #4]
 8008998:	4630      	mov	r0, r6
 800899a:	f000 f82f 	bl	80089fc <__malloc_unlock>
 800899e:	f104 000b 	add.w	r0, r4, #11
 80089a2:	1d23      	adds	r3, r4, #4
 80089a4:	f020 0007 	bic.w	r0, r0, #7
 80089a8:	1ac2      	subs	r2, r0, r3
 80089aa:	bf1c      	itt	ne
 80089ac:	1a1b      	subne	r3, r3, r0
 80089ae:	50a3      	strne	r3, [r4, r2]
 80089b0:	e7af      	b.n	8008912 <_malloc_r+0x22>
 80089b2:	6862      	ldr	r2, [r4, #4]
 80089b4:	42a3      	cmp	r3, r4
 80089b6:	bf0c      	ite	eq
 80089b8:	f8c8 2000 	streq.w	r2, [r8]
 80089bc:	605a      	strne	r2, [r3, #4]
 80089be:	e7eb      	b.n	8008998 <_malloc_r+0xa8>
 80089c0:	4623      	mov	r3, r4
 80089c2:	6864      	ldr	r4, [r4, #4]
 80089c4:	e7ae      	b.n	8008924 <_malloc_r+0x34>
 80089c6:	463c      	mov	r4, r7
 80089c8:	687f      	ldr	r7, [r7, #4]
 80089ca:	e7b6      	b.n	800893a <_malloc_r+0x4a>
 80089cc:	461a      	mov	r2, r3
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	42a3      	cmp	r3, r4
 80089d2:	d1fb      	bne.n	80089cc <_malloc_r+0xdc>
 80089d4:	2300      	movs	r3, #0
 80089d6:	6053      	str	r3, [r2, #4]
 80089d8:	e7de      	b.n	8008998 <_malloc_r+0xa8>
 80089da:	230c      	movs	r3, #12
 80089dc:	6033      	str	r3, [r6, #0]
 80089de:	4630      	mov	r0, r6
 80089e0:	f000 f80c 	bl	80089fc <__malloc_unlock>
 80089e4:	e794      	b.n	8008910 <_malloc_r+0x20>
 80089e6:	6005      	str	r5, [r0, #0]
 80089e8:	e7d6      	b.n	8008998 <_malloc_r+0xa8>
 80089ea:	bf00      	nop
 80089ec:	20000674 	.word	0x20000674

080089f0 <__malloc_lock>:
 80089f0:	4801      	ldr	r0, [pc, #4]	@ (80089f8 <__malloc_lock+0x8>)
 80089f2:	f7ff b8b4 	b.w	8007b5e <__retarget_lock_acquire_recursive>
 80089f6:	bf00      	nop
 80089f8:	2000066c 	.word	0x2000066c

080089fc <__malloc_unlock>:
 80089fc:	4801      	ldr	r0, [pc, #4]	@ (8008a04 <__malloc_unlock+0x8>)
 80089fe:	f7ff b8af 	b.w	8007b60 <__retarget_lock_release_recursive>
 8008a02:	bf00      	nop
 8008a04:	2000066c 	.word	0x2000066c

08008a08 <_Balloc>:
 8008a08:	b570      	push	{r4, r5, r6, lr}
 8008a0a:	69c6      	ldr	r6, [r0, #28]
 8008a0c:	4604      	mov	r4, r0
 8008a0e:	460d      	mov	r5, r1
 8008a10:	b976      	cbnz	r6, 8008a30 <_Balloc+0x28>
 8008a12:	2010      	movs	r0, #16
 8008a14:	f7ff ff42 	bl	800889c <malloc>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	61e0      	str	r0, [r4, #28]
 8008a1c:	b920      	cbnz	r0, 8008a28 <_Balloc+0x20>
 8008a1e:	4b18      	ldr	r3, [pc, #96]	@ (8008a80 <_Balloc+0x78>)
 8008a20:	4818      	ldr	r0, [pc, #96]	@ (8008a84 <_Balloc+0x7c>)
 8008a22:	216b      	movs	r1, #107	@ 0x6b
 8008a24:	f001 fd7c 	bl	800a520 <__assert_func>
 8008a28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a2c:	6006      	str	r6, [r0, #0]
 8008a2e:	60c6      	str	r6, [r0, #12]
 8008a30:	69e6      	ldr	r6, [r4, #28]
 8008a32:	68f3      	ldr	r3, [r6, #12]
 8008a34:	b183      	cbz	r3, 8008a58 <_Balloc+0x50>
 8008a36:	69e3      	ldr	r3, [r4, #28]
 8008a38:	68db      	ldr	r3, [r3, #12]
 8008a3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008a3e:	b9b8      	cbnz	r0, 8008a70 <_Balloc+0x68>
 8008a40:	2101      	movs	r1, #1
 8008a42:	fa01 f605 	lsl.w	r6, r1, r5
 8008a46:	1d72      	adds	r2, r6, #5
 8008a48:	0092      	lsls	r2, r2, #2
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	f001 fd86 	bl	800a55c <_calloc_r>
 8008a50:	b160      	cbz	r0, 8008a6c <_Balloc+0x64>
 8008a52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008a56:	e00e      	b.n	8008a76 <_Balloc+0x6e>
 8008a58:	2221      	movs	r2, #33	@ 0x21
 8008a5a:	2104      	movs	r1, #4
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	f001 fd7d 	bl	800a55c <_calloc_r>
 8008a62:	69e3      	ldr	r3, [r4, #28]
 8008a64:	60f0      	str	r0, [r6, #12]
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d1e4      	bne.n	8008a36 <_Balloc+0x2e>
 8008a6c:	2000      	movs	r0, #0
 8008a6e:	bd70      	pop	{r4, r5, r6, pc}
 8008a70:	6802      	ldr	r2, [r0, #0]
 8008a72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008a76:	2300      	movs	r3, #0
 8008a78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008a7c:	e7f7      	b.n	8008a6e <_Balloc+0x66>
 8008a7e:	bf00      	nop
 8008a80:	0800c966 	.word	0x0800c966
 8008a84:	0800c9e6 	.word	0x0800c9e6

08008a88 <_Bfree>:
 8008a88:	b570      	push	{r4, r5, r6, lr}
 8008a8a:	69c6      	ldr	r6, [r0, #28]
 8008a8c:	4605      	mov	r5, r0
 8008a8e:	460c      	mov	r4, r1
 8008a90:	b976      	cbnz	r6, 8008ab0 <_Bfree+0x28>
 8008a92:	2010      	movs	r0, #16
 8008a94:	f7ff ff02 	bl	800889c <malloc>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	61e8      	str	r0, [r5, #28]
 8008a9c:	b920      	cbnz	r0, 8008aa8 <_Bfree+0x20>
 8008a9e:	4b09      	ldr	r3, [pc, #36]	@ (8008ac4 <_Bfree+0x3c>)
 8008aa0:	4809      	ldr	r0, [pc, #36]	@ (8008ac8 <_Bfree+0x40>)
 8008aa2:	218f      	movs	r1, #143	@ 0x8f
 8008aa4:	f001 fd3c 	bl	800a520 <__assert_func>
 8008aa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008aac:	6006      	str	r6, [r0, #0]
 8008aae:	60c6      	str	r6, [r0, #12]
 8008ab0:	b13c      	cbz	r4, 8008ac2 <_Bfree+0x3a>
 8008ab2:	69eb      	ldr	r3, [r5, #28]
 8008ab4:	6862      	ldr	r2, [r4, #4]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008abc:	6021      	str	r1, [r4, #0]
 8008abe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008ac2:	bd70      	pop	{r4, r5, r6, pc}
 8008ac4:	0800c966 	.word	0x0800c966
 8008ac8:	0800c9e6 	.word	0x0800c9e6

08008acc <__multadd>:
 8008acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ad0:	690d      	ldr	r5, [r1, #16]
 8008ad2:	4607      	mov	r7, r0
 8008ad4:	460c      	mov	r4, r1
 8008ad6:	461e      	mov	r6, r3
 8008ad8:	f101 0c14 	add.w	ip, r1, #20
 8008adc:	2000      	movs	r0, #0
 8008ade:	f8dc 3000 	ldr.w	r3, [ip]
 8008ae2:	b299      	uxth	r1, r3
 8008ae4:	fb02 6101 	mla	r1, r2, r1, r6
 8008ae8:	0c1e      	lsrs	r6, r3, #16
 8008aea:	0c0b      	lsrs	r3, r1, #16
 8008aec:	fb02 3306 	mla	r3, r2, r6, r3
 8008af0:	b289      	uxth	r1, r1
 8008af2:	3001      	adds	r0, #1
 8008af4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008af8:	4285      	cmp	r5, r0
 8008afa:	f84c 1b04 	str.w	r1, [ip], #4
 8008afe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008b02:	dcec      	bgt.n	8008ade <__multadd+0x12>
 8008b04:	b30e      	cbz	r6, 8008b4a <__multadd+0x7e>
 8008b06:	68a3      	ldr	r3, [r4, #8]
 8008b08:	42ab      	cmp	r3, r5
 8008b0a:	dc19      	bgt.n	8008b40 <__multadd+0x74>
 8008b0c:	6861      	ldr	r1, [r4, #4]
 8008b0e:	4638      	mov	r0, r7
 8008b10:	3101      	adds	r1, #1
 8008b12:	f7ff ff79 	bl	8008a08 <_Balloc>
 8008b16:	4680      	mov	r8, r0
 8008b18:	b928      	cbnz	r0, 8008b26 <__multadd+0x5a>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8008b50 <__multadd+0x84>)
 8008b1e:	480d      	ldr	r0, [pc, #52]	@ (8008b54 <__multadd+0x88>)
 8008b20:	21ba      	movs	r1, #186	@ 0xba
 8008b22:	f001 fcfd 	bl	800a520 <__assert_func>
 8008b26:	6922      	ldr	r2, [r4, #16]
 8008b28:	3202      	adds	r2, #2
 8008b2a:	f104 010c 	add.w	r1, r4, #12
 8008b2e:	0092      	lsls	r2, r2, #2
 8008b30:	300c      	adds	r0, #12
 8008b32:	f001 fcdf 	bl	800a4f4 <memcpy>
 8008b36:	4621      	mov	r1, r4
 8008b38:	4638      	mov	r0, r7
 8008b3a:	f7ff ffa5 	bl	8008a88 <_Bfree>
 8008b3e:	4644      	mov	r4, r8
 8008b40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008b44:	3501      	adds	r5, #1
 8008b46:	615e      	str	r6, [r3, #20]
 8008b48:	6125      	str	r5, [r4, #16]
 8008b4a:	4620      	mov	r0, r4
 8008b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b50:	0800c9d5 	.word	0x0800c9d5
 8008b54:	0800c9e6 	.word	0x0800c9e6

08008b58 <__s2b>:
 8008b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b5c:	460c      	mov	r4, r1
 8008b5e:	4615      	mov	r5, r2
 8008b60:	461f      	mov	r7, r3
 8008b62:	2209      	movs	r2, #9
 8008b64:	3308      	adds	r3, #8
 8008b66:	4606      	mov	r6, r0
 8008b68:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b6c:	2100      	movs	r1, #0
 8008b6e:	2201      	movs	r2, #1
 8008b70:	429a      	cmp	r2, r3
 8008b72:	db09      	blt.n	8008b88 <__s2b+0x30>
 8008b74:	4630      	mov	r0, r6
 8008b76:	f7ff ff47 	bl	8008a08 <_Balloc>
 8008b7a:	b940      	cbnz	r0, 8008b8e <__s2b+0x36>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	4b19      	ldr	r3, [pc, #100]	@ (8008be4 <__s2b+0x8c>)
 8008b80:	4819      	ldr	r0, [pc, #100]	@ (8008be8 <__s2b+0x90>)
 8008b82:	21d3      	movs	r1, #211	@ 0xd3
 8008b84:	f001 fccc 	bl	800a520 <__assert_func>
 8008b88:	0052      	lsls	r2, r2, #1
 8008b8a:	3101      	adds	r1, #1
 8008b8c:	e7f0      	b.n	8008b70 <__s2b+0x18>
 8008b8e:	9b08      	ldr	r3, [sp, #32]
 8008b90:	6143      	str	r3, [r0, #20]
 8008b92:	2d09      	cmp	r5, #9
 8008b94:	f04f 0301 	mov.w	r3, #1
 8008b98:	6103      	str	r3, [r0, #16]
 8008b9a:	dd16      	ble.n	8008bca <__s2b+0x72>
 8008b9c:	f104 0909 	add.w	r9, r4, #9
 8008ba0:	46c8      	mov	r8, r9
 8008ba2:	442c      	add	r4, r5
 8008ba4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008ba8:	4601      	mov	r1, r0
 8008baa:	3b30      	subs	r3, #48	@ 0x30
 8008bac:	220a      	movs	r2, #10
 8008bae:	4630      	mov	r0, r6
 8008bb0:	f7ff ff8c 	bl	8008acc <__multadd>
 8008bb4:	45a0      	cmp	r8, r4
 8008bb6:	d1f5      	bne.n	8008ba4 <__s2b+0x4c>
 8008bb8:	f1a5 0408 	sub.w	r4, r5, #8
 8008bbc:	444c      	add	r4, r9
 8008bbe:	1b2d      	subs	r5, r5, r4
 8008bc0:	1963      	adds	r3, r4, r5
 8008bc2:	42bb      	cmp	r3, r7
 8008bc4:	db04      	blt.n	8008bd0 <__s2b+0x78>
 8008bc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bca:	340a      	adds	r4, #10
 8008bcc:	2509      	movs	r5, #9
 8008bce:	e7f6      	b.n	8008bbe <__s2b+0x66>
 8008bd0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008bd4:	4601      	mov	r1, r0
 8008bd6:	3b30      	subs	r3, #48	@ 0x30
 8008bd8:	220a      	movs	r2, #10
 8008bda:	4630      	mov	r0, r6
 8008bdc:	f7ff ff76 	bl	8008acc <__multadd>
 8008be0:	e7ee      	b.n	8008bc0 <__s2b+0x68>
 8008be2:	bf00      	nop
 8008be4:	0800c9d5 	.word	0x0800c9d5
 8008be8:	0800c9e6 	.word	0x0800c9e6

08008bec <__hi0bits>:
 8008bec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	bf36      	itet	cc
 8008bf4:	0403      	lslcc	r3, r0, #16
 8008bf6:	2000      	movcs	r0, #0
 8008bf8:	2010      	movcc	r0, #16
 8008bfa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008bfe:	bf3c      	itt	cc
 8008c00:	021b      	lslcc	r3, r3, #8
 8008c02:	3008      	addcc	r0, #8
 8008c04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c08:	bf3c      	itt	cc
 8008c0a:	011b      	lslcc	r3, r3, #4
 8008c0c:	3004      	addcc	r0, #4
 8008c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c12:	bf3c      	itt	cc
 8008c14:	009b      	lslcc	r3, r3, #2
 8008c16:	3002      	addcc	r0, #2
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	db05      	blt.n	8008c28 <__hi0bits+0x3c>
 8008c1c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008c20:	f100 0001 	add.w	r0, r0, #1
 8008c24:	bf08      	it	eq
 8008c26:	2020      	moveq	r0, #32
 8008c28:	4770      	bx	lr

08008c2a <__lo0bits>:
 8008c2a:	6803      	ldr	r3, [r0, #0]
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	f013 0007 	ands.w	r0, r3, #7
 8008c32:	d00b      	beq.n	8008c4c <__lo0bits+0x22>
 8008c34:	07d9      	lsls	r1, r3, #31
 8008c36:	d421      	bmi.n	8008c7c <__lo0bits+0x52>
 8008c38:	0798      	lsls	r0, r3, #30
 8008c3a:	bf49      	itett	mi
 8008c3c:	085b      	lsrmi	r3, r3, #1
 8008c3e:	089b      	lsrpl	r3, r3, #2
 8008c40:	2001      	movmi	r0, #1
 8008c42:	6013      	strmi	r3, [r2, #0]
 8008c44:	bf5c      	itt	pl
 8008c46:	6013      	strpl	r3, [r2, #0]
 8008c48:	2002      	movpl	r0, #2
 8008c4a:	4770      	bx	lr
 8008c4c:	b299      	uxth	r1, r3
 8008c4e:	b909      	cbnz	r1, 8008c54 <__lo0bits+0x2a>
 8008c50:	0c1b      	lsrs	r3, r3, #16
 8008c52:	2010      	movs	r0, #16
 8008c54:	b2d9      	uxtb	r1, r3
 8008c56:	b909      	cbnz	r1, 8008c5c <__lo0bits+0x32>
 8008c58:	3008      	adds	r0, #8
 8008c5a:	0a1b      	lsrs	r3, r3, #8
 8008c5c:	0719      	lsls	r1, r3, #28
 8008c5e:	bf04      	itt	eq
 8008c60:	091b      	lsreq	r3, r3, #4
 8008c62:	3004      	addeq	r0, #4
 8008c64:	0799      	lsls	r1, r3, #30
 8008c66:	bf04      	itt	eq
 8008c68:	089b      	lsreq	r3, r3, #2
 8008c6a:	3002      	addeq	r0, #2
 8008c6c:	07d9      	lsls	r1, r3, #31
 8008c6e:	d403      	bmi.n	8008c78 <__lo0bits+0x4e>
 8008c70:	085b      	lsrs	r3, r3, #1
 8008c72:	f100 0001 	add.w	r0, r0, #1
 8008c76:	d003      	beq.n	8008c80 <__lo0bits+0x56>
 8008c78:	6013      	str	r3, [r2, #0]
 8008c7a:	4770      	bx	lr
 8008c7c:	2000      	movs	r0, #0
 8008c7e:	4770      	bx	lr
 8008c80:	2020      	movs	r0, #32
 8008c82:	4770      	bx	lr

08008c84 <__i2b>:
 8008c84:	b510      	push	{r4, lr}
 8008c86:	460c      	mov	r4, r1
 8008c88:	2101      	movs	r1, #1
 8008c8a:	f7ff febd 	bl	8008a08 <_Balloc>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	b928      	cbnz	r0, 8008c9e <__i2b+0x1a>
 8008c92:	4b05      	ldr	r3, [pc, #20]	@ (8008ca8 <__i2b+0x24>)
 8008c94:	4805      	ldr	r0, [pc, #20]	@ (8008cac <__i2b+0x28>)
 8008c96:	f240 1145 	movw	r1, #325	@ 0x145
 8008c9a:	f001 fc41 	bl	800a520 <__assert_func>
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	6144      	str	r4, [r0, #20]
 8008ca2:	6103      	str	r3, [r0, #16]
 8008ca4:	bd10      	pop	{r4, pc}
 8008ca6:	bf00      	nop
 8008ca8:	0800c9d5 	.word	0x0800c9d5
 8008cac:	0800c9e6 	.word	0x0800c9e6

08008cb0 <__multiply>:
 8008cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb4:	4614      	mov	r4, r2
 8008cb6:	690a      	ldr	r2, [r1, #16]
 8008cb8:	6923      	ldr	r3, [r4, #16]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	bfa8      	it	ge
 8008cbe:	4623      	movge	r3, r4
 8008cc0:	460f      	mov	r7, r1
 8008cc2:	bfa4      	itt	ge
 8008cc4:	460c      	movge	r4, r1
 8008cc6:	461f      	movge	r7, r3
 8008cc8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008ccc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008cd0:	68a3      	ldr	r3, [r4, #8]
 8008cd2:	6861      	ldr	r1, [r4, #4]
 8008cd4:	eb0a 0609 	add.w	r6, sl, r9
 8008cd8:	42b3      	cmp	r3, r6
 8008cda:	b085      	sub	sp, #20
 8008cdc:	bfb8      	it	lt
 8008cde:	3101      	addlt	r1, #1
 8008ce0:	f7ff fe92 	bl	8008a08 <_Balloc>
 8008ce4:	b930      	cbnz	r0, 8008cf4 <__multiply+0x44>
 8008ce6:	4602      	mov	r2, r0
 8008ce8:	4b44      	ldr	r3, [pc, #272]	@ (8008dfc <__multiply+0x14c>)
 8008cea:	4845      	ldr	r0, [pc, #276]	@ (8008e00 <__multiply+0x150>)
 8008cec:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008cf0:	f001 fc16 	bl	800a520 <__assert_func>
 8008cf4:	f100 0514 	add.w	r5, r0, #20
 8008cf8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008cfc:	462b      	mov	r3, r5
 8008cfe:	2200      	movs	r2, #0
 8008d00:	4543      	cmp	r3, r8
 8008d02:	d321      	bcc.n	8008d48 <__multiply+0x98>
 8008d04:	f107 0114 	add.w	r1, r7, #20
 8008d08:	f104 0214 	add.w	r2, r4, #20
 8008d0c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008d10:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008d14:	9302      	str	r3, [sp, #8]
 8008d16:	1b13      	subs	r3, r2, r4
 8008d18:	3b15      	subs	r3, #21
 8008d1a:	f023 0303 	bic.w	r3, r3, #3
 8008d1e:	3304      	adds	r3, #4
 8008d20:	f104 0715 	add.w	r7, r4, #21
 8008d24:	42ba      	cmp	r2, r7
 8008d26:	bf38      	it	cc
 8008d28:	2304      	movcc	r3, #4
 8008d2a:	9301      	str	r3, [sp, #4]
 8008d2c:	9b02      	ldr	r3, [sp, #8]
 8008d2e:	9103      	str	r1, [sp, #12]
 8008d30:	428b      	cmp	r3, r1
 8008d32:	d80c      	bhi.n	8008d4e <__multiply+0x9e>
 8008d34:	2e00      	cmp	r6, #0
 8008d36:	dd03      	ble.n	8008d40 <__multiply+0x90>
 8008d38:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d05b      	beq.n	8008df8 <__multiply+0x148>
 8008d40:	6106      	str	r6, [r0, #16]
 8008d42:	b005      	add	sp, #20
 8008d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d48:	f843 2b04 	str.w	r2, [r3], #4
 8008d4c:	e7d8      	b.n	8008d00 <__multiply+0x50>
 8008d4e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008d52:	f1ba 0f00 	cmp.w	sl, #0
 8008d56:	d024      	beq.n	8008da2 <__multiply+0xf2>
 8008d58:	f104 0e14 	add.w	lr, r4, #20
 8008d5c:	46a9      	mov	r9, r5
 8008d5e:	f04f 0c00 	mov.w	ip, #0
 8008d62:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008d66:	f8d9 3000 	ldr.w	r3, [r9]
 8008d6a:	fa1f fb87 	uxth.w	fp, r7
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	fb0a 330b 	mla	r3, sl, fp, r3
 8008d74:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008d78:	f8d9 7000 	ldr.w	r7, [r9]
 8008d7c:	4463      	add	r3, ip
 8008d7e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008d82:	fb0a c70b 	mla	r7, sl, fp, ip
 8008d86:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008d90:	4572      	cmp	r2, lr
 8008d92:	f849 3b04 	str.w	r3, [r9], #4
 8008d96:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008d9a:	d8e2      	bhi.n	8008d62 <__multiply+0xb2>
 8008d9c:	9b01      	ldr	r3, [sp, #4]
 8008d9e:	f845 c003 	str.w	ip, [r5, r3]
 8008da2:	9b03      	ldr	r3, [sp, #12]
 8008da4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008da8:	3104      	adds	r1, #4
 8008daa:	f1b9 0f00 	cmp.w	r9, #0
 8008dae:	d021      	beq.n	8008df4 <__multiply+0x144>
 8008db0:	682b      	ldr	r3, [r5, #0]
 8008db2:	f104 0c14 	add.w	ip, r4, #20
 8008db6:	46ae      	mov	lr, r5
 8008db8:	f04f 0a00 	mov.w	sl, #0
 8008dbc:	f8bc b000 	ldrh.w	fp, [ip]
 8008dc0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008dc4:	fb09 770b 	mla	r7, r9, fp, r7
 8008dc8:	4457      	add	r7, sl
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008dd0:	f84e 3b04 	str.w	r3, [lr], #4
 8008dd4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008dd8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ddc:	f8be 3000 	ldrh.w	r3, [lr]
 8008de0:	fb09 330a 	mla	r3, r9, sl, r3
 8008de4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008de8:	4562      	cmp	r2, ip
 8008dea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008dee:	d8e5      	bhi.n	8008dbc <__multiply+0x10c>
 8008df0:	9f01      	ldr	r7, [sp, #4]
 8008df2:	51eb      	str	r3, [r5, r7]
 8008df4:	3504      	adds	r5, #4
 8008df6:	e799      	b.n	8008d2c <__multiply+0x7c>
 8008df8:	3e01      	subs	r6, #1
 8008dfa:	e79b      	b.n	8008d34 <__multiply+0x84>
 8008dfc:	0800c9d5 	.word	0x0800c9d5
 8008e00:	0800c9e6 	.word	0x0800c9e6

08008e04 <__pow5mult>:
 8008e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e08:	4615      	mov	r5, r2
 8008e0a:	f012 0203 	ands.w	r2, r2, #3
 8008e0e:	4607      	mov	r7, r0
 8008e10:	460e      	mov	r6, r1
 8008e12:	d007      	beq.n	8008e24 <__pow5mult+0x20>
 8008e14:	4c25      	ldr	r4, [pc, #148]	@ (8008eac <__pow5mult+0xa8>)
 8008e16:	3a01      	subs	r2, #1
 8008e18:	2300      	movs	r3, #0
 8008e1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e1e:	f7ff fe55 	bl	8008acc <__multadd>
 8008e22:	4606      	mov	r6, r0
 8008e24:	10ad      	asrs	r5, r5, #2
 8008e26:	d03d      	beq.n	8008ea4 <__pow5mult+0xa0>
 8008e28:	69fc      	ldr	r4, [r7, #28]
 8008e2a:	b97c      	cbnz	r4, 8008e4c <__pow5mult+0x48>
 8008e2c:	2010      	movs	r0, #16
 8008e2e:	f7ff fd35 	bl	800889c <malloc>
 8008e32:	4602      	mov	r2, r0
 8008e34:	61f8      	str	r0, [r7, #28]
 8008e36:	b928      	cbnz	r0, 8008e44 <__pow5mult+0x40>
 8008e38:	4b1d      	ldr	r3, [pc, #116]	@ (8008eb0 <__pow5mult+0xac>)
 8008e3a:	481e      	ldr	r0, [pc, #120]	@ (8008eb4 <__pow5mult+0xb0>)
 8008e3c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008e40:	f001 fb6e 	bl	800a520 <__assert_func>
 8008e44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e48:	6004      	str	r4, [r0, #0]
 8008e4a:	60c4      	str	r4, [r0, #12]
 8008e4c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008e50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e54:	b94c      	cbnz	r4, 8008e6a <__pow5mult+0x66>
 8008e56:	f240 2171 	movw	r1, #625	@ 0x271
 8008e5a:	4638      	mov	r0, r7
 8008e5c:	f7ff ff12 	bl	8008c84 <__i2b>
 8008e60:	2300      	movs	r3, #0
 8008e62:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e66:	4604      	mov	r4, r0
 8008e68:	6003      	str	r3, [r0, #0]
 8008e6a:	f04f 0900 	mov.w	r9, #0
 8008e6e:	07eb      	lsls	r3, r5, #31
 8008e70:	d50a      	bpl.n	8008e88 <__pow5mult+0x84>
 8008e72:	4631      	mov	r1, r6
 8008e74:	4622      	mov	r2, r4
 8008e76:	4638      	mov	r0, r7
 8008e78:	f7ff ff1a 	bl	8008cb0 <__multiply>
 8008e7c:	4631      	mov	r1, r6
 8008e7e:	4680      	mov	r8, r0
 8008e80:	4638      	mov	r0, r7
 8008e82:	f7ff fe01 	bl	8008a88 <_Bfree>
 8008e86:	4646      	mov	r6, r8
 8008e88:	106d      	asrs	r5, r5, #1
 8008e8a:	d00b      	beq.n	8008ea4 <__pow5mult+0xa0>
 8008e8c:	6820      	ldr	r0, [r4, #0]
 8008e8e:	b938      	cbnz	r0, 8008ea0 <__pow5mult+0x9c>
 8008e90:	4622      	mov	r2, r4
 8008e92:	4621      	mov	r1, r4
 8008e94:	4638      	mov	r0, r7
 8008e96:	f7ff ff0b 	bl	8008cb0 <__multiply>
 8008e9a:	6020      	str	r0, [r4, #0]
 8008e9c:	f8c0 9000 	str.w	r9, [r0]
 8008ea0:	4604      	mov	r4, r0
 8008ea2:	e7e4      	b.n	8008e6e <__pow5mult+0x6a>
 8008ea4:	4630      	mov	r0, r6
 8008ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eaa:	bf00      	nop
 8008eac:	0800ca40 	.word	0x0800ca40
 8008eb0:	0800c966 	.word	0x0800c966
 8008eb4:	0800c9e6 	.word	0x0800c9e6

08008eb8 <__lshift>:
 8008eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ebc:	460c      	mov	r4, r1
 8008ebe:	6849      	ldr	r1, [r1, #4]
 8008ec0:	6923      	ldr	r3, [r4, #16]
 8008ec2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008ec6:	68a3      	ldr	r3, [r4, #8]
 8008ec8:	4607      	mov	r7, r0
 8008eca:	4691      	mov	r9, r2
 8008ecc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ed0:	f108 0601 	add.w	r6, r8, #1
 8008ed4:	42b3      	cmp	r3, r6
 8008ed6:	db0b      	blt.n	8008ef0 <__lshift+0x38>
 8008ed8:	4638      	mov	r0, r7
 8008eda:	f7ff fd95 	bl	8008a08 <_Balloc>
 8008ede:	4605      	mov	r5, r0
 8008ee0:	b948      	cbnz	r0, 8008ef6 <__lshift+0x3e>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	4b28      	ldr	r3, [pc, #160]	@ (8008f88 <__lshift+0xd0>)
 8008ee6:	4829      	ldr	r0, [pc, #164]	@ (8008f8c <__lshift+0xd4>)
 8008ee8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008eec:	f001 fb18 	bl	800a520 <__assert_func>
 8008ef0:	3101      	adds	r1, #1
 8008ef2:	005b      	lsls	r3, r3, #1
 8008ef4:	e7ee      	b.n	8008ed4 <__lshift+0x1c>
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	f100 0114 	add.w	r1, r0, #20
 8008efc:	f100 0210 	add.w	r2, r0, #16
 8008f00:	4618      	mov	r0, r3
 8008f02:	4553      	cmp	r3, sl
 8008f04:	db33      	blt.n	8008f6e <__lshift+0xb6>
 8008f06:	6920      	ldr	r0, [r4, #16]
 8008f08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f0c:	f104 0314 	add.w	r3, r4, #20
 8008f10:	f019 091f 	ands.w	r9, r9, #31
 8008f14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f1c:	d02b      	beq.n	8008f76 <__lshift+0xbe>
 8008f1e:	f1c9 0e20 	rsb	lr, r9, #32
 8008f22:	468a      	mov	sl, r1
 8008f24:	2200      	movs	r2, #0
 8008f26:	6818      	ldr	r0, [r3, #0]
 8008f28:	fa00 f009 	lsl.w	r0, r0, r9
 8008f2c:	4310      	orrs	r0, r2
 8008f2e:	f84a 0b04 	str.w	r0, [sl], #4
 8008f32:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f36:	459c      	cmp	ip, r3
 8008f38:	fa22 f20e 	lsr.w	r2, r2, lr
 8008f3c:	d8f3      	bhi.n	8008f26 <__lshift+0x6e>
 8008f3e:	ebac 0304 	sub.w	r3, ip, r4
 8008f42:	3b15      	subs	r3, #21
 8008f44:	f023 0303 	bic.w	r3, r3, #3
 8008f48:	3304      	adds	r3, #4
 8008f4a:	f104 0015 	add.w	r0, r4, #21
 8008f4e:	4584      	cmp	ip, r0
 8008f50:	bf38      	it	cc
 8008f52:	2304      	movcc	r3, #4
 8008f54:	50ca      	str	r2, [r1, r3]
 8008f56:	b10a      	cbz	r2, 8008f5c <__lshift+0xa4>
 8008f58:	f108 0602 	add.w	r6, r8, #2
 8008f5c:	3e01      	subs	r6, #1
 8008f5e:	4638      	mov	r0, r7
 8008f60:	612e      	str	r6, [r5, #16]
 8008f62:	4621      	mov	r1, r4
 8008f64:	f7ff fd90 	bl	8008a88 <_Bfree>
 8008f68:	4628      	mov	r0, r5
 8008f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008f72:	3301      	adds	r3, #1
 8008f74:	e7c5      	b.n	8008f02 <__lshift+0x4a>
 8008f76:	3904      	subs	r1, #4
 8008f78:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f7c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f80:	459c      	cmp	ip, r3
 8008f82:	d8f9      	bhi.n	8008f78 <__lshift+0xc0>
 8008f84:	e7ea      	b.n	8008f5c <__lshift+0xa4>
 8008f86:	bf00      	nop
 8008f88:	0800c9d5 	.word	0x0800c9d5
 8008f8c:	0800c9e6 	.word	0x0800c9e6

08008f90 <__mcmp>:
 8008f90:	690a      	ldr	r2, [r1, #16]
 8008f92:	4603      	mov	r3, r0
 8008f94:	6900      	ldr	r0, [r0, #16]
 8008f96:	1a80      	subs	r0, r0, r2
 8008f98:	b530      	push	{r4, r5, lr}
 8008f9a:	d10e      	bne.n	8008fba <__mcmp+0x2a>
 8008f9c:	3314      	adds	r3, #20
 8008f9e:	3114      	adds	r1, #20
 8008fa0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008fa4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008fa8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008fac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008fb0:	4295      	cmp	r5, r2
 8008fb2:	d003      	beq.n	8008fbc <__mcmp+0x2c>
 8008fb4:	d205      	bcs.n	8008fc2 <__mcmp+0x32>
 8008fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8008fba:	bd30      	pop	{r4, r5, pc}
 8008fbc:	42a3      	cmp	r3, r4
 8008fbe:	d3f3      	bcc.n	8008fa8 <__mcmp+0x18>
 8008fc0:	e7fb      	b.n	8008fba <__mcmp+0x2a>
 8008fc2:	2001      	movs	r0, #1
 8008fc4:	e7f9      	b.n	8008fba <__mcmp+0x2a>
	...

08008fc8 <__mdiff>:
 8008fc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fcc:	4689      	mov	r9, r1
 8008fce:	4606      	mov	r6, r0
 8008fd0:	4611      	mov	r1, r2
 8008fd2:	4648      	mov	r0, r9
 8008fd4:	4614      	mov	r4, r2
 8008fd6:	f7ff ffdb 	bl	8008f90 <__mcmp>
 8008fda:	1e05      	subs	r5, r0, #0
 8008fdc:	d112      	bne.n	8009004 <__mdiff+0x3c>
 8008fde:	4629      	mov	r1, r5
 8008fe0:	4630      	mov	r0, r6
 8008fe2:	f7ff fd11 	bl	8008a08 <_Balloc>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	b928      	cbnz	r0, 8008ff6 <__mdiff+0x2e>
 8008fea:	4b3f      	ldr	r3, [pc, #252]	@ (80090e8 <__mdiff+0x120>)
 8008fec:	f240 2137 	movw	r1, #567	@ 0x237
 8008ff0:	483e      	ldr	r0, [pc, #248]	@ (80090ec <__mdiff+0x124>)
 8008ff2:	f001 fa95 	bl	800a520 <__assert_func>
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ffc:	4610      	mov	r0, r2
 8008ffe:	b003      	add	sp, #12
 8009000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009004:	bfbc      	itt	lt
 8009006:	464b      	movlt	r3, r9
 8009008:	46a1      	movlt	r9, r4
 800900a:	4630      	mov	r0, r6
 800900c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009010:	bfba      	itte	lt
 8009012:	461c      	movlt	r4, r3
 8009014:	2501      	movlt	r5, #1
 8009016:	2500      	movge	r5, #0
 8009018:	f7ff fcf6 	bl	8008a08 <_Balloc>
 800901c:	4602      	mov	r2, r0
 800901e:	b918      	cbnz	r0, 8009028 <__mdiff+0x60>
 8009020:	4b31      	ldr	r3, [pc, #196]	@ (80090e8 <__mdiff+0x120>)
 8009022:	f240 2145 	movw	r1, #581	@ 0x245
 8009026:	e7e3      	b.n	8008ff0 <__mdiff+0x28>
 8009028:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800902c:	6926      	ldr	r6, [r4, #16]
 800902e:	60c5      	str	r5, [r0, #12]
 8009030:	f109 0310 	add.w	r3, r9, #16
 8009034:	f109 0514 	add.w	r5, r9, #20
 8009038:	f104 0e14 	add.w	lr, r4, #20
 800903c:	f100 0b14 	add.w	fp, r0, #20
 8009040:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009044:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009048:	9301      	str	r3, [sp, #4]
 800904a:	46d9      	mov	r9, fp
 800904c:	f04f 0c00 	mov.w	ip, #0
 8009050:	9b01      	ldr	r3, [sp, #4]
 8009052:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009056:	f853 af04 	ldr.w	sl, [r3, #4]!
 800905a:	9301      	str	r3, [sp, #4]
 800905c:	fa1f f38a 	uxth.w	r3, sl
 8009060:	4619      	mov	r1, r3
 8009062:	b283      	uxth	r3, r0
 8009064:	1acb      	subs	r3, r1, r3
 8009066:	0c00      	lsrs	r0, r0, #16
 8009068:	4463      	add	r3, ip
 800906a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800906e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009072:	b29b      	uxth	r3, r3
 8009074:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009078:	4576      	cmp	r6, lr
 800907a:	f849 3b04 	str.w	r3, [r9], #4
 800907e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009082:	d8e5      	bhi.n	8009050 <__mdiff+0x88>
 8009084:	1b33      	subs	r3, r6, r4
 8009086:	3b15      	subs	r3, #21
 8009088:	f023 0303 	bic.w	r3, r3, #3
 800908c:	3415      	adds	r4, #21
 800908e:	3304      	adds	r3, #4
 8009090:	42a6      	cmp	r6, r4
 8009092:	bf38      	it	cc
 8009094:	2304      	movcc	r3, #4
 8009096:	441d      	add	r5, r3
 8009098:	445b      	add	r3, fp
 800909a:	461e      	mov	r6, r3
 800909c:	462c      	mov	r4, r5
 800909e:	4544      	cmp	r4, r8
 80090a0:	d30e      	bcc.n	80090c0 <__mdiff+0xf8>
 80090a2:	f108 0103 	add.w	r1, r8, #3
 80090a6:	1b49      	subs	r1, r1, r5
 80090a8:	f021 0103 	bic.w	r1, r1, #3
 80090ac:	3d03      	subs	r5, #3
 80090ae:	45a8      	cmp	r8, r5
 80090b0:	bf38      	it	cc
 80090b2:	2100      	movcc	r1, #0
 80090b4:	440b      	add	r3, r1
 80090b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80090ba:	b191      	cbz	r1, 80090e2 <__mdiff+0x11a>
 80090bc:	6117      	str	r7, [r2, #16]
 80090be:	e79d      	b.n	8008ffc <__mdiff+0x34>
 80090c0:	f854 1b04 	ldr.w	r1, [r4], #4
 80090c4:	46e6      	mov	lr, ip
 80090c6:	0c08      	lsrs	r0, r1, #16
 80090c8:	fa1c fc81 	uxtah	ip, ip, r1
 80090cc:	4471      	add	r1, lr
 80090ce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80090d2:	b289      	uxth	r1, r1
 80090d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80090d8:	f846 1b04 	str.w	r1, [r6], #4
 80090dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80090e0:	e7dd      	b.n	800909e <__mdiff+0xd6>
 80090e2:	3f01      	subs	r7, #1
 80090e4:	e7e7      	b.n	80090b6 <__mdiff+0xee>
 80090e6:	bf00      	nop
 80090e8:	0800c9d5 	.word	0x0800c9d5
 80090ec:	0800c9e6 	.word	0x0800c9e6

080090f0 <__ulp>:
 80090f0:	b082      	sub	sp, #8
 80090f2:	ed8d 0b00 	vstr	d0, [sp]
 80090f6:	9a01      	ldr	r2, [sp, #4]
 80090f8:	4b0f      	ldr	r3, [pc, #60]	@ (8009138 <__ulp+0x48>)
 80090fa:	4013      	ands	r3, r2
 80090fc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009100:	2b00      	cmp	r3, #0
 8009102:	dc08      	bgt.n	8009116 <__ulp+0x26>
 8009104:	425b      	negs	r3, r3
 8009106:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800910a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800910e:	da04      	bge.n	800911a <__ulp+0x2a>
 8009110:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009114:	4113      	asrs	r3, r2
 8009116:	2200      	movs	r2, #0
 8009118:	e008      	b.n	800912c <__ulp+0x3c>
 800911a:	f1a2 0314 	sub.w	r3, r2, #20
 800911e:	2b1e      	cmp	r3, #30
 8009120:	bfda      	itte	le
 8009122:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009126:	40da      	lsrle	r2, r3
 8009128:	2201      	movgt	r2, #1
 800912a:	2300      	movs	r3, #0
 800912c:	4619      	mov	r1, r3
 800912e:	4610      	mov	r0, r2
 8009130:	ec41 0b10 	vmov	d0, r0, r1
 8009134:	b002      	add	sp, #8
 8009136:	4770      	bx	lr
 8009138:	7ff00000 	.word	0x7ff00000

0800913c <__b2d>:
 800913c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009140:	6906      	ldr	r6, [r0, #16]
 8009142:	f100 0814 	add.w	r8, r0, #20
 8009146:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800914a:	1f37      	subs	r7, r6, #4
 800914c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009150:	4610      	mov	r0, r2
 8009152:	f7ff fd4b 	bl	8008bec <__hi0bits>
 8009156:	f1c0 0320 	rsb	r3, r0, #32
 800915a:	280a      	cmp	r0, #10
 800915c:	600b      	str	r3, [r1, #0]
 800915e:	491b      	ldr	r1, [pc, #108]	@ (80091cc <__b2d+0x90>)
 8009160:	dc15      	bgt.n	800918e <__b2d+0x52>
 8009162:	f1c0 0c0b 	rsb	ip, r0, #11
 8009166:	fa22 f30c 	lsr.w	r3, r2, ip
 800916a:	45b8      	cmp	r8, r7
 800916c:	ea43 0501 	orr.w	r5, r3, r1
 8009170:	bf34      	ite	cc
 8009172:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009176:	2300      	movcs	r3, #0
 8009178:	3015      	adds	r0, #21
 800917a:	fa02 f000 	lsl.w	r0, r2, r0
 800917e:	fa23 f30c 	lsr.w	r3, r3, ip
 8009182:	4303      	orrs	r3, r0
 8009184:	461c      	mov	r4, r3
 8009186:	ec45 4b10 	vmov	d0, r4, r5
 800918a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800918e:	45b8      	cmp	r8, r7
 8009190:	bf3a      	itte	cc
 8009192:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009196:	f1a6 0708 	subcc.w	r7, r6, #8
 800919a:	2300      	movcs	r3, #0
 800919c:	380b      	subs	r0, #11
 800919e:	d012      	beq.n	80091c6 <__b2d+0x8a>
 80091a0:	f1c0 0120 	rsb	r1, r0, #32
 80091a4:	fa23 f401 	lsr.w	r4, r3, r1
 80091a8:	4082      	lsls	r2, r0
 80091aa:	4322      	orrs	r2, r4
 80091ac:	4547      	cmp	r7, r8
 80091ae:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80091b2:	bf8c      	ite	hi
 80091b4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80091b8:	2200      	movls	r2, #0
 80091ba:	4083      	lsls	r3, r0
 80091bc:	40ca      	lsrs	r2, r1
 80091be:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80091c2:	4313      	orrs	r3, r2
 80091c4:	e7de      	b.n	8009184 <__b2d+0x48>
 80091c6:	ea42 0501 	orr.w	r5, r2, r1
 80091ca:	e7db      	b.n	8009184 <__b2d+0x48>
 80091cc:	3ff00000 	.word	0x3ff00000

080091d0 <__d2b>:
 80091d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80091d4:	460f      	mov	r7, r1
 80091d6:	2101      	movs	r1, #1
 80091d8:	ec59 8b10 	vmov	r8, r9, d0
 80091dc:	4616      	mov	r6, r2
 80091de:	f7ff fc13 	bl	8008a08 <_Balloc>
 80091e2:	4604      	mov	r4, r0
 80091e4:	b930      	cbnz	r0, 80091f4 <__d2b+0x24>
 80091e6:	4602      	mov	r2, r0
 80091e8:	4b23      	ldr	r3, [pc, #140]	@ (8009278 <__d2b+0xa8>)
 80091ea:	4824      	ldr	r0, [pc, #144]	@ (800927c <__d2b+0xac>)
 80091ec:	f240 310f 	movw	r1, #783	@ 0x30f
 80091f0:	f001 f996 	bl	800a520 <__assert_func>
 80091f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80091f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80091fc:	b10d      	cbz	r5, 8009202 <__d2b+0x32>
 80091fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009202:	9301      	str	r3, [sp, #4]
 8009204:	f1b8 0300 	subs.w	r3, r8, #0
 8009208:	d023      	beq.n	8009252 <__d2b+0x82>
 800920a:	4668      	mov	r0, sp
 800920c:	9300      	str	r3, [sp, #0]
 800920e:	f7ff fd0c 	bl	8008c2a <__lo0bits>
 8009212:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009216:	b1d0      	cbz	r0, 800924e <__d2b+0x7e>
 8009218:	f1c0 0320 	rsb	r3, r0, #32
 800921c:	fa02 f303 	lsl.w	r3, r2, r3
 8009220:	430b      	orrs	r3, r1
 8009222:	40c2      	lsrs	r2, r0
 8009224:	6163      	str	r3, [r4, #20]
 8009226:	9201      	str	r2, [sp, #4]
 8009228:	9b01      	ldr	r3, [sp, #4]
 800922a:	61a3      	str	r3, [r4, #24]
 800922c:	2b00      	cmp	r3, #0
 800922e:	bf0c      	ite	eq
 8009230:	2201      	moveq	r2, #1
 8009232:	2202      	movne	r2, #2
 8009234:	6122      	str	r2, [r4, #16]
 8009236:	b1a5      	cbz	r5, 8009262 <__d2b+0x92>
 8009238:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800923c:	4405      	add	r5, r0
 800923e:	603d      	str	r5, [r7, #0]
 8009240:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009244:	6030      	str	r0, [r6, #0]
 8009246:	4620      	mov	r0, r4
 8009248:	b003      	add	sp, #12
 800924a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800924e:	6161      	str	r1, [r4, #20]
 8009250:	e7ea      	b.n	8009228 <__d2b+0x58>
 8009252:	a801      	add	r0, sp, #4
 8009254:	f7ff fce9 	bl	8008c2a <__lo0bits>
 8009258:	9b01      	ldr	r3, [sp, #4]
 800925a:	6163      	str	r3, [r4, #20]
 800925c:	3020      	adds	r0, #32
 800925e:	2201      	movs	r2, #1
 8009260:	e7e8      	b.n	8009234 <__d2b+0x64>
 8009262:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009266:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800926a:	6038      	str	r0, [r7, #0]
 800926c:	6918      	ldr	r0, [r3, #16]
 800926e:	f7ff fcbd 	bl	8008bec <__hi0bits>
 8009272:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009276:	e7e5      	b.n	8009244 <__d2b+0x74>
 8009278:	0800c9d5 	.word	0x0800c9d5
 800927c:	0800c9e6 	.word	0x0800c9e6

08009280 <__ratio>:
 8009280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009284:	b085      	sub	sp, #20
 8009286:	e9cd 1000 	strd	r1, r0, [sp]
 800928a:	a902      	add	r1, sp, #8
 800928c:	f7ff ff56 	bl	800913c <__b2d>
 8009290:	9800      	ldr	r0, [sp, #0]
 8009292:	a903      	add	r1, sp, #12
 8009294:	ec55 4b10 	vmov	r4, r5, d0
 8009298:	f7ff ff50 	bl	800913c <__b2d>
 800929c:	9b01      	ldr	r3, [sp, #4]
 800929e:	6919      	ldr	r1, [r3, #16]
 80092a0:	9b00      	ldr	r3, [sp, #0]
 80092a2:	691b      	ldr	r3, [r3, #16]
 80092a4:	1ac9      	subs	r1, r1, r3
 80092a6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80092aa:	1a9b      	subs	r3, r3, r2
 80092ac:	ec5b ab10 	vmov	sl, fp, d0
 80092b0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	bfce      	itee	gt
 80092b8:	462a      	movgt	r2, r5
 80092ba:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80092be:	465a      	movle	r2, fp
 80092c0:	462f      	mov	r7, r5
 80092c2:	46d9      	mov	r9, fp
 80092c4:	bfcc      	ite	gt
 80092c6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80092ca:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80092ce:	464b      	mov	r3, r9
 80092d0:	4652      	mov	r2, sl
 80092d2:	4620      	mov	r0, r4
 80092d4:	4639      	mov	r1, r7
 80092d6:	f7f7 fab9 	bl	800084c <__aeabi_ddiv>
 80092da:	ec41 0b10 	vmov	d0, r0, r1
 80092de:	b005      	add	sp, #20
 80092e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080092e4 <__copybits>:
 80092e4:	3901      	subs	r1, #1
 80092e6:	b570      	push	{r4, r5, r6, lr}
 80092e8:	1149      	asrs	r1, r1, #5
 80092ea:	6914      	ldr	r4, [r2, #16]
 80092ec:	3101      	adds	r1, #1
 80092ee:	f102 0314 	add.w	r3, r2, #20
 80092f2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80092f6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80092fa:	1f05      	subs	r5, r0, #4
 80092fc:	42a3      	cmp	r3, r4
 80092fe:	d30c      	bcc.n	800931a <__copybits+0x36>
 8009300:	1aa3      	subs	r3, r4, r2
 8009302:	3b11      	subs	r3, #17
 8009304:	f023 0303 	bic.w	r3, r3, #3
 8009308:	3211      	adds	r2, #17
 800930a:	42a2      	cmp	r2, r4
 800930c:	bf88      	it	hi
 800930e:	2300      	movhi	r3, #0
 8009310:	4418      	add	r0, r3
 8009312:	2300      	movs	r3, #0
 8009314:	4288      	cmp	r0, r1
 8009316:	d305      	bcc.n	8009324 <__copybits+0x40>
 8009318:	bd70      	pop	{r4, r5, r6, pc}
 800931a:	f853 6b04 	ldr.w	r6, [r3], #4
 800931e:	f845 6f04 	str.w	r6, [r5, #4]!
 8009322:	e7eb      	b.n	80092fc <__copybits+0x18>
 8009324:	f840 3b04 	str.w	r3, [r0], #4
 8009328:	e7f4      	b.n	8009314 <__copybits+0x30>

0800932a <__any_on>:
 800932a:	f100 0214 	add.w	r2, r0, #20
 800932e:	6900      	ldr	r0, [r0, #16]
 8009330:	114b      	asrs	r3, r1, #5
 8009332:	4298      	cmp	r0, r3
 8009334:	b510      	push	{r4, lr}
 8009336:	db11      	blt.n	800935c <__any_on+0x32>
 8009338:	dd0a      	ble.n	8009350 <__any_on+0x26>
 800933a:	f011 011f 	ands.w	r1, r1, #31
 800933e:	d007      	beq.n	8009350 <__any_on+0x26>
 8009340:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009344:	fa24 f001 	lsr.w	r0, r4, r1
 8009348:	fa00 f101 	lsl.w	r1, r0, r1
 800934c:	428c      	cmp	r4, r1
 800934e:	d10b      	bne.n	8009368 <__any_on+0x3e>
 8009350:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009354:	4293      	cmp	r3, r2
 8009356:	d803      	bhi.n	8009360 <__any_on+0x36>
 8009358:	2000      	movs	r0, #0
 800935a:	bd10      	pop	{r4, pc}
 800935c:	4603      	mov	r3, r0
 800935e:	e7f7      	b.n	8009350 <__any_on+0x26>
 8009360:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009364:	2900      	cmp	r1, #0
 8009366:	d0f5      	beq.n	8009354 <__any_on+0x2a>
 8009368:	2001      	movs	r0, #1
 800936a:	e7f6      	b.n	800935a <__any_on+0x30>

0800936c <sulp>:
 800936c:	b570      	push	{r4, r5, r6, lr}
 800936e:	4604      	mov	r4, r0
 8009370:	460d      	mov	r5, r1
 8009372:	ec45 4b10 	vmov	d0, r4, r5
 8009376:	4616      	mov	r6, r2
 8009378:	f7ff feba 	bl	80090f0 <__ulp>
 800937c:	ec51 0b10 	vmov	r0, r1, d0
 8009380:	b17e      	cbz	r6, 80093a2 <sulp+0x36>
 8009382:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009386:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800938a:	2b00      	cmp	r3, #0
 800938c:	dd09      	ble.n	80093a2 <sulp+0x36>
 800938e:	051b      	lsls	r3, r3, #20
 8009390:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009394:	2400      	movs	r4, #0
 8009396:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800939a:	4622      	mov	r2, r4
 800939c:	462b      	mov	r3, r5
 800939e:	f7f7 f92b 	bl	80005f8 <__aeabi_dmul>
 80093a2:	ec41 0b10 	vmov	d0, r0, r1
 80093a6:	bd70      	pop	{r4, r5, r6, pc}

080093a8 <_strtod_l>:
 80093a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ac:	b09f      	sub	sp, #124	@ 0x7c
 80093ae:	460c      	mov	r4, r1
 80093b0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80093b2:	2200      	movs	r2, #0
 80093b4:	921a      	str	r2, [sp, #104]	@ 0x68
 80093b6:	9005      	str	r0, [sp, #20]
 80093b8:	f04f 0a00 	mov.w	sl, #0
 80093bc:	f04f 0b00 	mov.w	fp, #0
 80093c0:	460a      	mov	r2, r1
 80093c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80093c4:	7811      	ldrb	r1, [r2, #0]
 80093c6:	292b      	cmp	r1, #43	@ 0x2b
 80093c8:	d04a      	beq.n	8009460 <_strtod_l+0xb8>
 80093ca:	d838      	bhi.n	800943e <_strtod_l+0x96>
 80093cc:	290d      	cmp	r1, #13
 80093ce:	d832      	bhi.n	8009436 <_strtod_l+0x8e>
 80093d0:	2908      	cmp	r1, #8
 80093d2:	d832      	bhi.n	800943a <_strtod_l+0x92>
 80093d4:	2900      	cmp	r1, #0
 80093d6:	d03b      	beq.n	8009450 <_strtod_l+0xa8>
 80093d8:	2200      	movs	r2, #0
 80093da:	920b      	str	r2, [sp, #44]	@ 0x2c
 80093dc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80093de:	782a      	ldrb	r2, [r5, #0]
 80093e0:	2a30      	cmp	r2, #48	@ 0x30
 80093e2:	f040 80b3 	bne.w	800954c <_strtod_l+0x1a4>
 80093e6:	786a      	ldrb	r2, [r5, #1]
 80093e8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80093ec:	2a58      	cmp	r2, #88	@ 0x58
 80093ee:	d16e      	bne.n	80094ce <_strtod_l+0x126>
 80093f0:	9302      	str	r3, [sp, #8]
 80093f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80093f4:	9301      	str	r3, [sp, #4]
 80093f6:	ab1a      	add	r3, sp, #104	@ 0x68
 80093f8:	9300      	str	r3, [sp, #0]
 80093fa:	4a8e      	ldr	r2, [pc, #568]	@ (8009634 <_strtod_l+0x28c>)
 80093fc:	9805      	ldr	r0, [sp, #20]
 80093fe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009400:	a919      	add	r1, sp, #100	@ 0x64
 8009402:	f001 f927 	bl	800a654 <__gethex>
 8009406:	f010 060f 	ands.w	r6, r0, #15
 800940a:	4604      	mov	r4, r0
 800940c:	d005      	beq.n	800941a <_strtod_l+0x72>
 800940e:	2e06      	cmp	r6, #6
 8009410:	d128      	bne.n	8009464 <_strtod_l+0xbc>
 8009412:	3501      	adds	r5, #1
 8009414:	2300      	movs	r3, #0
 8009416:	9519      	str	r5, [sp, #100]	@ 0x64
 8009418:	930b      	str	r3, [sp, #44]	@ 0x2c
 800941a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800941c:	2b00      	cmp	r3, #0
 800941e:	f040 858e 	bne.w	8009f3e <_strtod_l+0xb96>
 8009422:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009424:	b1cb      	cbz	r3, 800945a <_strtod_l+0xb2>
 8009426:	4652      	mov	r2, sl
 8009428:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800942c:	ec43 2b10 	vmov	d0, r2, r3
 8009430:	b01f      	add	sp, #124	@ 0x7c
 8009432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009436:	2920      	cmp	r1, #32
 8009438:	d1ce      	bne.n	80093d8 <_strtod_l+0x30>
 800943a:	3201      	adds	r2, #1
 800943c:	e7c1      	b.n	80093c2 <_strtod_l+0x1a>
 800943e:	292d      	cmp	r1, #45	@ 0x2d
 8009440:	d1ca      	bne.n	80093d8 <_strtod_l+0x30>
 8009442:	2101      	movs	r1, #1
 8009444:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009446:	1c51      	adds	r1, r2, #1
 8009448:	9119      	str	r1, [sp, #100]	@ 0x64
 800944a:	7852      	ldrb	r2, [r2, #1]
 800944c:	2a00      	cmp	r2, #0
 800944e:	d1c5      	bne.n	80093dc <_strtod_l+0x34>
 8009450:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009452:	9419      	str	r4, [sp, #100]	@ 0x64
 8009454:	2b00      	cmp	r3, #0
 8009456:	f040 8570 	bne.w	8009f3a <_strtod_l+0xb92>
 800945a:	4652      	mov	r2, sl
 800945c:	465b      	mov	r3, fp
 800945e:	e7e5      	b.n	800942c <_strtod_l+0x84>
 8009460:	2100      	movs	r1, #0
 8009462:	e7ef      	b.n	8009444 <_strtod_l+0x9c>
 8009464:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009466:	b13a      	cbz	r2, 8009478 <_strtod_l+0xd0>
 8009468:	2135      	movs	r1, #53	@ 0x35
 800946a:	a81c      	add	r0, sp, #112	@ 0x70
 800946c:	f7ff ff3a 	bl	80092e4 <__copybits>
 8009470:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009472:	9805      	ldr	r0, [sp, #20]
 8009474:	f7ff fb08 	bl	8008a88 <_Bfree>
 8009478:	3e01      	subs	r6, #1
 800947a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800947c:	2e04      	cmp	r6, #4
 800947e:	d806      	bhi.n	800948e <_strtod_l+0xe6>
 8009480:	e8df f006 	tbb	[pc, r6]
 8009484:	201d0314 	.word	0x201d0314
 8009488:	14          	.byte	0x14
 8009489:	00          	.byte	0x00
 800948a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800948e:	05e1      	lsls	r1, r4, #23
 8009490:	bf48      	it	mi
 8009492:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009496:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800949a:	0d1b      	lsrs	r3, r3, #20
 800949c:	051b      	lsls	r3, r3, #20
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d1bb      	bne.n	800941a <_strtod_l+0x72>
 80094a2:	f7fe fb31 	bl	8007b08 <__errno>
 80094a6:	2322      	movs	r3, #34	@ 0x22
 80094a8:	6003      	str	r3, [r0, #0]
 80094aa:	e7b6      	b.n	800941a <_strtod_l+0x72>
 80094ac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80094b0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80094b4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80094b8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80094bc:	e7e7      	b.n	800948e <_strtod_l+0xe6>
 80094be:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800963c <_strtod_l+0x294>
 80094c2:	e7e4      	b.n	800948e <_strtod_l+0xe6>
 80094c4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80094c8:	f04f 3aff 	mov.w	sl, #4294967295
 80094cc:	e7df      	b.n	800948e <_strtod_l+0xe6>
 80094ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094d0:	1c5a      	adds	r2, r3, #1
 80094d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80094d4:	785b      	ldrb	r3, [r3, #1]
 80094d6:	2b30      	cmp	r3, #48	@ 0x30
 80094d8:	d0f9      	beq.n	80094ce <_strtod_l+0x126>
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d09d      	beq.n	800941a <_strtod_l+0x72>
 80094de:	2301      	movs	r3, #1
 80094e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80094e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80094e6:	2300      	movs	r3, #0
 80094e8:	9308      	str	r3, [sp, #32]
 80094ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80094ec:	461f      	mov	r7, r3
 80094ee:	220a      	movs	r2, #10
 80094f0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80094f2:	7805      	ldrb	r5, [r0, #0]
 80094f4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80094f8:	b2d9      	uxtb	r1, r3
 80094fa:	2909      	cmp	r1, #9
 80094fc:	d928      	bls.n	8009550 <_strtod_l+0x1a8>
 80094fe:	494e      	ldr	r1, [pc, #312]	@ (8009638 <_strtod_l+0x290>)
 8009500:	2201      	movs	r2, #1
 8009502:	f000 ffd5 	bl	800a4b0 <strncmp>
 8009506:	2800      	cmp	r0, #0
 8009508:	d032      	beq.n	8009570 <_strtod_l+0x1c8>
 800950a:	2000      	movs	r0, #0
 800950c:	462a      	mov	r2, r5
 800950e:	4681      	mov	r9, r0
 8009510:	463d      	mov	r5, r7
 8009512:	4603      	mov	r3, r0
 8009514:	2a65      	cmp	r2, #101	@ 0x65
 8009516:	d001      	beq.n	800951c <_strtod_l+0x174>
 8009518:	2a45      	cmp	r2, #69	@ 0x45
 800951a:	d114      	bne.n	8009546 <_strtod_l+0x19e>
 800951c:	b91d      	cbnz	r5, 8009526 <_strtod_l+0x17e>
 800951e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009520:	4302      	orrs	r2, r0
 8009522:	d095      	beq.n	8009450 <_strtod_l+0xa8>
 8009524:	2500      	movs	r5, #0
 8009526:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009528:	1c62      	adds	r2, r4, #1
 800952a:	9219      	str	r2, [sp, #100]	@ 0x64
 800952c:	7862      	ldrb	r2, [r4, #1]
 800952e:	2a2b      	cmp	r2, #43	@ 0x2b
 8009530:	d077      	beq.n	8009622 <_strtod_l+0x27a>
 8009532:	2a2d      	cmp	r2, #45	@ 0x2d
 8009534:	d07b      	beq.n	800962e <_strtod_l+0x286>
 8009536:	f04f 0c00 	mov.w	ip, #0
 800953a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800953e:	2909      	cmp	r1, #9
 8009540:	f240 8082 	bls.w	8009648 <_strtod_l+0x2a0>
 8009544:	9419      	str	r4, [sp, #100]	@ 0x64
 8009546:	f04f 0800 	mov.w	r8, #0
 800954a:	e0a2      	b.n	8009692 <_strtod_l+0x2ea>
 800954c:	2300      	movs	r3, #0
 800954e:	e7c7      	b.n	80094e0 <_strtod_l+0x138>
 8009550:	2f08      	cmp	r7, #8
 8009552:	bfd5      	itete	le
 8009554:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009556:	9908      	ldrgt	r1, [sp, #32]
 8009558:	fb02 3301 	mlale	r3, r2, r1, r3
 800955c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009560:	f100 0001 	add.w	r0, r0, #1
 8009564:	bfd4      	ite	le
 8009566:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009568:	9308      	strgt	r3, [sp, #32]
 800956a:	3701      	adds	r7, #1
 800956c:	9019      	str	r0, [sp, #100]	@ 0x64
 800956e:	e7bf      	b.n	80094f0 <_strtod_l+0x148>
 8009570:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009572:	1c5a      	adds	r2, r3, #1
 8009574:	9219      	str	r2, [sp, #100]	@ 0x64
 8009576:	785a      	ldrb	r2, [r3, #1]
 8009578:	b37f      	cbz	r7, 80095da <_strtod_l+0x232>
 800957a:	4681      	mov	r9, r0
 800957c:	463d      	mov	r5, r7
 800957e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009582:	2b09      	cmp	r3, #9
 8009584:	d912      	bls.n	80095ac <_strtod_l+0x204>
 8009586:	2301      	movs	r3, #1
 8009588:	e7c4      	b.n	8009514 <_strtod_l+0x16c>
 800958a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800958c:	1c5a      	adds	r2, r3, #1
 800958e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009590:	785a      	ldrb	r2, [r3, #1]
 8009592:	3001      	adds	r0, #1
 8009594:	2a30      	cmp	r2, #48	@ 0x30
 8009596:	d0f8      	beq.n	800958a <_strtod_l+0x1e2>
 8009598:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800959c:	2b08      	cmp	r3, #8
 800959e:	f200 84d3 	bhi.w	8009f48 <_strtod_l+0xba0>
 80095a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80095a6:	4681      	mov	r9, r0
 80095a8:	2000      	movs	r0, #0
 80095aa:	4605      	mov	r5, r0
 80095ac:	3a30      	subs	r2, #48	@ 0x30
 80095ae:	f100 0301 	add.w	r3, r0, #1
 80095b2:	d02a      	beq.n	800960a <_strtod_l+0x262>
 80095b4:	4499      	add	r9, r3
 80095b6:	eb00 0c05 	add.w	ip, r0, r5
 80095ba:	462b      	mov	r3, r5
 80095bc:	210a      	movs	r1, #10
 80095be:	4563      	cmp	r3, ip
 80095c0:	d10d      	bne.n	80095de <_strtod_l+0x236>
 80095c2:	1c69      	adds	r1, r5, #1
 80095c4:	4401      	add	r1, r0
 80095c6:	4428      	add	r0, r5
 80095c8:	2808      	cmp	r0, #8
 80095ca:	dc16      	bgt.n	80095fa <_strtod_l+0x252>
 80095cc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80095ce:	230a      	movs	r3, #10
 80095d0:	fb03 2300 	mla	r3, r3, r0, r2
 80095d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80095d6:	2300      	movs	r3, #0
 80095d8:	e018      	b.n	800960c <_strtod_l+0x264>
 80095da:	4638      	mov	r0, r7
 80095dc:	e7da      	b.n	8009594 <_strtod_l+0x1ec>
 80095de:	2b08      	cmp	r3, #8
 80095e0:	f103 0301 	add.w	r3, r3, #1
 80095e4:	dc03      	bgt.n	80095ee <_strtod_l+0x246>
 80095e6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80095e8:	434e      	muls	r6, r1
 80095ea:	960a      	str	r6, [sp, #40]	@ 0x28
 80095ec:	e7e7      	b.n	80095be <_strtod_l+0x216>
 80095ee:	2b10      	cmp	r3, #16
 80095f0:	bfde      	ittt	le
 80095f2:	9e08      	ldrle	r6, [sp, #32]
 80095f4:	434e      	mulle	r6, r1
 80095f6:	9608      	strle	r6, [sp, #32]
 80095f8:	e7e1      	b.n	80095be <_strtod_l+0x216>
 80095fa:	280f      	cmp	r0, #15
 80095fc:	dceb      	bgt.n	80095d6 <_strtod_l+0x22e>
 80095fe:	9808      	ldr	r0, [sp, #32]
 8009600:	230a      	movs	r3, #10
 8009602:	fb03 2300 	mla	r3, r3, r0, r2
 8009606:	9308      	str	r3, [sp, #32]
 8009608:	e7e5      	b.n	80095d6 <_strtod_l+0x22e>
 800960a:	4629      	mov	r1, r5
 800960c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800960e:	1c50      	adds	r0, r2, #1
 8009610:	9019      	str	r0, [sp, #100]	@ 0x64
 8009612:	7852      	ldrb	r2, [r2, #1]
 8009614:	4618      	mov	r0, r3
 8009616:	460d      	mov	r5, r1
 8009618:	e7b1      	b.n	800957e <_strtod_l+0x1d6>
 800961a:	f04f 0900 	mov.w	r9, #0
 800961e:	2301      	movs	r3, #1
 8009620:	e77d      	b.n	800951e <_strtod_l+0x176>
 8009622:	f04f 0c00 	mov.w	ip, #0
 8009626:	1ca2      	adds	r2, r4, #2
 8009628:	9219      	str	r2, [sp, #100]	@ 0x64
 800962a:	78a2      	ldrb	r2, [r4, #2]
 800962c:	e785      	b.n	800953a <_strtod_l+0x192>
 800962e:	f04f 0c01 	mov.w	ip, #1
 8009632:	e7f8      	b.n	8009626 <_strtod_l+0x27e>
 8009634:	0800cb58 	.word	0x0800cb58
 8009638:	0800cb40 	.word	0x0800cb40
 800963c:	7ff00000 	.word	0x7ff00000
 8009640:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009642:	1c51      	adds	r1, r2, #1
 8009644:	9119      	str	r1, [sp, #100]	@ 0x64
 8009646:	7852      	ldrb	r2, [r2, #1]
 8009648:	2a30      	cmp	r2, #48	@ 0x30
 800964a:	d0f9      	beq.n	8009640 <_strtod_l+0x298>
 800964c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009650:	2908      	cmp	r1, #8
 8009652:	f63f af78 	bhi.w	8009546 <_strtod_l+0x19e>
 8009656:	3a30      	subs	r2, #48	@ 0x30
 8009658:	920e      	str	r2, [sp, #56]	@ 0x38
 800965a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800965c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800965e:	f04f 080a 	mov.w	r8, #10
 8009662:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009664:	1c56      	adds	r6, r2, #1
 8009666:	9619      	str	r6, [sp, #100]	@ 0x64
 8009668:	7852      	ldrb	r2, [r2, #1]
 800966a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800966e:	f1be 0f09 	cmp.w	lr, #9
 8009672:	d939      	bls.n	80096e8 <_strtod_l+0x340>
 8009674:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009676:	1a76      	subs	r6, r6, r1
 8009678:	2e08      	cmp	r6, #8
 800967a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800967e:	dc03      	bgt.n	8009688 <_strtod_l+0x2e0>
 8009680:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009682:	4588      	cmp	r8, r1
 8009684:	bfa8      	it	ge
 8009686:	4688      	movge	r8, r1
 8009688:	f1bc 0f00 	cmp.w	ip, #0
 800968c:	d001      	beq.n	8009692 <_strtod_l+0x2ea>
 800968e:	f1c8 0800 	rsb	r8, r8, #0
 8009692:	2d00      	cmp	r5, #0
 8009694:	d14e      	bne.n	8009734 <_strtod_l+0x38c>
 8009696:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009698:	4308      	orrs	r0, r1
 800969a:	f47f aebe 	bne.w	800941a <_strtod_l+0x72>
 800969e:	2b00      	cmp	r3, #0
 80096a0:	f47f aed6 	bne.w	8009450 <_strtod_l+0xa8>
 80096a4:	2a69      	cmp	r2, #105	@ 0x69
 80096a6:	d028      	beq.n	80096fa <_strtod_l+0x352>
 80096a8:	dc25      	bgt.n	80096f6 <_strtod_l+0x34e>
 80096aa:	2a49      	cmp	r2, #73	@ 0x49
 80096ac:	d025      	beq.n	80096fa <_strtod_l+0x352>
 80096ae:	2a4e      	cmp	r2, #78	@ 0x4e
 80096b0:	f47f aece 	bne.w	8009450 <_strtod_l+0xa8>
 80096b4:	499b      	ldr	r1, [pc, #620]	@ (8009924 <_strtod_l+0x57c>)
 80096b6:	a819      	add	r0, sp, #100	@ 0x64
 80096b8:	f001 f9ee 	bl	800aa98 <__match>
 80096bc:	2800      	cmp	r0, #0
 80096be:	f43f aec7 	beq.w	8009450 <_strtod_l+0xa8>
 80096c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	2b28      	cmp	r3, #40	@ 0x28
 80096c8:	d12e      	bne.n	8009728 <_strtod_l+0x380>
 80096ca:	4997      	ldr	r1, [pc, #604]	@ (8009928 <_strtod_l+0x580>)
 80096cc:	aa1c      	add	r2, sp, #112	@ 0x70
 80096ce:	a819      	add	r0, sp, #100	@ 0x64
 80096d0:	f001 f9f6 	bl	800aac0 <__hexnan>
 80096d4:	2805      	cmp	r0, #5
 80096d6:	d127      	bne.n	8009728 <_strtod_l+0x380>
 80096d8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80096da:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80096de:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80096e2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80096e6:	e698      	b.n	800941a <_strtod_l+0x72>
 80096e8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80096ea:	fb08 2101 	mla	r1, r8, r1, r2
 80096ee:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80096f2:	920e      	str	r2, [sp, #56]	@ 0x38
 80096f4:	e7b5      	b.n	8009662 <_strtod_l+0x2ba>
 80096f6:	2a6e      	cmp	r2, #110	@ 0x6e
 80096f8:	e7da      	b.n	80096b0 <_strtod_l+0x308>
 80096fa:	498c      	ldr	r1, [pc, #560]	@ (800992c <_strtod_l+0x584>)
 80096fc:	a819      	add	r0, sp, #100	@ 0x64
 80096fe:	f001 f9cb 	bl	800aa98 <__match>
 8009702:	2800      	cmp	r0, #0
 8009704:	f43f aea4 	beq.w	8009450 <_strtod_l+0xa8>
 8009708:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800970a:	4989      	ldr	r1, [pc, #548]	@ (8009930 <_strtod_l+0x588>)
 800970c:	3b01      	subs	r3, #1
 800970e:	a819      	add	r0, sp, #100	@ 0x64
 8009710:	9319      	str	r3, [sp, #100]	@ 0x64
 8009712:	f001 f9c1 	bl	800aa98 <__match>
 8009716:	b910      	cbnz	r0, 800971e <_strtod_l+0x376>
 8009718:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800971a:	3301      	adds	r3, #1
 800971c:	9319      	str	r3, [sp, #100]	@ 0x64
 800971e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009940 <_strtod_l+0x598>
 8009722:	f04f 0a00 	mov.w	sl, #0
 8009726:	e678      	b.n	800941a <_strtod_l+0x72>
 8009728:	4882      	ldr	r0, [pc, #520]	@ (8009934 <_strtod_l+0x58c>)
 800972a:	f000 fef1 	bl	800a510 <nan>
 800972e:	ec5b ab10 	vmov	sl, fp, d0
 8009732:	e672      	b.n	800941a <_strtod_l+0x72>
 8009734:	eba8 0309 	sub.w	r3, r8, r9
 8009738:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800973a:	9309      	str	r3, [sp, #36]	@ 0x24
 800973c:	2f00      	cmp	r7, #0
 800973e:	bf08      	it	eq
 8009740:	462f      	moveq	r7, r5
 8009742:	2d10      	cmp	r5, #16
 8009744:	462c      	mov	r4, r5
 8009746:	bfa8      	it	ge
 8009748:	2410      	movge	r4, #16
 800974a:	f7f6 fedb 	bl	8000504 <__aeabi_ui2d>
 800974e:	2d09      	cmp	r5, #9
 8009750:	4682      	mov	sl, r0
 8009752:	468b      	mov	fp, r1
 8009754:	dc13      	bgt.n	800977e <_strtod_l+0x3d6>
 8009756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009758:	2b00      	cmp	r3, #0
 800975a:	f43f ae5e 	beq.w	800941a <_strtod_l+0x72>
 800975e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009760:	dd78      	ble.n	8009854 <_strtod_l+0x4ac>
 8009762:	2b16      	cmp	r3, #22
 8009764:	dc5f      	bgt.n	8009826 <_strtod_l+0x47e>
 8009766:	4974      	ldr	r1, [pc, #464]	@ (8009938 <_strtod_l+0x590>)
 8009768:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800976c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009770:	4652      	mov	r2, sl
 8009772:	465b      	mov	r3, fp
 8009774:	f7f6 ff40 	bl	80005f8 <__aeabi_dmul>
 8009778:	4682      	mov	sl, r0
 800977a:	468b      	mov	fp, r1
 800977c:	e64d      	b.n	800941a <_strtod_l+0x72>
 800977e:	4b6e      	ldr	r3, [pc, #440]	@ (8009938 <_strtod_l+0x590>)
 8009780:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009784:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009788:	f7f6 ff36 	bl	80005f8 <__aeabi_dmul>
 800978c:	4682      	mov	sl, r0
 800978e:	9808      	ldr	r0, [sp, #32]
 8009790:	468b      	mov	fp, r1
 8009792:	f7f6 feb7 	bl	8000504 <__aeabi_ui2d>
 8009796:	4602      	mov	r2, r0
 8009798:	460b      	mov	r3, r1
 800979a:	4650      	mov	r0, sl
 800979c:	4659      	mov	r1, fp
 800979e:	f7f6 fd75 	bl	800028c <__adddf3>
 80097a2:	2d0f      	cmp	r5, #15
 80097a4:	4682      	mov	sl, r0
 80097a6:	468b      	mov	fp, r1
 80097a8:	ddd5      	ble.n	8009756 <_strtod_l+0x3ae>
 80097aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097ac:	1b2c      	subs	r4, r5, r4
 80097ae:	441c      	add	r4, r3
 80097b0:	2c00      	cmp	r4, #0
 80097b2:	f340 8096 	ble.w	80098e2 <_strtod_l+0x53a>
 80097b6:	f014 030f 	ands.w	r3, r4, #15
 80097ba:	d00a      	beq.n	80097d2 <_strtod_l+0x42a>
 80097bc:	495e      	ldr	r1, [pc, #376]	@ (8009938 <_strtod_l+0x590>)
 80097be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80097c2:	4652      	mov	r2, sl
 80097c4:	465b      	mov	r3, fp
 80097c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097ca:	f7f6 ff15 	bl	80005f8 <__aeabi_dmul>
 80097ce:	4682      	mov	sl, r0
 80097d0:	468b      	mov	fp, r1
 80097d2:	f034 040f 	bics.w	r4, r4, #15
 80097d6:	d073      	beq.n	80098c0 <_strtod_l+0x518>
 80097d8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80097dc:	dd48      	ble.n	8009870 <_strtod_l+0x4c8>
 80097de:	2400      	movs	r4, #0
 80097e0:	46a0      	mov	r8, r4
 80097e2:	940a      	str	r4, [sp, #40]	@ 0x28
 80097e4:	46a1      	mov	r9, r4
 80097e6:	9a05      	ldr	r2, [sp, #20]
 80097e8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009940 <_strtod_l+0x598>
 80097ec:	2322      	movs	r3, #34	@ 0x22
 80097ee:	6013      	str	r3, [r2, #0]
 80097f0:	f04f 0a00 	mov.w	sl, #0
 80097f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	f43f ae0f 	beq.w	800941a <_strtod_l+0x72>
 80097fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80097fe:	9805      	ldr	r0, [sp, #20]
 8009800:	f7ff f942 	bl	8008a88 <_Bfree>
 8009804:	9805      	ldr	r0, [sp, #20]
 8009806:	4649      	mov	r1, r9
 8009808:	f7ff f93e 	bl	8008a88 <_Bfree>
 800980c:	9805      	ldr	r0, [sp, #20]
 800980e:	4641      	mov	r1, r8
 8009810:	f7ff f93a 	bl	8008a88 <_Bfree>
 8009814:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009816:	9805      	ldr	r0, [sp, #20]
 8009818:	f7ff f936 	bl	8008a88 <_Bfree>
 800981c:	9805      	ldr	r0, [sp, #20]
 800981e:	4621      	mov	r1, r4
 8009820:	f7ff f932 	bl	8008a88 <_Bfree>
 8009824:	e5f9      	b.n	800941a <_strtod_l+0x72>
 8009826:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009828:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800982c:	4293      	cmp	r3, r2
 800982e:	dbbc      	blt.n	80097aa <_strtod_l+0x402>
 8009830:	4c41      	ldr	r4, [pc, #260]	@ (8009938 <_strtod_l+0x590>)
 8009832:	f1c5 050f 	rsb	r5, r5, #15
 8009836:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800983a:	4652      	mov	r2, sl
 800983c:	465b      	mov	r3, fp
 800983e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009842:	f7f6 fed9 	bl	80005f8 <__aeabi_dmul>
 8009846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009848:	1b5d      	subs	r5, r3, r5
 800984a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800984e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009852:	e78f      	b.n	8009774 <_strtod_l+0x3cc>
 8009854:	3316      	adds	r3, #22
 8009856:	dba8      	blt.n	80097aa <_strtod_l+0x402>
 8009858:	4b37      	ldr	r3, [pc, #220]	@ (8009938 <_strtod_l+0x590>)
 800985a:	eba9 0808 	sub.w	r8, r9, r8
 800985e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009862:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009866:	4650      	mov	r0, sl
 8009868:	4659      	mov	r1, fp
 800986a:	f7f6 ffef 	bl	800084c <__aeabi_ddiv>
 800986e:	e783      	b.n	8009778 <_strtod_l+0x3d0>
 8009870:	4b32      	ldr	r3, [pc, #200]	@ (800993c <_strtod_l+0x594>)
 8009872:	9308      	str	r3, [sp, #32]
 8009874:	2300      	movs	r3, #0
 8009876:	1124      	asrs	r4, r4, #4
 8009878:	4650      	mov	r0, sl
 800987a:	4659      	mov	r1, fp
 800987c:	461e      	mov	r6, r3
 800987e:	2c01      	cmp	r4, #1
 8009880:	dc21      	bgt.n	80098c6 <_strtod_l+0x51e>
 8009882:	b10b      	cbz	r3, 8009888 <_strtod_l+0x4e0>
 8009884:	4682      	mov	sl, r0
 8009886:	468b      	mov	fp, r1
 8009888:	492c      	ldr	r1, [pc, #176]	@ (800993c <_strtod_l+0x594>)
 800988a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800988e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009892:	4652      	mov	r2, sl
 8009894:	465b      	mov	r3, fp
 8009896:	e9d1 0100 	ldrd	r0, r1, [r1]
 800989a:	f7f6 fead 	bl	80005f8 <__aeabi_dmul>
 800989e:	4b28      	ldr	r3, [pc, #160]	@ (8009940 <_strtod_l+0x598>)
 80098a0:	460a      	mov	r2, r1
 80098a2:	400b      	ands	r3, r1
 80098a4:	4927      	ldr	r1, [pc, #156]	@ (8009944 <_strtod_l+0x59c>)
 80098a6:	428b      	cmp	r3, r1
 80098a8:	4682      	mov	sl, r0
 80098aa:	d898      	bhi.n	80097de <_strtod_l+0x436>
 80098ac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80098b0:	428b      	cmp	r3, r1
 80098b2:	bf86      	itte	hi
 80098b4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009948 <_strtod_l+0x5a0>
 80098b8:	f04f 3aff 	movhi.w	sl, #4294967295
 80098bc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80098c0:	2300      	movs	r3, #0
 80098c2:	9308      	str	r3, [sp, #32]
 80098c4:	e07a      	b.n	80099bc <_strtod_l+0x614>
 80098c6:	07e2      	lsls	r2, r4, #31
 80098c8:	d505      	bpl.n	80098d6 <_strtod_l+0x52e>
 80098ca:	9b08      	ldr	r3, [sp, #32]
 80098cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d0:	f7f6 fe92 	bl	80005f8 <__aeabi_dmul>
 80098d4:	2301      	movs	r3, #1
 80098d6:	9a08      	ldr	r2, [sp, #32]
 80098d8:	3208      	adds	r2, #8
 80098da:	3601      	adds	r6, #1
 80098dc:	1064      	asrs	r4, r4, #1
 80098de:	9208      	str	r2, [sp, #32]
 80098e0:	e7cd      	b.n	800987e <_strtod_l+0x4d6>
 80098e2:	d0ed      	beq.n	80098c0 <_strtod_l+0x518>
 80098e4:	4264      	negs	r4, r4
 80098e6:	f014 020f 	ands.w	r2, r4, #15
 80098ea:	d00a      	beq.n	8009902 <_strtod_l+0x55a>
 80098ec:	4b12      	ldr	r3, [pc, #72]	@ (8009938 <_strtod_l+0x590>)
 80098ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098f2:	4650      	mov	r0, sl
 80098f4:	4659      	mov	r1, fp
 80098f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fa:	f7f6 ffa7 	bl	800084c <__aeabi_ddiv>
 80098fe:	4682      	mov	sl, r0
 8009900:	468b      	mov	fp, r1
 8009902:	1124      	asrs	r4, r4, #4
 8009904:	d0dc      	beq.n	80098c0 <_strtod_l+0x518>
 8009906:	2c1f      	cmp	r4, #31
 8009908:	dd20      	ble.n	800994c <_strtod_l+0x5a4>
 800990a:	2400      	movs	r4, #0
 800990c:	46a0      	mov	r8, r4
 800990e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009910:	46a1      	mov	r9, r4
 8009912:	9a05      	ldr	r2, [sp, #20]
 8009914:	2322      	movs	r3, #34	@ 0x22
 8009916:	f04f 0a00 	mov.w	sl, #0
 800991a:	f04f 0b00 	mov.w	fp, #0
 800991e:	6013      	str	r3, [r2, #0]
 8009920:	e768      	b.n	80097f4 <_strtod_l+0x44c>
 8009922:	bf00      	nop
 8009924:	0800c92d 	.word	0x0800c92d
 8009928:	0800cb44 	.word	0x0800cb44
 800992c:	0800c925 	.word	0x0800c925
 8009930:	0800c95c 	.word	0x0800c95c
 8009934:	0800cced 	.word	0x0800cced
 8009938:	0800ca78 	.word	0x0800ca78
 800993c:	0800ca50 	.word	0x0800ca50
 8009940:	7ff00000 	.word	0x7ff00000
 8009944:	7ca00000 	.word	0x7ca00000
 8009948:	7fefffff 	.word	0x7fefffff
 800994c:	f014 0310 	ands.w	r3, r4, #16
 8009950:	bf18      	it	ne
 8009952:	236a      	movne	r3, #106	@ 0x6a
 8009954:	4ea9      	ldr	r6, [pc, #676]	@ (8009bfc <_strtod_l+0x854>)
 8009956:	9308      	str	r3, [sp, #32]
 8009958:	4650      	mov	r0, sl
 800995a:	4659      	mov	r1, fp
 800995c:	2300      	movs	r3, #0
 800995e:	07e2      	lsls	r2, r4, #31
 8009960:	d504      	bpl.n	800996c <_strtod_l+0x5c4>
 8009962:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009966:	f7f6 fe47 	bl	80005f8 <__aeabi_dmul>
 800996a:	2301      	movs	r3, #1
 800996c:	1064      	asrs	r4, r4, #1
 800996e:	f106 0608 	add.w	r6, r6, #8
 8009972:	d1f4      	bne.n	800995e <_strtod_l+0x5b6>
 8009974:	b10b      	cbz	r3, 800997a <_strtod_l+0x5d2>
 8009976:	4682      	mov	sl, r0
 8009978:	468b      	mov	fp, r1
 800997a:	9b08      	ldr	r3, [sp, #32]
 800997c:	b1b3      	cbz	r3, 80099ac <_strtod_l+0x604>
 800997e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009982:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009986:	2b00      	cmp	r3, #0
 8009988:	4659      	mov	r1, fp
 800998a:	dd0f      	ble.n	80099ac <_strtod_l+0x604>
 800998c:	2b1f      	cmp	r3, #31
 800998e:	dd55      	ble.n	8009a3c <_strtod_l+0x694>
 8009990:	2b34      	cmp	r3, #52	@ 0x34
 8009992:	bfde      	ittt	le
 8009994:	f04f 33ff 	movle.w	r3, #4294967295
 8009998:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800999c:	4093      	lslle	r3, r2
 800999e:	f04f 0a00 	mov.w	sl, #0
 80099a2:	bfcc      	ite	gt
 80099a4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80099a8:	ea03 0b01 	andle.w	fp, r3, r1
 80099ac:	2200      	movs	r2, #0
 80099ae:	2300      	movs	r3, #0
 80099b0:	4650      	mov	r0, sl
 80099b2:	4659      	mov	r1, fp
 80099b4:	f7f7 f888 	bl	8000ac8 <__aeabi_dcmpeq>
 80099b8:	2800      	cmp	r0, #0
 80099ba:	d1a6      	bne.n	800990a <_strtod_l+0x562>
 80099bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099be:	9300      	str	r3, [sp, #0]
 80099c0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80099c2:	9805      	ldr	r0, [sp, #20]
 80099c4:	462b      	mov	r3, r5
 80099c6:	463a      	mov	r2, r7
 80099c8:	f7ff f8c6 	bl	8008b58 <__s2b>
 80099cc:	900a      	str	r0, [sp, #40]	@ 0x28
 80099ce:	2800      	cmp	r0, #0
 80099d0:	f43f af05 	beq.w	80097de <_strtod_l+0x436>
 80099d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099d6:	2a00      	cmp	r2, #0
 80099d8:	eba9 0308 	sub.w	r3, r9, r8
 80099dc:	bfa8      	it	ge
 80099de:	2300      	movge	r3, #0
 80099e0:	9312      	str	r3, [sp, #72]	@ 0x48
 80099e2:	2400      	movs	r4, #0
 80099e4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80099e8:	9316      	str	r3, [sp, #88]	@ 0x58
 80099ea:	46a0      	mov	r8, r4
 80099ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099ee:	9805      	ldr	r0, [sp, #20]
 80099f0:	6859      	ldr	r1, [r3, #4]
 80099f2:	f7ff f809 	bl	8008a08 <_Balloc>
 80099f6:	4681      	mov	r9, r0
 80099f8:	2800      	cmp	r0, #0
 80099fa:	f43f aef4 	beq.w	80097e6 <_strtod_l+0x43e>
 80099fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a00:	691a      	ldr	r2, [r3, #16]
 8009a02:	3202      	adds	r2, #2
 8009a04:	f103 010c 	add.w	r1, r3, #12
 8009a08:	0092      	lsls	r2, r2, #2
 8009a0a:	300c      	adds	r0, #12
 8009a0c:	f000 fd72 	bl	800a4f4 <memcpy>
 8009a10:	ec4b ab10 	vmov	d0, sl, fp
 8009a14:	9805      	ldr	r0, [sp, #20]
 8009a16:	aa1c      	add	r2, sp, #112	@ 0x70
 8009a18:	a91b      	add	r1, sp, #108	@ 0x6c
 8009a1a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009a1e:	f7ff fbd7 	bl	80091d0 <__d2b>
 8009a22:	901a      	str	r0, [sp, #104]	@ 0x68
 8009a24:	2800      	cmp	r0, #0
 8009a26:	f43f aede 	beq.w	80097e6 <_strtod_l+0x43e>
 8009a2a:	9805      	ldr	r0, [sp, #20]
 8009a2c:	2101      	movs	r1, #1
 8009a2e:	f7ff f929 	bl	8008c84 <__i2b>
 8009a32:	4680      	mov	r8, r0
 8009a34:	b948      	cbnz	r0, 8009a4a <_strtod_l+0x6a2>
 8009a36:	f04f 0800 	mov.w	r8, #0
 8009a3a:	e6d4      	b.n	80097e6 <_strtod_l+0x43e>
 8009a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8009a40:	fa02 f303 	lsl.w	r3, r2, r3
 8009a44:	ea03 0a0a 	and.w	sl, r3, sl
 8009a48:	e7b0      	b.n	80099ac <_strtod_l+0x604>
 8009a4a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009a4c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009a4e:	2d00      	cmp	r5, #0
 8009a50:	bfab      	itete	ge
 8009a52:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009a54:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009a56:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009a58:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009a5a:	bfac      	ite	ge
 8009a5c:	18ef      	addge	r7, r5, r3
 8009a5e:	1b5e      	sublt	r6, r3, r5
 8009a60:	9b08      	ldr	r3, [sp, #32]
 8009a62:	1aed      	subs	r5, r5, r3
 8009a64:	4415      	add	r5, r2
 8009a66:	4b66      	ldr	r3, [pc, #408]	@ (8009c00 <_strtod_l+0x858>)
 8009a68:	3d01      	subs	r5, #1
 8009a6a:	429d      	cmp	r5, r3
 8009a6c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009a70:	da50      	bge.n	8009b14 <_strtod_l+0x76c>
 8009a72:	1b5b      	subs	r3, r3, r5
 8009a74:	2b1f      	cmp	r3, #31
 8009a76:	eba2 0203 	sub.w	r2, r2, r3
 8009a7a:	f04f 0101 	mov.w	r1, #1
 8009a7e:	dc3d      	bgt.n	8009afc <_strtod_l+0x754>
 8009a80:	fa01 f303 	lsl.w	r3, r1, r3
 8009a84:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009a86:	2300      	movs	r3, #0
 8009a88:	9310      	str	r3, [sp, #64]	@ 0x40
 8009a8a:	18bd      	adds	r5, r7, r2
 8009a8c:	9b08      	ldr	r3, [sp, #32]
 8009a8e:	42af      	cmp	r7, r5
 8009a90:	4416      	add	r6, r2
 8009a92:	441e      	add	r6, r3
 8009a94:	463b      	mov	r3, r7
 8009a96:	bfa8      	it	ge
 8009a98:	462b      	movge	r3, r5
 8009a9a:	42b3      	cmp	r3, r6
 8009a9c:	bfa8      	it	ge
 8009a9e:	4633      	movge	r3, r6
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	bfc2      	ittt	gt
 8009aa4:	1aed      	subgt	r5, r5, r3
 8009aa6:	1af6      	subgt	r6, r6, r3
 8009aa8:	1aff      	subgt	r7, r7, r3
 8009aaa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	dd16      	ble.n	8009ade <_strtod_l+0x736>
 8009ab0:	4641      	mov	r1, r8
 8009ab2:	9805      	ldr	r0, [sp, #20]
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	f7ff f9a5 	bl	8008e04 <__pow5mult>
 8009aba:	4680      	mov	r8, r0
 8009abc:	2800      	cmp	r0, #0
 8009abe:	d0ba      	beq.n	8009a36 <_strtod_l+0x68e>
 8009ac0:	4601      	mov	r1, r0
 8009ac2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009ac4:	9805      	ldr	r0, [sp, #20]
 8009ac6:	f7ff f8f3 	bl	8008cb0 <__multiply>
 8009aca:	900e      	str	r0, [sp, #56]	@ 0x38
 8009acc:	2800      	cmp	r0, #0
 8009ace:	f43f ae8a 	beq.w	80097e6 <_strtod_l+0x43e>
 8009ad2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ad4:	9805      	ldr	r0, [sp, #20]
 8009ad6:	f7fe ffd7 	bl	8008a88 <_Bfree>
 8009ada:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009adc:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ade:	2d00      	cmp	r5, #0
 8009ae0:	dc1d      	bgt.n	8009b1e <_strtod_l+0x776>
 8009ae2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	dd23      	ble.n	8009b30 <_strtod_l+0x788>
 8009ae8:	4649      	mov	r1, r9
 8009aea:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009aec:	9805      	ldr	r0, [sp, #20]
 8009aee:	f7ff f989 	bl	8008e04 <__pow5mult>
 8009af2:	4681      	mov	r9, r0
 8009af4:	b9e0      	cbnz	r0, 8009b30 <_strtod_l+0x788>
 8009af6:	f04f 0900 	mov.w	r9, #0
 8009afa:	e674      	b.n	80097e6 <_strtod_l+0x43e>
 8009afc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009b00:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009b04:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009b08:	35e2      	adds	r5, #226	@ 0xe2
 8009b0a:	fa01 f305 	lsl.w	r3, r1, r5
 8009b0e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009b10:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009b12:	e7ba      	b.n	8009a8a <_strtod_l+0x6e2>
 8009b14:	2300      	movs	r3, #0
 8009b16:	9310      	str	r3, [sp, #64]	@ 0x40
 8009b18:	2301      	movs	r3, #1
 8009b1a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009b1c:	e7b5      	b.n	8009a8a <_strtod_l+0x6e2>
 8009b1e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b20:	9805      	ldr	r0, [sp, #20]
 8009b22:	462a      	mov	r2, r5
 8009b24:	f7ff f9c8 	bl	8008eb8 <__lshift>
 8009b28:	901a      	str	r0, [sp, #104]	@ 0x68
 8009b2a:	2800      	cmp	r0, #0
 8009b2c:	d1d9      	bne.n	8009ae2 <_strtod_l+0x73a>
 8009b2e:	e65a      	b.n	80097e6 <_strtod_l+0x43e>
 8009b30:	2e00      	cmp	r6, #0
 8009b32:	dd07      	ble.n	8009b44 <_strtod_l+0x79c>
 8009b34:	4649      	mov	r1, r9
 8009b36:	9805      	ldr	r0, [sp, #20]
 8009b38:	4632      	mov	r2, r6
 8009b3a:	f7ff f9bd 	bl	8008eb8 <__lshift>
 8009b3e:	4681      	mov	r9, r0
 8009b40:	2800      	cmp	r0, #0
 8009b42:	d0d8      	beq.n	8009af6 <_strtod_l+0x74e>
 8009b44:	2f00      	cmp	r7, #0
 8009b46:	dd08      	ble.n	8009b5a <_strtod_l+0x7b2>
 8009b48:	4641      	mov	r1, r8
 8009b4a:	9805      	ldr	r0, [sp, #20]
 8009b4c:	463a      	mov	r2, r7
 8009b4e:	f7ff f9b3 	bl	8008eb8 <__lshift>
 8009b52:	4680      	mov	r8, r0
 8009b54:	2800      	cmp	r0, #0
 8009b56:	f43f ae46 	beq.w	80097e6 <_strtod_l+0x43e>
 8009b5a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b5c:	9805      	ldr	r0, [sp, #20]
 8009b5e:	464a      	mov	r2, r9
 8009b60:	f7ff fa32 	bl	8008fc8 <__mdiff>
 8009b64:	4604      	mov	r4, r0
 8009b66:	2800      	cmp	r0, #0
 8009b68:	f43f ae3d 	beq.w	80097e6 <_strtod_l+0x43e>
 8009b6c:	68c3      	ldr	r3, [r0, #12]
 8009b6e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009b70:	2300      	movs	r3, #0
 8009b72:	60c3      	str	r3, [r0, #12]
 8009b74:	4641      	mov	r1, r8
 8009b76:	f7ff fa0b 	bl	8008f90 <__mcmp>
 8009b7a:	2800      	cmp	r0, #0
 8009b7c:	da46      	bge.n	8009c0c <_strtod_l+0x864>
 8009b7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b80:	ea53 030a 	orrs.w	r3, r3, sl
 8009b84:	d16c      	bne.n	8009c60 <_strtod_l+0x8b8>
 8009b86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d168      	bne.n	8009c60 <_strtod_l+0x8b8>
 8009b8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009b92:	0d1b      	lsrs	r3, r3, #20
 8009b94:	051b      	lsls	r3, r3, #20
 8009b96:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009b9a:	d961      	bls.n	8009c60 <_strtod_l+0x8b8>
 8009b9c:	6963      	ldr	r3, [r4, #20]
 8009b9e:	b913      	cbnz	r3, 8009ba6 <_strtod_l+0x7fe>
 8009ba0:	6923      	ldr	r3, [r4, #16]
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	dd5c      	ble.n	8009c60 <_strtod_l+0x8b8>
 8009ba6:	4621      	mov	r1, r4
 8009ba8:	2201      	movs	r2, #1
 8009baa:	9805      	ldr	r0, [sp, #20]
 8009bac:	f7ff f984 	bl	8008eb8 <__lshift>
 8009bb0:	4641      	mov	r1, r8
 8009bb2:	4604      	mov	r4, r0
 8009bb4:	f7ff f9ec 	bl	8008f90 <__mcmp>
 8009bb8:	2800      	cmp	r0, #0
 8009bba:	dd51      	ble.n	8009c60 <_strtod_l+0x8b8>
 8009bbc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009bc0:	9a08      	ldr	r2, [sp, #32]
 8009bc2:	0d1b      	lsrs	r3, r3, #20
 8009bc4:	051b      	lsls	r3, r3, #20
 8009bc6:	2a00      	cmp	r2, #0
 8009bc8:	d06b      	beq.n	8009ca2 <_strtod_l+0x8fa>
 8009bca:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009bce:	d868      	bhi.n	8009ca2 <_strtod_l+0x8fa>
 8009bd0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009bd4:	f67f ae9d 	bls.w	8009912 <_strtod_l+0x56a>
 8009bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8009c04 <_strtod_l+0x85c>)
 8009bda:	4650      	mov	r0, sl
 8009bdc:	4659      	mov	r1, fp
 8009bde:	2200      	movs	r2, #0
 8009be0:	f7f6 fd0a 	bl	80005f8 <__aeabi_dmul>
 8009be4:	4b08      	ldr	r3, [pc, #32]	@ (8009c08 <_strtod_l+0x860>)
 8009be6:	400b      	ands	r3, r1
 8009be8:	4682      	mov	sl, r0
 8009bea:	468b      	mov	fp, r1
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	f47f ae05 	bne.w	80097fc <_strtod_l+0x454>
 8009bf2:	9a05      	ldr	r2, [sp, #20]
 8009bf4:	2322      	movs	r3, #34	@ 0x22
 8009bf6:	6013      	str	r3, [r2, #0]
 8009bf8:	e600      	b.n	80097fc <_strtod_l+0x454>
 8009bfa:	bf00      	nop
 8009bfc:	0800cb70 	.word	0x0800cb70
 8009c00:	fffffc02 	.word	0xfffffc02
 8009c04:	39500000 	.word	0x39500000
 8009c08:	7ff00000 	.word	0x7ff00000
 8009c0c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009c10:	d165      	bne.n	8009cde <_strtod_l+0x936>
 8009c12:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009c14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c18:	b35a      	cbz	r2, 8009c72 <_strtod_l+0x8ca>
 8009c1a:	4a9f      	ldr	r2, [pc, #636]	@ (8009e98 <_strtod_l+0xaf0>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d12b      	bne.n	8009c78 <_strtod_l+0x8d0>
 8009c20:	9b08      	ldr	r3, [sp, #32]
 8009c22:	4651      	mov	r1, sl
 8009c24:	b303      	cbz	r3, 8009c68 <_strtod_l+0x8c0>
 8009c26:	4b9d      	ldr	r3, [pc, #628]	@ (8009e9c <_strtod_l+0xaf4>)
 8009c28:	465a      	mov	r2, fp
 8009c2a:	4013      	ands	r3, r2
 8009c2c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009c30:	f04f 32ff 	mov.w	r2, #4294967295
 8009c34:	d81b      	bhi.n	8009c6e <_strtod_l+0x8c6>
 8009c36:	0d1b      	lsrs	r3, r3, #20
 8009c38:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8009c40:	4299      	cmp	r1, r3
 8009c42:	d119      	bne.n	8009c78 <_strtod_l+0x8d0>
 8009c44:	4b96      	ldr	r3, [pc, #600]	@ (8009ea0 <_strtod_l+0xaf8>)
 8009c46:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d102      	bne.n	8009c52 <_strtod_l+0x8aa>
 8009c4c:	3101      	adds	r1, #1
 8009c4e:	f43f adca 	beq.w	80097e6 <_strtod_l+0x43e>
 8009c52:	4b92      	ldr	r3, [pc, #584]	@ (8009e9c <_strtod_l+0xaf4>)
 8009c54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c56:	401a      	ands	r2, r3
 8009c58:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009c5c:	f04f 0a00 	mov.w	sl, #0
 8009c60:	9b08      	ldr	r3, [sp, #32]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d1b8      	bne.n	8009bd8 <_strtod_l+0x830>
 8009c66:	e5c9      	b.n	80097fc <_strtod_l+0x454>
 8009c68:	f04f 33ff 	mov.w	r3, #4294967295
 8009c6c:	e7e8      	b.n	8009c40 <_strtod_l+0x898>
 8009c6e:	4613      	mov	r3, r2
 8009c70:	e7e6      	b.n	8009c40 <_strtod_l+0x898>
 8009c72:	ea53 030a 	orrs.w	r3, r3, sl
 8009c76:	d0a1      	beq.n	8009bbc <_strtod_l+0x814>
 8009c78:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009c7a:	b1db      	cbz	r3, 8009cb4 <_strtod_l+0x90c>
 8009c7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c7e:	4213      	tst	r3, r2
 8009c80:	d0ee      	beq.n	8009c60 <_strtod_l+0x8b8>
 8009c82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c84:	9a08      	ldr	r2, [sp, #32]
 8009c86:	4650      	mov	r0, sl
 8009c88:	4659      	mov	r1, fp
 8009c8a:	b1bb      	cbz	r3, 8009cbc <_strtod_l+0x914>
 8009c8c:	f7ff fb6e 	bl	800936c <sulp>
 8009c90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c94:	ec53 2b10 	vmov	r2, r3, d0
 8009c98:	f7f6 faf8 	bl	800028c <__adddf3>
 8009c9c:	4682      	mov	sl, r0
 8009c9e:	468b      	mov	fp, r1
 8009ca0:	e7de      	b.n	8009c60 <_strtod_l+0x8b8>
 8009ca2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009ca6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009caa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009cae:	f04f 3aff 	mov.w	sl, #4294967295
 8009cb2:	e7d5      	b.n	8009c60 <_strtod_l+0x8b8>
 8009cb4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009cb6:	ea13 0f0a 	tst.w	r3, sl
 8009cba:	e7e1      	b.n	8009c80 <_strtod_l+0x8d8>
 8009cbc:	f7ff fb56 	bl	800936c <sulp>
 8009cc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009cc4:	ec53 2b10 	vmov	r2, r3, d0
 8009cc8:	f7f6 fade 	bl	8000288 <__aeabi_dsub>
 8009ccc:	2200      	movs	r2, #0
 8009cce:	2300      	movs	r3, #0
 8009cd0:	4682      	mov	sl, r0
 8009cd2:	468b      	mov	fp, r1
 8009cd4:	f7f6 fef8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cd8:	2800      	cmp	r0, #0
 8009cda:	d0c1      	beq.n	8009c60 <_strtod_l+0x8b8>
 8009cdc:	e619      	b.n	8009912 <_strtod_l+0x56a>
 8009cde:	4641      	mov	r1, r8
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	f7ff facd 	bl	8009280 <__ratio>
 8009ce6:	ec57 6b10 	vmov	r6, r7, d0
 8009cea:	2200      	movs	r2, #0
 8009cec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009cf0:	4630      	mov	r0, r6
 8009cf2:	4639      	mov	r1, r7
 8009cf4:	f7f6 fefc 	bl	8000af0 <__aeabi_dcmple>
 8009cf8:	2800      	cmp	r0, #0
 8009cfa:	d06f      	beq.n	8009ddc <_strtod_l+0xa34>
 8009cfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d17a      	bne.n	8009df8 <_strtod_l+0xa50>
 8009d02:	f1ba 0f00 	cmp.w	sl, #0
 8009d06:	d158      	bne.n	8009dba <_strtod_l+0xa12>
 8009d08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d15a      	bne.n	8009dc8 <_strtod_l+0xa20>
 8009d12:	4b64      	ldr	r3, [pc, #400]	@ (8009ea4 <_strtod_l+0xafc>)
 8009d14:	2200      	movs	r2, #0
 8009d16:	4630      	mov	r0, r6
 8009d18:	4639      	mov	r1, r7
 8009d1a:	f7f6 fedf 	bl	8000adc <__aeabi_dcmplt>
 8009d1e:	2800      	cmp	r0, #0
 8009d20:	d159      	bne.n	8009dd6 <_strtod_l+0xa2e>
 8009d22:	4630      	mov	r0, r6
 8009d24:	4639      	mov	r1, r7
 8009d26:	4b60      	ldr	r3, [pc, #384]	@ (8009ea8 <_strtod_l+0xb00>)
 8009d28:	2200      	movs	r2, #0
 8009d2a:	f7f6 fc65 	bl	80005f8 <__aeabi_dmul>
 8009d2e:	4606      	mov	r6, r0
 8009d30:	460f      	mov	r7, r1
 8009d32:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009d36:	9606      	str	r6, [sp, #24]
 8009d38:	9307      	str	r3, [sp, #28]
 8009d3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d3e:	4d57      	ldr	r5, [pc, #348]	@ (8009e9c <_strtod_l+0xaf4>)
 8009d40:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009d44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d46:	401d      	ands	r5, r3
 8009d48:	4b58      	ldr	r3, [pc, #352]	@ (8009eac <_strtod_l+0xb04>)
 8009d4a:	429d      	cmp	r5, r3
 8009d4c:	f040 80b2 	bne.w	8009eb4 <_strtod_l+0xb0c>
 8009d50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d52:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009d56:	ec4b ab10 	vmov	d0, sl, fp
 8009d5a:	f7ff f9c9 	bl	80090f0 <__ulp>
 8009d5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d62:	ec51 0b10 	vmov	r0, r1, d0
 8009d66:	f7f6 fc47 	bl	80005f8 <__aeabi_dmul>
 8009d6a:	4652      	mov	r2, sl
 8009d6c:	465b      	mov	r3, fp
 8009d6e:	f7f6 fa8d 	bl	800028c <__adddf3>
 8009d72:	460b      	mov	r3, r1
 8009d74:	4949      	ldr	r1, [pc, #292]	@ (8009e9c <_strtod_l+0xaf4>)
 8009d76:	4a4e      	ldr	r2, [pc, #312]	@ (8009eb0 <_strtod_l+0xb08>)
 8009d78:	4019      	ands	r1, r3
 8009d7a:	4291      	cmp	r1, r2
 8009d7c:	4682      	mov	sl, r0
 8009d7e:	d942      	bls.n	8009e06 <_strtod_l+0xa5e>
 8009d80:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009d82:	4b47      	ldr	r3, [pc, #284]	@ (8009ea0 <_strtod_l+0xaf8>)
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d103      	bne.n	8009d90 <_strtod_l+0x9e8>
 8009d88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	f43f ad2b 	beq.w	80097e6 <_strtod_l+0x43e>
 8009d90:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009ea0 <_strtod_l+0xaf8>
 8009d94:	f04f 3aff 	mov.w	sl, #4294967295
 8009d98:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009d9a:	9805      	ldr	r0, [sp, #20]
 8009d9c:	f7fe fe74 	bl	8008a88 <_Bfree>
 8009da0:	9805      	ldr	r0, [sp, #20]
 8009da2:	4649      	mov	r1, r9
 8009da4:	f7fe fe70 	bl	8008a88 <_Bfree>
 8009da8:	9805      	ldr	r0, [sp, #20]
 8009daa:	4641      	mov	r1, r8
 8009dac:	f7fe fe6c 	bl	8008a88 <_Bfree>
 8009db0:	9805      	ldr	r0, [sp, #20]
 8009db2:	4621      	mov	r1, r4
 8009db4:	f7fe fe68 	bl	8008a88 <_Bfree>
 8009db8:	e618      	b.n	80099ec <_strtod_l+0x644>
 8009dba:	f1ba 0f01 	cmp.w	sl, #1
 8009dbe:	d103      	bne.n	8009dc8 <_strtod_l+0xa20>
 8009dc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	f43f ada5 	beq.w	8009912 <_strtod_l+0x56a>
 8009dc8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009e78 <_strtod_l+0xad0>
 8009dcc:	4f35      	ldr	r7, [pc, #212]	@ (8009ea4 <_strtod_l+0xafc>)
 8009dce:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009dd2:	2600      	movs	r6, #0
 8009dd4:	e7b1      	b.n	8009d3a <_strtod_l+0x992>
 8009dd6:	4f34      	ldr	r7, [pc, #208]	@ (8009ea8 <_strtod_l+0xb00>)
 8009dd8:	2600      	movs	r6, #0
 8009dda:	e7aa      	b.n	8009d32 <_strtod_l+0x98a>
 8009ddc:	4b32      	ldr	r3, [pc, #200]	@ (8009ea8 <_strtod_l+0xb00>)
 8009dde:	4630      	mov	r0, r6
 8009de0:	4639      	mov	r1, r7
 8009de2:	2200      	movs	r2, #0
 8009de4:	f7f6 fc08 	bl	80005f8 <__aeabi_dmul>
 8009de8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009dea:	4606      	mov	r6, r0
 8009dec:	460f      	mov	r7, r1
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d09f      	beq.n	8009d32 <_strtod_l+0x98a>
 8009df2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009df6:	e7a0      	b.n	8009d3a <_strtod_l+0x992>
 8009df8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009e80 <_strtod_l+0xad8>
 8009dfc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009e00:	ec57 6b17 	vmov	r6, r7, d7
 8009e04:	e799      	b.n	8009d3a <_strtod_l+0x992>
 8009e06:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009e0a:	9b08      	ldr	r3, [sp, #32]
 8009e0c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d1c1      	bne.n	8009d98 <_strtod_l+0x9f0>
 8009e14:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009e18:	0d1b      	lsrs	r3, r3, #20
 8009e1a:	051b      	lsls	r3, r3, #20
 8009e1c:	429d      	cmp	r5, r3
 8009e1e:	d1bb      	bne.n	8009d98 <_strtod_l+0x9f0>
 8009e20:	4630      	mov	r0, r6
 8009e22:	4639      	mov	r1, r7
 8009e24:	f7f6 ff48 	bl	8000cb8 <__aeabi_d2lz>
 8009e28:	f7f6 fbb8 	bl	800059c <__aeabi_l2d>
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	460b      	mov	r3, r1
 8009e30:	4630      	mov	r0, r6
 8009e32:	4639      	mov	r1, r7
 8009e34:	f7f6 fa28 	bl	8000288 <__aeabi_dsub>
 8009e38:	460b      	mov	r3, r1
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009e40:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009e44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e46:	ea46 060a 	orr.w	r6, r6, sl
 8009e4a:	431e      	orrs	r6, r3
 8009e4c:	d06f      	beq.n	8009f2e <_strtod_l+0xb86>
 8009e4e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009e88 <_strtod_l+0xae0>)
 8009e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e54:	f7f6 fe42 	bl	8000adc <__aeabi_dcmplt>
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	f47f accf 	bne.w	80097fc <_strtod_l+0x454>
 8009e5e:	a30c      	add	r3, pc, #48	@ (adr r3, 8009e90 <_strtod_l+0xae8>)
 8009e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e68:	f7f6 fe56 	bl	8000b18 <__aeabi_dcmpgt>
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	d093      	beq.n	8009d98 <_strtod_l+0x9f0>
 8009e70:	e4c4      	b.n	80097fc <_strtod_l+0x454>
 8009e72:	bf00      	nop
 8009e74:	f3af 8000 	nop.w
 8009e78:	00000000 	.word	0x00000000
 8009e7c:	bff00000 	.word	0xbff00000
 8009e80:	00000000 	.word	0x00000000
 8009e84:	3ff00000 	.word	0x3ff00000
 8009e88:	94a03595 	.word	0x94a03595
 8009e8c:	3fdfffff 	.word	0x3fdfffff
 8009e90:	35afe535 	.word	0x35afe535
 8009e94:	3fe00000 	.word	0x3fe00000
 8009e98:	000fffff 	.word	0x000fffff
 8009e9c:	7ff00000 	.word	0x7ff00000
 8009ea0:	7fefffff 	.word	0x7fefffff
 8009ea4:	3ff00000 	.word	0x3ff00000
 8009ea8:	3fe00000 	.word	0x3fe00000
 8009eac:	7fe00000 	.word	0x7fe00000
 8009eb0:	7c9fffff 	.word	0x7c9fffff
 8009eb4:	9b08      	ldr	r3, [sp, #32]
 8009eb6:	b323      	cbz	r3, 8009f02 <_strtod_l+0xb5a>
 8009eb8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009ebc:	d821      	bhi.n	8009f02 <_strtod_l+0xb5a>
 8009ebe:	a328      	add	r3, pc, #160	@ (adr r3, 8009f60 <_strtod_l+0xbb8>)
 8009ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec4:	4630      	mov	r0, r6
 8009ec6:	4639      	mov	r1, r7
 8009ec8:	f7f6 fe12 	bl	8000af0 <__aeabi_dcmple>
 8009ecc:	b1a0      	cbz	r0, 8009ef8 <_strtod_l+0xb50>
 8009ece:	4639      	mov	r1, r7
 8009ed0:	4630      	mov	r0, r6
 8009ed2:	f7f6 fe69 	bl	8000ba8 <__aeabi_d2uiz>
 8009ed6:	2801      	cmp	r0, #1
 8009ed8:	bf38      	it	cc
 8009eda:	2001      	movcc	r0, #1
 8009edc:	f7f6 fb12 	bl	8000504 <__aeabi_ui2d>
 8009ee0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ee2:	4606      	mov	r6, r0
 8009ee4:	460f      	mov	r7, r1
 8009ee6:	b9fb      	cbnz	r3, 8009f28 <_strtod_l+0xb80>
 8009ee8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009eec:	9014      	str	r0, [sp, #80]	@ 0x50
 8009eee:	9315      	str	r3, [sp, #84]	@ 0x54
 8009ef0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009ef4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009ef8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009efa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009efe:	1b5b      	subs	r3, r3, r5
 8009f00:	9311      	str	r3, [sp, #68]	@ 0x44
 8009f02:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009f06:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009f0a:	f7ff f8f1 	bl	80090f0 <__ulp>
 8009f0e:	4650      	mov	r0, sl
 8009f10:	ec53 2b10 	vmov	r2, r3, d0
 8009f14:	4659      	mov	r1, fp
 8009f16:	f7f6 fb6f 	bl	80005f8 <__aeabi_dmul>
 8009f1a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009f1e:	f7f6 f9b5 	bl	800028c <__adddf3>
 8009f22:	4682      	mov	sl, r0
 8009f24:	468b      	mov	fp, r1
 8009f26:	e770      	b.n	8009e0a <_strtod_l+0xa62>
 8009f28:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009f2c:	e7e0      	b.n	8009ef0 <_strtod_l+0xb48>
 8009f2e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009f68 <_strtod_l+0xbc0>)
 8009f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f34:	f7f6 fdd2 	bl	8000adc <__aeabi_dcmplt>
 8009f38:	e798      	b.n	8009e6c <_strtod_l+0xac4>
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f3e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009f40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f42:	6013      	str	r3, [r2, #0]
 8009f44:	f7ff ba6d 	b.w	8009422 <_strtod_l+0x7a>
 8009f48:	2a65      	cmp	r2, #101	@ 0x65
 8009f4a:	f43f ab66 	beq.w	800961a <_strtod_l+0x272>
 8009f4e:	2a45      	cmp	r2, #69	@ 0x45
 8009f50:	f43f ab63 	beq.w	800961a <_strtod_l+0x272>
 8009f54:	2301      	movs	r3, #1
 8009f56:	f7ff bb9e 	b.w	8009696 <_strtod_l+0x2ee>
 8009f5a:	bf00      	nop
 8009f5c:	f3af 8000 	nop.w
 8009f60:	ffc00000 	.word	0xffc00000
 8009f64:	41dfffff 	.word	0x41dfffff
 8009f68:	94a03595 	.word	0x94a03595
 8009f6c:	3fcfffff 	.word	0x3fcfffff

08009f70 <_strtod_r>:
 8009f70:	4b01      	ldr	r3, [pc, #4]	@ (8009f78 <_strtod_r+0x8>)
 8009f72:	f7ff ba19 	b.w	80093a8 <_strtod_l>
 8009f76:	bf00      	nop
 8009f78:	2000008c 	.word	0x2000008c

08009f7c <_strtol_l.constprop.0>:
 8009f7c:	2b24      	cmp	r3, #36	@ 0x24
 8009f7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f82:	4686      	mov	lr, r0
 8009f84:	4690      	mov	r8, r2
 8009f86:	d801      	bhi.n	8009f8c <_strtol_l.constprop.0+0x10>
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d106      	bne.n	8009f9a <_strtol_l.constprop.0+0x1e>
 8009f8c:	f7fd fdbc 	bl	8007b08 <__errno>
 8009f90:	2316      	movs	r3, #22
 8009f92:	6003      	str	r3, [r0, #0]
 8009f94:	2000      	movs	r0, #0
 8009f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f9a:	4834      	ldr	r0, [pc, #208]	@ (800a06c <_strtol_l.constprop.0+0xf0>)
 8009f9c:	460d      	mov	r5, r1
 8009f9e:	462a      	mov	r2, r5
 8009fa0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009fa4:	5d06      	ldrb	r6, [r0, r4]
 8009fa6:	f016 0608 	ands.w	r6, r6, #8
 8009faa:	d1f8      	bne.n	8009f9e <_strtol_l.constprop.0+0x22>
 8009fac:	2c2d      	cmp	r4, #45	@ 0x2d
 8009fae:	d12d      	bne.n	800a00c <_strtol_l.constprop.0+0x90>
 8009fb0:	782c      	ldrb	r4, [r5, #0]
 8009fb2:	2601      	movs	r6, #1
 8009fb4:	1c95      	adds	r5, r2, #2
 8009fb6:	f033 0210 	bics.w	r2, r3, #16
 8009fba:	d109      	bne.n	8009fd0 <_strtol_l.constprop.0+0x54>
 8009fbc:	2c30      	cmp	r4, #48	@ 0x30
 8009fbe:	d12a      	bne.n	800a016 <_strtol_l.constprop.0+0x9a>
 8009fc0:	782a      	ldrb	r2, [r5, #0]
 8009fc2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009fc6:	2a58      	cmp	r2, #88	@ 0x58
 8009fc8:	d125      	bne.n	800a016 <_strtol_l.constprop.0+0x9a>
 8009fca:	786c      	ldrb	r4, [r5, #1]
 8009fcc:	2310      	movs	r3, #16
 8009fce:	3502      	adds	r5, #2
 8009fd0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009fd4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009fd8:	2200      	movs	r2, #0
 8009fda:	fbbc f9f3 	udiv	r9, ip, r3
 8009fde:	4610      	mov	r0, r2
 8009fe0:	fb03 ca19 	mls	sl, r3, r9, ip
 8009fe4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009fe8:	2f09      	cmp	r7, #9
 8009fea:	d81b      	bhi.n	800a024 <_strtol_l.constprop.0+0xa8>
 8009fec:	463c      	mov	r4, r7
 8009fee:	42a3      	cmp	r3, r4
 8009ff0:	dd27      	ble.n	800a042 <_strtol_l.constprop.0+0xc6>
 8009ff2:	1c57      	adds	r7, r2, #1
 8009ff4:	d007      	beq.n	800a006 <_strtol_l.constprop.0+0x8a>
 8009ff6:	4581      	cmp	r9, r0
 8009ff8:	d320      	bcc.n	800a03c <_strtol_l.constprop.0+0xc0>
 8009ffa:	d101      	bne.n	800a000 <_strtol_l.constprop.0+0x84>
 8009ffc:	45a2      	cmp	sl, r4
 8009ffe:	db1d      	blt.n	800a03c <_strtol_l.constprop.0+0xc0>
 800a000:	fb00 4003 	mla	r0, r0, r3, r4
 800a004:	2201      	movs	r2, #1
 800a006:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a00a:	e7eb      	b.n	8009fe4 <_strtol_l.constprop.0+0x68>
 800a00c:	2c2b      	cmp	r4, #43	@ 0x2b
 800a00e:	bf04      	itt	eq
 800a010:	782c      	ldrbeq	r4, [r5, #0]
 800a012:	1c95      	addeq	r5, r2, #2
 800a014:	e7cf      	b.n	8009fb6 <_strtol_l.constprop.0+0x3a>
 800a016:	2b00      	cmp	r3, #0
 800a018:	d1da      	bne.n	8009fd0 <_strtol_l.constprop.0+0x54>
 800a01a:	2c30      	cmp	r4, #48	@ 0x30
 800a01c:	bf0c      	ite	eq
 800a01e:	2308      	moveq	r3, #8
 800a020:	230a      	movne	r3, #10
 800a022:	e7d5      	b.n	8009fd0 <_strtol_l.constprop.0+0x54>
 800a024:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a028:	2f19      	cmp	r7, #25
 800a02a:	d801      	bhi.n	800a030 <_strtol_l.constprop.0+0xb4>
 800a02c:	3c37      	subs	r4, #55	@ 0x37
 800a02e:	e7de      	b.n	8009fee <_strtol_l.constprop.0+0x72>
 800a030:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a034:	2f19      	cmp	r7, #25
 800a036:	d804      	bhi.n	800a042 <_strtol_l.constprop.0+0xc6>
 800a038:	3c57      	subs	r4, #87	@ 0x57
 800a03a:	e7d8      	b.n	8009fee <_strtol_l.constprop.0+0x72>
 800a03c:	f04f 32ff 	mov.w	r2, #4294967295
 800a040:	e7e1      	b.n	800a006 <_strtol_l.constprop.0+0x8a>
 800a042:	1c53      	adds	r3, r2, #1
 800a044:	d108      	bne.n	800a058 <_strtol_l.constprop.0+0xdc>
 800a046:	2322      	movs	r3, #34	@ 0x22
 800a048:	f8ce 3000 	str.w	r3, [lr]
 800a04c:	4660      	mov	r0, ip
 800a04e:	f1b8 0f00 	cmp.w	r8, #0
 800a052:	d0a0      	beq.n	8009f96 <_strtol_l.constprop.0+0x1a>
 800a054:	1e69      	subs	r1, r5, #1
 800a056:	e006      	b.n	800a066 <_strtol_l.constprop.0+0xea>
 800a058:	b106      	cbz	r6, 800a05c <_strtol_l.constprop.0+0xe0>
 800a05a:	4240      	negs	r0, r0
 800a05c:	f1b8 0f00 	cmp.w	r8, #0
 800a060:	d099      	beq.n	8009f96 <_strtol_l.constprop.0+0x1a>
 800a062:	2a00      	cmp	r2, #0
 800a064:	d1f6      	bne.n	800a054 <_strtol_l.constprop.0+0xd8>
 800a066:	f8c8 1000 	str.w	r1, [r8]
 800a06a:	e794      	b.n	8009f96 <_strtol_l.constprop.0+0x1a>
 800a06c:	0800cb99 	.word	0x0800cb99

0800a070 <_strtol_r>:
 800a070:	f7ff bf84 	b.w	8009f7c <_strtol_l.constprop.0>

0800a074 <__ssputs_r>:
 800a074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a078:	688e      	ldr	r6, [r1, #8]
 800a07a:	461f      	mov	r7, r3
 800a07c:	42be      	cmp	r6, r7
 800a07e:	680b      	ldr	r3, [r1, #0]
 800a080:	4682      	mov	sl, r0
 800a082:	460c      	mov	r4, r1
 800a084:	4690      	mov	r8, r2
 800a086:	d82d      	bhi.n	800a0e4 <__ssputs_r+0x70>
 800a088:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a08c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a090:	d026      	beq.n	800a0e0 <__ssputs_r+0x6c>
 800a092:	6965      	ldr	r5, [r4, #20]
 800a094:	6909      	ldr	r1, [r1, #16]
 800a096:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a09a:	eba3 0901 	sub.w	r9, r3, r1
 800a09e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a0a2:	1c7b      	adds	r3, r7, #1
 800a0a4:	444b      	add	r3, r9
 800a0a6:	106d      	asrs	r5, r5, #1
 800a0a8:	429d      	cmp	r5, r3
 800a0aa:	bf38      	it	cc
 800a0ac:	461d      	movcc	r5, r3
 800a0ae:	0553      	lsls	r3, r2, #21
 800a0b0:	d527      	bpl.n	800a102 <__ssputs_r+0x8e>
 800a0b2:	4629      	mov	r1, r5
 800a0b4:	f7fe fc1c 	bl	80088f0 <_malloc_r>
 800a0b8:	4606      	mov	r6, r0
 800a0ba:	b360      	cbz	r0, 800a116 <__ssputs_r+0xa2>
 800a0bc:	6921      	ldr	r1, [r4, #16]
 800a0be:	464a      	mov	r2, r9
 800a0c0:	f000 fa18 	bl	800a4f4 <memcpy>
 800a0c4:	89a3      	ldrh	r3, [r4, #12]
 800a0c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a0ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0ce:	81a3      	strh	r3, [r4, #12]
 800a0d0:	6126      	str	r6, [r4, #16]
 800a0d2:	6165      	str	r5, [r4, #20]
 800a0d4:	444e      	add	r6, r9
 800a0d6:	eba5 0509 	sub.w	r5, r5, r9
 800a0da:	6026      	str	r6, [r4, #0]
 800a0dc:	60a5      	str	r5, [r4, #8]
 800a0de:	463e      	mov	r6, r7
 800a0e0:	42be      	cmp	r6, r7
 800a0e2:	d900      	bls.n	800a0e6 <__ssputs_r+0x72>
 800a0e4:	463e      	mov	r6, r7
 800a0e6:	6820      	ldr	r0, [r4, #0]
 800a0e8:	4632      	mov	r2, r6
 800a0ea:	4641      	mov	r1, r8
 800a0ec:	f000 f9c6 	bl	800a47c <memmove>
 800a0f0:	68a3      	ldr	r3, [r4, #8]
 800a0f2:	1b9b      	subs	r3, r3, r6
 800a0f4:	60a3      	str	r3, [r4, #8]
 800a0f6:	6823      	ldr	r3, [r4, #0]
 800a0f8:	4433      	add	r3, r6
 800a0fa:	6023      	str	r3, [r4, #0]
 800a0fc:	2000      	movs	r0, #0
 800a0fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a102:	462a      	mov	r2, r5
 800a104:	f000 fd89 	bl	800ac1a <_realloc_r>
 800a108:	4606      	mov	r6, r0
 800a10a:	2800      	cmp	r0, #0
 800a10c:	d1e0      	bne.n	800a0d0 <__ssputs_r+0x5c>
 800a10e:	6921      	ldr	r1, [r4, #16]
 800a110:	4650      	mov	r0, sl
 800a112:	f7fe fb79 	bl	8008808 <_free_r>
 800a116:	230c      	movs	r3, #12
 800a118:	f8ca 3000 	str.w	r3, [sl]
 800a11c:	89a3      	ldrh	r3, [r4, #12]
 800a11e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a122:	81a3      	strh	r3, [r4, #12]
 800a124:	f04f 30ff 	mov.w	r0, #4294967295
 800a128:	e7e9      	b.n	800a0fe <__ssputs_r+0x8a>
	...

0800a12c <_svfiprintf_r>:
 800a12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a130:	4698      	mov	r8, r3
 800a132:	898b      	ldrh	r3, [r1, #12]
 800a134:	061b      	lsls	r3, r3, #24
 800a136:	b09d      	sub	sp, #116	@ 0x74
 800a138:	4607      	mov	r7, r0
 800a13a:	460d      	mov	r5, r1
 800a13c:	4614      	mov	r4, r2
 800a13e:	d510      	bpl.n	800a162 <_svfiprintf_r+0x36>
 800a140:	690b      	ldr	r3, [r1, #16]
 800a142:	b973      	cbnz	r3, 800a162 <_svfiprintf_r+0x36>
 800a144:	2140      	movs	r1, #64	@ 0x40
 800a146:	f7fe fbd3 	bl	80088f0 <_malloc_r>
 800a14a:	6028      	str	r0, [r5, #0]
 800a14c:	6128      	str	r0, [r5, #16]
 800a14e:	b930      	cbnz	r0, 800a15e <_svfiprintf_r+0x32>
 800a150:	230c      	movs	r3, #12
 800a152:	603b      	str	r3, [r7, #0]
 800a154:	f04f 30ff 	mov.w	r0, #4294967295
 800a158:	b01d      	add	sp, #116	@ 0x74
 800a15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a15e:	2340      	movs	r3, #64	@ 0x40
 800a160:	616b      	str	r3, [r5, #20]
 800a162:	2300      	movs	r3, #0
 800a164:	9309      	str	r3, [sp, #36]	@ 0x24
 800a166:	2320      	movs	r3, #32
 800a168:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a16c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a170:	2330      	movs	r3, #48	@ 0x30
 800a172:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a310 <_svfiprintf_r+0x1e4>
 800a176:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a17a:	f04f 0901 	mov.w	r9, #1
 800a17e:	4623      	mov	r3, r4
 800a180:	469a      	mov	sl, r3
 800a182:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a186:	b10a      	cbz	r2, 800a18c <_svfiprintf_r+0x60>
 800a188:	2a25      	cmp	r2, #37	@ 0x25
 800a18a:	d1f9      	bne.n	800a180 <_svfiprintf_r+0x54>
 800a18c:	ebba 0b04 	subs.w	fp, sl, r4
 800a190:	d00b      	beq.n	800a1aa <_svfiprintf_r+0x7e>
 800a192:	465b      	mov	r3, fp
 800a194:	4622      	mov	r2, r4
 800a196:	4629      	mov	r1, r5
 800a198:	4638      	mov	r0, r7
 800a19a:	f7ff ff6b 	bl	800a074 <__ssputs_r>
 800a19e:	3001      	adds	r0, #1
 800a1a0:	f000 80a7 	beq.w	800a2f2 <_svfiprintf_r+0x1c6>
 800a1a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a1a6:	445a      	add	r2, fp
 800a1a8:	9209      	str	r2, [sp, #36]	@ 0x24
 800a1aa:	f89a 3000 	ldrb.w	r3, [sl]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	f000 809f 	beq.w	800a2f2 <_svfiprintf_r+0x1c6>
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1be:	f10a 0a01 	add.w	sl, sl, #1
 800a1c2:	9304      	str	r3, [sp, #16]
 800a1c4:	9307      	str	r3, [sp, #28]
 800a1c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a1ca:	931a      	str	r3, [sp, #104]	@ 0x68
 800a1cc:	4654      	mov	r4, sl
 800a1ce:	2205      	movs	r2, #5
 800a1d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1d4:	484e      	ldr	r0, [pc, #312]	@ (800a310 <_svfiprintf_r+0x1e4>)
 800a1d6:	f7f5 fffb 	bl	80001d0 <memchr>
 800a1da:	9a04      	ldr	r2, [sp, #16]
 800a1dc:	b9d8      	cbnz	r0, 800a216 <_svfiprintf_r+0xea>
 800a1de:	06d0      	lsls	r0, r2, #27
 800a1e0:	bf44      	itt	mi
 800a1e2:	2320      	movmi	r3, #32
 800a1e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a1e8:	0711      	lsls	r1, r2, #28
 800a1ea:	bf44      	itt	mi
 800a1ec:	232b      	movmi	r3, #43	@ 0x2b
 800a1ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a1f2:	f89a 3000 	ldrb.w	r3, [sl]
 800a1f6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a1f8:	d015      	beq.n	800a226 <_svfiprintf_r+0xfa>
 800a1fa:	9a07      	ldr	r2, [sp, #28]
 800a1fc:	4654      	mov	r4, sl
 800a1fe:	2000      	movs	r0, #0
 800a200:	f04f 0c0a 	mov.w	ip, #10
 800a204:	4621      	mov	r1, r4
 800a206:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a20a:	3b30      	subs	r3, #48	@ 0x30
 800a20c:	2b09      	cmp	r3, #9
 800a20e:	d94b      	bls.n	800a2a8 <_svfiprintf_r+0x17c>
 800a210:	b1b0      	cbz	r0, 800a240 <_svfiprintf_r+0x114>
 800a212:	9207      	str	r2, [sp, #28]
 800a214:	e014      	b.n	800a240 <_svfiprintf_r+0x114>
 800a216:	eba0 0308 	sub.w	r3, r0, r8
 800a21a:	fa09 f303 	lsl.w	r3, r9, r3
 800a21e:	4313      	orrs	r3, r2
 800a220:	9304      	str	r3, [sp, #16]
 800a222:	46a2      	mov	sl, r4
 800a224:	e7d2      	b.n	800a1cc <_svfiprintf_r+0xa0>
 800a226:	9b03      	ldr	r3, [sp, #12]
 800a228:	1d19      	adds	r1, r3, #4
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	9103      	str	r1, [sp, #12]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	bfbb      	ittet	lt
 800a232:	425b      	neglt	r3, r3
 800a234:	f042 0202 	orrlt.w	r2, r2, #2
 800a238:	9307      	strge	r3, [sp, #28]
 800a23a:	9307      	strlt	r3, [sp, #28]
 800a23c:	bfb8      	it	lt
 800a23e:	9204      	strlt	r2, [sp, #16]
 800a240:	7823      	ldrb	r3, [r4, #0]
 800a242:	2b2e      	cmp	r3, #46	@ 0x2e
 800a244:	d10a      	bne.n	800a25c <_svfiprintf_r+0x130>
 800a246:	7863      	ldrb	r3, [r4, #1]
 800a248:	2b2a      	cmp	r3, #42	@ 0x2a
 800a24a:	d132      	bne.n	800a2b2 <_svfiprintf_r+0x186>
 800a24c:	9b03      	ldr	r3, [sp, #12]
 800a24e:	1d1a      	adds	r2, r3, #4
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	9203      	str	r2, [sp, #12]
 800a254:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a258:	3402      	adds	r4, #2
 800a25a:	9305      	str	r3, [sp, #20]
 800a25c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a320 <_svfiprintf_r+0x1f4>
 800a260:	7821      	ldrb	r1, [r4, #0]
 800a262:	2203      	movs	r2, #3
 800a264:	4650      	mov	r0, sl
 800a266:	f7f5 ffb3 	bl	80001d0 <memchr>
 800a26a:	b138      	cbz	r0, 800a27c <_svfiprintf_r+0x150>
 800a26c:	9b04      	ldr	r3, [sp, #16]
 800a26e:	eba0 000a 	sub.w	r0, r0, sl
 800a272:	2240      	movs	r2, #64	@ 0x40
 800a274:	4082      	lsls	r2, r0
 800a276:	4313      	orrs	r3, r2
 800a278:	3401      	adds	r4, #1
 800a27a:	9304      	str	r3, [sp, #16]
 800a27c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a280:	4824      	ldr	r0, [pc, #144]	@ (800a314 <_svfiprintf_r+0x1e8>)
 800a282:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a286:	2206      	movs	r2, #6
 800a288:	f7f5 ffa2 	bl	80001d0 <memchr>
 800a28c:	2800      	cmp	r0, #0
 800a28e:	d036      	beq.n	800a2fe <_svfiprintf_r+0x1d2>
 800a290:	4b21      	ldr	r3, [pc, #132]	@ (800a318 <_svfiprintf_r+0x1ec>)
 800a292:	bb1b      	cbnz	r3, 800a2dc <_svfiprintf_r+0x1b0>
 800a294:	9b03      	ldr	r3, [sp, #12]
 800a296:	3307      	adds	r3, #7
 800a298:	f023 0307 	bic.w	r3, r3, #7
 800a29c:	3308      	adds	r3, #8
 800a29e:	9303      	str	r3, [sp, #12]
 800a2a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2a2:	4433      	add	r3, r6
 800a2a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2a6:	e76a      	b.n	800a17e <_svfiprintf_r+0x52>
 800a2a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2ac:	460c      	mov	r4, r1
 800a2ae:	2001      	movs	r0, #1
 800a2b0:	e7a8      	b.n	800a204 <_svfiprintf_r+0xd8>
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	3401      	adds	r4, #1
 800a2b6:	9305      	str	r3, [sp, #20]
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	f04f 0c0a 	mov.w	ip, #10
 800a2be:	4620      	mov	r0, r4
 800a2c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2c4:	3a30      	subs	r2, #48	@ 0x30
 800a2c6:	2a09      	cmp	r2, #9
 800a2c8:	d903      	bls.n	800a2d2 <_svfiprintf_r+0x1a6>
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d0c6      	beq.n	800a25c <_svfiprintf_r+0x130>
 800a2ce:	9105      	str	r1, [sp, #20]
 800a2d0:	e7c4      	b.n	800a25c <_svfiprintf_r+0x130>
 800a2d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2d6:	4604      	mov	r4, r0
 800a2d8:	2301      	movs	r3, #1
 800a2da:	e7f0      	b.n	800a2be <_svfiprintf_r+0x192>
 800a2dc:	ab03      	add	r3, sp, #12
 800a2de:	9300      	str	r3, [sp, #0]
 800a2e0:	462a      	mov	r2, r5
 800a2e2:	4b0e      	ldr	r3, [pc, #56]	@ (800a31c <_svfiprintf_r+0x1f0>)
 800a2e4:	a904      	add	r1, sp, #16
 800a2e6:	4638      	mov	r0, r7
 800a2e8:	f7fc fcca 	bl	8006c80 <_printf_float>
 800a2ec:	1c42      	adds	r2, r0, #1
 800a2ee:	4606      	mov	r6, r0
 800a2f0:	d1d6      	bne.n	800a2a0 <_svfiprintf_r+0x174>
 800a2f2:	89ab      	ldrh	r3, [r5, #12]
 800a2f4:	065b      	lsls	r3, r3, #25
 800a2f6:	f53f af2d 	bmi.w	800a154 <_svfiprintf_r+0x28>
 800a2fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a2fc:	e72c      	b.n	800a158 <_svfiprintf_r+0x2c>
 800a2fe:	ab03      	add	r3, sp, #12
 800a300:	9300      	str	r3, [sp, #0]
 800a302:	462a      	mov	r2, r5
 800a304:	4b05      	ldr	r3, [pc, #20]	@ (800a31c <_svfiprintf_r+0x1f0>)
 800a306:	a904      	add	r1, sp, #16
 800a308:	4638      	mov	r0, r7
 800a30a:	f7fc ff51 	bl	80071b0 <_printf_i>
 800a30e:	e7ed      	b.n	800a2ec <_svfiprintf_r+0x1c0>
 800a310:	0800cc99 	.word	0x0800cc99
 800a314:	0800cca3 	.word	0x0800cca3
 800a318:	08006c81 	.word	0x08006c81
 800a31c:	0800a075 	.word	0x0800a075
 800a320:	0800cc9f 	.word	0x0800cc9f

0800a324 <__sflush_r>:
 800a324:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a32c:	0716      	lsls	r6, r2, #28
 800a32e:	4605      	mov	r5, r0
 800a330:	460c      	mov	r4, r1
 800a332:	d454      	bmi.n	800a3de <__sflush_r+0xba>
 800a334:	684b      	ldr	r3, [r1, #4]
 800a336:	2b00      	cmp	r3, #0
 800a338:	dc02      	bgt.n	800a340 <__sflush_r+0x1c>
 800a33a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	dd48      	ble.n	800a3d2 <__sflush_r+0xae>
 800a340:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a342:	2e00      	cmp	r6, #0
 800a344:	d045      	beq.n	800a3d2 <__sflush_r+0xae>
 800a346:	2300      	movs	r3, #0
 800a348:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a34c:	682f      	ldr	r7, [r5, #0]
 800a34e:	6a21      	ldr	r1, [r4, #32]
 800a350:	602b      	str	r3, [r5, #0]
 800a352:	d030      	beq.n	800a3b6 <__sflush_r+0x92>
 800a354:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a356:	89a3      	ldrh	r3, [r4, #12]
 800a358:	0759      	lsls	r1, r3, #29
 800a35a:	d505      	bpl.n	800a368 <__sflush_r+0x44>
 800a35c:	6863      	ldr	r3, [r4, #4]
 800a35e:	1ad2      	subs	r2, r2, r3
 800a360:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a362:	b10b      	cbz	r3, 800a368 <__sflush_r+0x44>
 800a364:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a366:	1ad2      	subs	r2, r2, r3
 800a368:	2300      	movs	r3, #0
 800a36a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a36c:	6a21      	ldr	r1, [r4, #32]
 800a36e:	4628      	mov	r0, r5
 800a370:	47b0      	blx	r6
 800a372:	1c43      	adds	r3, r0, #1
 800a374:	89a3      	ldrh	r3, [r4, #12]
 800a376:	d106      	bne.n	800a386 <__sflush_r+0x62>
 800a378:	6829      	ldr	r1, [r5, #0]
 800a37a:	291d      	cmp	r1, #29
 800a37c:	d82b      	bhi.n	800a3d6 <__sflush_r+0xb2>
 800a37e:	4a2a      	ldr	r2, [pc, #168]	@ (800a428 <__sflush_r+0x104>)
 800a380:	410a      	asrs	r2, r1
 800a382:	07d6      	lsls	r6, r2, #31
 800a384:	d427      	bmi.n	800a3d6 <__sflush_r+0xb2>
 800a386:	2200      	movs	r2, #0
 800a388:	6062      	str	r2, [r4, #4]
 800a38a:	04d9      	lsls	r1, r3, #19
 800a38c:	6922      	ldr	r2, [r4, #16]
 800a38e:	6022      	str	r2, [r4, #0]
 800a390:	d504      	bpl.n	800a39c <__sflush_r+0x78>
 800a392:	1c42      	adds	r2, r0, #1
 800a394:	d101      	bne.n	800a39a <__sflush_r+0x76>
 800a396:	682b      	ldr	r3, [r5, #0]
 800a398:	b903      	cbnz	r3, 800a39c <__sflush_r+0x78>
 800a39a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a39c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a39e:	602f      	str	r7, [r5, #0]
 800a3a0:	b1b9      	cbz	r1, 800a3d2 <__sflush_r+0xae>
 800a3a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a3a6:	4299      	cmp	r1, r3
 800a3a8:	d002      	beq.n	800a3b0 <__sflush_r+0x8c>
 800a3aa:	4628      	mov	r0, r5
 800a3ac:	f7fe fa2c 	bl	8008808 <_free_r>
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	6363      	str	r3, [r4, #52]	@ 0x34
 800a3b4:	e00d      	b.n	800a3d2 <__sflush_r+0xae>
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	4628      	mov	r0, r5
 800a3ba:	47b0      	blx	r6
 800a3bc:	4602      	mov	r2, r0
 800a3be:	1c50      	adds	r0, r2, #1
 800a3c0:	d1c9      	bne.n	800a356 <__sflush_r+0x32>
 800a3c2:	682b      	ldr	r3, [r5, #0]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d0c6      	beq.n	800a356 <__sflush_r+0x32>
 800a3c8:	2b1d      	cmp	r3, #29
 800a3ca:	d001      	beq.n	800a3d0 <__sflush_r+0xac>
 800a3cc:	2b16      	cmp	r3, #22
 800a3ce:	d11e      	bne.n	800a40e <__sflush_r+0xea>
 800a3d0:	602f      	str	r7, [r5, #0]
 800a3d2:	2000      	movs	r0, #0
 800a3d4:	e022      	b.n	800a41c <__sflush_r+0xf8>
 800a3d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3da:	b21b      	sxth	r3, r3
 800a3dc:	e01b      	b.n	800a416 <__sflush_r+0xf2>
 800a3de:	690f      	ldr	r7, [r1, #16]
 800a3e0:	2f00      	cmp	r7, #0
 800a3e2:	d0f6      	beq.n	800a3d2 <__sflush_r+0xae>
 800a3e4:	0793      	lsls	r3, r2, #30
 800a3e6:	680e      	ldr	r6, [r1, #0]
 800a3e8:	bf08      	it	eq
 800a3ea:	694b      	ldreq	r3, [r1, #20]
 800a3ec:	600f      	str	r7, [r1, #0]
 800a3ee:	bf18      	it	ne
 800a3f0:	2300      	movne	r3, #0
 800a3f2:	eba6 0807 	sub.w	r8, r6, r7
 800a3f6:	608b      	str	r3, [r1, #8]
 800a3f8:	f1b8 0f00 	cmp.w	r8, #0
 800a3fc:	dde9      	ble.n	800a3d2 <__sflush_r+0xae>
 800a3fe:	6a21      	ldr	r1, [r4, #32]
 800a400:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a402:	4643      	mov	r3, r8
 800a404:	463a      	mov	r2, r7
 800a406:	4628      	mov	r0, r5
 800a408:	47b0      	blx	r6
 800a40a:	2800      	cmp	r0, #0
 800a40c:	dc08      	bgt.n	800a420 <__sflush_r+0xfc>
 800a40e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a412:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a416:	81a3      	strh	r3, [r4, #12]
 800a418:	f04f 30ff 	mov.w	r0, #4294967295
 800a41c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a420:	4407      	add	r7, r0
 800a422:	eba8 0800 	sub.w	r8, r8, r0
 800a426:	e7e7      	b.n	800a3f8 <__sflush_r+0xd4>
 800a428:	dfbffffe 	.word	0xdfbffffe

0800a42c <_fflush_r>:
 800a42c:	b538      	push	{r3, r4, r5, lr}
 800a42e:	690b      	ldr	r3, [r1, #16]
 800a430:	4605      	mov	r5, r0
 800a432:	460c      	mov	r4, r1
 800a434:	b913      	cbnz	r3, 800a43c <_fflush_r+0x10>
 800a436:	2500      	movs	r5, #0
 800a438:	4628      	mov	r0, r5
 800a43a:	bd38      	pop	{r3, r4, r5, pc}
 800a43c:	b118      	cbz	r0, 800a446 <_fflush_r+0x1a>
 800a43e:	6a03      	ldr	r3, [r0, #32]
 800a440:	b90b      	cbnz	r3, 800a446 <_fflush_r+0x1a>
 800a442:	f7fd fa75 	bl	8007930 <__sinit>
 800a446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d0f3      	beq.n	800a436 <_fflush_r+0xa>
 800a44e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a450:	07d0      	lsls	r0, r2, #31
 800a452:	d404      	bmi.n	800a45e <_fflush_r+0x32>
 800a454:	0599      	lsls	r1, r3, #22
 800a456:	d402      	bmi.n	800a45e <_fflush_r+0x32>
 800a458:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a45a:	f7fd fb80 	bl	8007b5e <__retarget_lock_acquire_recursive>
 800a45e:	4628      	mov	r0, r5
 800a460:	4621      	mov	r1, r4
 800a462:	f7ff ff5f 	bl	800a324 <__sflush_r>
 800a466:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a468:	07da      	lsls	r2, r3, #31
 800a46a:	4605      	mov	r5, r0
 800a46c:	d4e4      	bmi.n	800a438 <_fflush_r+0xc>
 800a46e:	89a3      	ldrh	r3, [r4, #12]
 800a470:	059b      	lsls	r3, r3, #22
 800a472:	d4e1      	bmi.n	800a438 <_fflush_r+0xc>
 800a474:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a476:	f7fd fb73 	bl	8007b60 <__retarget_lock_release_recursive>
 800a47a:	e7dd      	b.n	800a438 <_fflush_r+0xc>

0800a47c <memmove>:
 800a47c:	4288      	cmp	r0, r1
 800a47e:	b510      	push	{r4, lr}
 800a480:	eb01 0402 	add.w	r4, r1, r2
 800a484:	d902      	bls.n	800a48c <memmove+0x10>
 800a486:	4284      	cmp	r4, r0
 800a488:	4623      	mov	r3, r4
 800a48a:	d807      	bhi.n	800a49c <memmove+0x20>
 800a48c:	1e43      	subs	r3, r0, #1
 800a48e:	42a1      	cmp	r1, r4
 800a490:	d008      	beq.n	800a4a4 <memmove+0x28>
 800a492:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a496:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a49a:	e7f8      	b.n	800a48e <memmove+0x12>
 800a49c:	4402      	add	r2, r0
 800a49e:	4601      	mov	r1, r0
 800a4a0:	428a      	cmp	r2, r1
 800a4a2:	d100      	bne.n	800a4a6 <memmove+0x2a>
 800a4a4:	bd10      	pop	{r4, pc}
 800a4a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a4aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a4ae:	e7f7      	b.n	800a4a0 <memmove+0x24>

0800a4b0 <strncmp>:
 800a4b0:	b510      	push	{r4, lr}
 800a4b2:	b16a      	cbz	r2, 800a4d0 <strncmp+0x20>
 800a4b4:	3901      	subs	r1, #1
 800a4b6:	1884      	adds	r4, r0, r2
 800a4b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4bc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d103      	bne.n	800a4cc <strncmp+0x1c>
 800a4c4:	42a0      	cmp	r0, r4
 800a4c6:	d001      	beq.n	800a4cc <strncmp+0x1c>
 800a4c8:	2a00      	cmp	r2, #0
 800a4ca:	d1f5      	bne.n	800a4b8 <strncmp+0x8>
 800a4cc:	1ad0      	subs	r0, r2, r3
 800a4ce:	bd10      	pop	{r4, pc}
 800a4d0:	4610      	mov	r0, r2
 800a4d2:	e7fc      	b.n	800a4ce <strncmp+0x1e>

0800a4d4 <_sbrk_r>:
 800a4d4:	b538      	push	{r3, r4, r5, lr}
 800a4d6:	4d06      	ldr	r5, [pc, #24]	@ (800a4f0 <_sbrk_r+0x1c>)
 800a4d8:	2300      	movs	r3, #0
 800a4da:	4604      	mov	r4, r0
 800a4dc:	4608      	mov	r0, r1
 800a4de:	602b      	str	r3, [r5, #0]
 800a4e0:	f7f8 fe8a 	bl	80031f8 <_sbrk>
 800a4e4:	1c43      	adds	r3, r0, #1
 800a4e6:	d102      	bne.n	800a4ee <_sbrk_r+0x1a>
 800a4e8:	682b      	ldr	r3, [r5, #0]
 800a4ea:	b103      	cbz	r3, 800a4ee <_sbrk_r+0x1a>
 800a4ec:	6023      	str	r3, [r4, #0]
 800a4ee:	bd38      	pop	{r3, r4, r5, pc}
 800a4f0:	20000668 	.word	0x20000668

0800a4f4 <memcpy>:
 800a4f4:	440a      	add	r2, r1
 800a4f6:	4291      	cmp	r1, r2
 800a4f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4fc:	d100      	bne.n	800a500 <memcpy+0xc>
 800a4fe:	4770      	bx	lr
 800a500:	b510      	push	{r4, lr}
 800a502:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a506:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a50a:	4291      	cmp	r1, r2
 800a50c:	d1f9      	bne.n	800a502 <memcpy+0xe>
 800a50e:	bd10      	pop	{r4, pc}

0800a510 <nan>:
 800a510:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a518 <nan+0x8>
 800a514:	4770      	bx	lr
 800a516:	bf00      	nop
 800a518:	00000000 	.word	0x00000000
 800a51c:	7ff80000 	.word	0x7ff80000

0800a520 <__assert_func>:
 800a520:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a522:	4614      	mov	r4, r2
 800a524:	461a      	mov	r2, r3
 800a526:	4b09      	ldr	r3, [pc, #36]	@ (800a54c <__assert_func+0x2c>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4605      	mov	r5, r0
 800a52c:	68d8      	ldr	r0, [r3, #12]
 800a52e:	b954      	cbnz	r4, 800a546 <__assert_func+0x26>
 800a530:	4b07      	ldr	r3, [pc, #28]	@ (800a550 <__assert_func+0x30>)
 800a532:	461c      	mov	r4, r3
 800a534:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a538:	9100      	str	r1, [sp, #0]
 800a53a:	462b      	mov	r3, r5
 800a53c:	4905      	ldr	r1, [pc, #20]	@ (800a554 <__assert_func+0x34>)
 800a53e:	f000 fba7 	bl	800ac90 <fiprintf>
 800a542:	f000 fbb7 	bl	800acb4 <abort>
 800a546:	4b04      	ldr	r3, [pc, #16]	@ (800a558 <__assert_func+0x38>)
 800a548:	e7f4      	b.n	800a534 <__assert_func+0x14>
 800a54a:	bf00      	nop
 800a54c:	2000003c 	.word	0x2000003c
 800a550:	0800cced 	.word	0x0800cced
 800a554:	0800ccbf 	.word	0x0800ccbf
 800a558:	0800ccb2 	.word	0x0800ccb2

0800a55c <_calloc_r>:
 800a55c:	b570      	push	{r4, r5, r6, lr}
 800a55e:	fba1 5402 	umull	r5, r4, r1, r2
 800a562:	b93c      	cbnz	r4, 800a574 <_calloc_r+0x18>
 800a564:	4629      	mov	r1, r5
 800a566:	f7fe f9c3 	bl	80088f0 <_malloc_r>
 800a56a:	4606      	mov	r6, r0
 800a56c:	b928      	cbnz	r0, 800a57a <_calloc_r+0x1e>
 800a56e:	2600      	movs	r6, #0
 800a570:	4630      	mov	r0, r6
 800a572:	bd70      	pop	{r4, r5, r6, pc}
 800a574:	220c      	movs	r2, #12
 800a576:	6002      	str	r2, [r0, #0]
 800a578:	e7f9      	b.n	800a56e <_calloc_r+0x12>
 800a57a:	462a      	mov	r2, r5
 800a57c:	4621      	mov	r1, r4
 800a57e:	f7fd fa70 	bl	8007a62 <memset>
 800a582:	e7f5      	b.n	800a570 <_calloc_r+0x14>

0800a584 <rshift>:
 800a584:	6903      	ldr	r3, [r0, #16]
 800a586:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a58a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a58e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a592:	f100 0414 	add.w	r4, r0, #20
 800a596:	dd45      	ble.n	800a624 <rshift+0xa0>
 800a598:	f011 011f 	ands.w	r1, r1, #31
 800a59c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a5a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a5a4:	d10c      	bne.n	800a5c0 <rshift+0x3c>
 800a5a6:	f100 0710 	add.w	r7, r0, #16
 800a5aa:	4629      	mov	r1, r5
 800a5ac:	42b1      	cmp	r1, r6
 800a5ae:	d334      	bcc.n	800a61a <rshift+0x96>
 800a5b0:	1a9b      	subs	r3, r3, r2
 800a5b2:	009b      	lsls	r3, r3, #2
 800a5b4:	1eea      	subs	r2, r5, #3
 800a5b6:	4296      	cmp	r6, r2
 800a5b8:	bf38      	it	cc
 800a5ba:	2300      	movcc	r3, #0
 800a5bc:	4423      	add	r3, r4
 800a5be:	e015      	b.n	800a5ec <rshift+0x68>
 800a5c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a5c4:	f1c1 0820 	rsb	r8, r1, #32
 800a5c8:	40cf      	lsrs	r7, r1
 800a5ca:	f105 0e04 	add.w	lr, r5, #4
 800a5ce:	46a1      	mov	r9, r4
 800a5d0:	4576      	cmp	r6, lr
 800a5d2:	46f4      	mov	ip, lr
 800a5d4:	d815      	bhi.n	800a602 <rshift+0x7e>
 800a5d6:	1a9a      	subs	r2, r3, r2
 800a5d8:	0092      	lsls	r2, r2, #2
 800a5da:	3a04      	subs	r2, #4
 800a5dc:	3501      	adds	r5, #1
 800a5de:	42ae      	cmp	r6, r5
 800a5e0:	bf38      	it	cc
 800a5e2:	2200      	movcc	r2, #0
 800a5e4:	18a3      	adds	r3, r4, r2
 800a5e6:	50a7      	str	r7, [r4, r2]
 800a5e8:	b107      	cbz	r7, 800a5ec <rshift+0x68>
 800a5ea:	3304      	adds	r3, #4
 800a5ec:	1b1a      	subs	r2, r3, r4
 800a5ee:	42a3      	cmp	r3, r4
 800a5f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a5f4:	bf08      	it	eq
 800a5f6:	2300      	moveq	r3, #0
 800a5f8:	6102      	str	r2, [r0, #16]
 800a5fa:	bf08      	it	eq
 800a5fc:	6143      	streq	r3, [r0, #20]
 800a5fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a602:	f8dc c000 	ldr.w	ip, [ip]
 800a606:	fa0c fc08 	lsl.w	ip, ip, r8
 800a60a:	ea4c 0707 	orr.w	r7, ip, r7
 800a60e:	f849 7b04 	str.w	r7, [r9], #4
 800a612:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a616:	40cf      	lsrs	r7, r1
 800a618:	e7da      	b.n	800a5d0 <rshift+0x4c>
 800a61a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a61e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a622:	e7c3      	b.n	800a5ac <rshift+0x28>
 800a624:	4623      	mov	r3, r4
 800a626:	e7e1      	b.n	800a5ec <rshift+0x68>

0800a628 <__hexdig_fun>:
 800a628:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a62c:	2b09      	cmp	r3, #9
 800a62e:	d802      	bhi.n	800a636 <__hexdig_fun+0xe>
 800a630:	3820      	subs	r0, #32
 800a632:	b2c0      	uxtb	r0, r0
 800a634:	4770      	bx	lr
 800a636:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a63a:	2b05      	cmp	r3, #5
 800a63c:	d801      	bhi.n	800a642 <__hexdig_fun+0x1a>
 800a63e:	3847      	subs	r0, #71	@ 0x47
 800a640:	e7f7      	b.n	800a632 <__hexdig_fun+0xa>
 800a642:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a646:	2b05      	cmp	r3, #5
 800a648:	d801      	bhi.n	800a64e <__hexdig_fun+0x26>
 800a64a:	3827      	subs	r0, #39	@ 0x27
 800a64c:	e7f1      	b.n	800a632 <__hexdig_fun+0xa>
 800a64e:	2000      	movs	r0, #0
 800a650:	4770      	bx	lr
	...

0800a654 <__gethex>:
 800a654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a658:	b085      	sub	sp, #20
 800a65a:	468a      	mov	sl, r1
 800a65c:	9302      	str	r3, [sp, #8]
 800a65e:	680b      	ldr	r3, [r1, #0]
 800a660:	9001      	str	r0, [sp, #4]
 800a662:	4690      	mov	r8, r2
 800a664:	1c9c      	adds	r4, r3, #2
 800a666:	46a1      	mov	r9, r4
 800a668:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a66c:	2830      	cmp	r0, #48	@ 0x30
 800a66e:	d0fa      	beq.n	800a666 <__gethex+0x12>
 800a670:	eba9 0303 	sub.w	r3, r9, r3
 800a674:	f1a3 0b02 	sub.w	fp, r3, #2
 800a678:	f7ff ffd6 	bl	800a628 <__hexdig_fun>
 800a67c:	4605      	mov	r5, r0
 800a67e:	2800      	cmp	r0, #0
 800a680:	d168      	bne.n	800a754 <__gethex+0x100>
 800a682:	49a0      	ldr	r1, [pc, #640]	@ (800a904 <__gethex+0x2b0>)
 800a684:	2201      	movs	r2, #1
 800a686:	4648      	mov	r0, r9
 800a688:	f7ff ff12 	bl	800a4b0 <strncmp>
 800a68c:	4607      	mov	r7, r0
 800a68e:	2800      	cmp	r0, #0
 800a690:	d167      	bne.n	800a762 <__gethex+0x10e>
 800a692:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a696:	4626      	mov	r6, r4
 800a698:	f7ff ffc6 	bl	800a628 <__hexdig_fun>
 800a69c:	2800      	cmp	r0, #0
 800a69e:	d062      	beq.n	800a766 <__gethex+0x112>
 800a6a0:	4623      	mov	r3, r4
 800a6a2:	7818      	ldrb	r0, [r3, #0]
 800a6a4:	2830      	cmp	r0, #48	@ 0x30
 800a6a6:	4699      	mov	r9, r3
 800a6a8:	f103 0301 	add.w	r3, r3, #1
 800a6ac:	d0f9      	beq.n	800a6a2 <__gethex+0x4e>
 800a6ae:	f7ff ffbb 	bl	800a628 <__hexdig_fun>
 800a6b2:	fab0 f580 	clz	r5, r0
 800a6b6:	096d      	lsrs	r5, r5, #5
 800a6b8:	f04f 0b01 	mov.w	fp, #1
 800a6bc:	464a      	mov	r2, r9
 800a6be:	4616      	mov	r6, r2
 800a6c0:	3201      	adds	r2, #1
 800a6c2:	7830      	ldrb	r0, [r6, #0]
 800a6c4:	f7ff ffb0 	bl	800a628 <__hexdig_fun>
 800a6c8:	2800      	cmp	r0, #0
 800a6ca:	d1f8      	bne.n	800a6be <__gethex+0x6a>
 800a6cc:	498d      	ldr	r1, [pc, #564]	@ (800a904 <__gethex+0x2b0>)
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	4630      	mov	r0, r6
 800a6d2:	f7ff feed 	bl	800a4b0 <strncmp>
 800a6d6:	2800      	cmp	r0, #0
 800a6d8:	d13f      	bne.n	800a75a <__gethex+0x106>
 800a6da:	b944      	cbnz	r4, 800a6ee <__gethex+0x9a>
 800a6dc:	1c74      	adds	r4, r6, #1
 800a6de:	4622      	mov	r2, r4
 800a6e0:	4616      	mov	r6, r2
 800a6e2:	3201      	adds	r2, #1
 800a6e4:	7830      	ldrb	r0, [r6, #0]
 800a6e6:	f7ff ff9f 	bl	800a628 <__hexdig_fun>
 800a6ea:	2800      	cmp	r0, #0
 800a6ec:	d1f8      	bne.n	800a6e0 <__gethex+0x8c>
 800a6ee:	1ba4      	subs	r4, r4, r6
 800a6f0:	00a7      	lsls	r7, r4, #2
 800a6f2:	7833      	ldrb	r3, [r6, #0]
 800a6f4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a6f8:	2b50      	cmp	r3, #80	@ 0x50
 800a6fa:	d13e      	bne.n	800a77a <__gethex+0x126>
 800a6fc:	7873      	ldrb	r3, [r6, #1]
 800a6fe:	2b2b      	cmp	r3, #43	@ 0x2b
 800a700:	d033      	beq.n	800a76a <__gethex+0x116>
 800a702:	2b2d      	cmp	r3, #45	@ 0x2d
 800a704:	d034      	beq.n	800a770 <__gethex+0x11c>
 800a706:	1c71      	adds	r1, r6, #1
 800a708:	2400      	movs	r4, #0
 800a70a:	7808      	ldrb	r0, [r1, #0]
 800a70c:	f7ff ff8c 	bl	800a628 <__hexdig_fun>
 800a710:	1e43      	subs	r3, r0, #1
 800a712:	b2db      	uxtb	r3, r3
 800a714:	2b18      	cmp	r3, #24
 800a716:	d830      	bhi.n	800a77a <__gethex+0x126>
 800a718:	f1a0 0210 	sub.w	r2, r0, #16
 800a71c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a720:	f7ff ff82 	bl	800a628 <__hexdig_fun>
 800a724:	f100 3cff 	add.w	ip, r0, #4294967295
 800a728:	fa5f fc8c 	uxtb.w	ip, ip
 800a72c:	f1bc 0f18 	cmp.w	ip, #24
 800a730:	f04f 030a 	mov.w	r3, #10
 800a734:	d91e      	bls.n	800a774 <__gethex+0x120>
 800a736:	b104      	cbz	r4, 800a73a <__gethex+0xe6>
 800a738:	4252      	negs	r2, r2
 800a73a:	4417      	add	r7, r2
 800a73c:	f8ca 1000 	str.w	r1, [sl]
 800a740:	b1ed      	cbz	r5, 800a77e <__gethex+0x12a>
 800a742:	f1bb 0f00 	cmp.w	fp, #0
 800a746:	bf0c      	ite	eq
 800a748:	2506      	moveq	r5, #6
 800a74a:	2500      	movne	r5, #0
 800a74c:	4628      	mov	r0, r5
 800a74e:	b005      	add	sp, #20
 800a750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a754:	2500      	movs	r5, #0
 800a756:	462c      	mov	r4, r5
 800a758:	e7b0      	b.n	800a6bc <__gethex+0x68>
 800a75a:	2c00      	cmp	r4, #0
 800a75c:	d1c7      	bne.n	800a6ee <__gethex+0x9a>
 800a75e:	4627      	mov	r7, r4
 800a760:	e7c7      	b.n	800a6f2 <__gethex+0x9e>
 800a762:	464e      	mov	r6, r9
 800a764:	462f      	mov	r7, r5
 800a766:	2501      	movs	r5, #1
 800a768:	e7c3      	b.n	800a6f2 <__gethex+0x9e>
 800a76a:	2400      	movs	r4, #0
 800a76c:	1cb1      	adds	r1, r6, #2
 800a76e:	e7cc      	b.n	800a70a <__gethex+0xb6>
 800a770:	2401      	movs	r4, #1
 800a772:	e7fb      	b.n	800a76c <__gethex+0x118>
 800a774:	fb03 0002 	mla	r0, r3, r2, r0
 800a778:	e7ce      	b.n	800a718 <__gethex+0xc4>
 800a77a:	4631      	mov	r1, r6
 800a77c:	e7de      	b.n	800a73c <__gethex+0xe8>
 800a77e:	eba6 0309 	sub.w	r3, r6, r9
 800a782:	3b01      	subs	r3, #1
 800a784:	4629      	mov	r1, r5
 800a786:	2b07      	cmp	r3, #7
 800a788:	dc0a      	bgt.n	800a7a0 <__gethex+0x14c>
 800a78a:	9801      	ldr	r0, [sp, #4]
 800a78c:	f7fe f93c 	bl	8008a08 <_Balloc>
 800a790:	4604      	mov	r4, r0
 800a792:	b940      	cbnz	r0, 800a7a6 <__gethex+0x152>
 800a794:	4b5c      	ldr	r3, [pc, #368]	@ (800a908 <__gethex+0x2b4>)
 800a796:	4602      	mov	r2, r0
 800a798:	21e4      	movs	r1, #228	@ 0xe4
 800a79a:	485c      	ldr	r0, [pc, #368]	@ (800a90c <__gethex+0x2b8>)
 800a79c:	f7ff fec0 	bl	800a520 <__assert_func>
 800a7a0:	3101      	adds	r1, #1
 800a7a2:	105b      	asrs	r3, r3, #1
 800a7a4:	e7ef      	b.n	800a786 <__gethex+0x132>
 800a7a6:	f100 0a14 	add.w	sl, r0, #20
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	4655      	mov	r5, sl
 800a7ae:	469b      	mov	fp, r3
 800a7b0:	45b1      	cmp	r9, r6
 800a7b2:	d337      	bcc.n	800a824 <__gethex+0x1d0>
 800a7b4:	f845 bb04 	str.w	fp, [r5], #4
 800a7b8:	eba5 050a 	sub.w	r5, r5, sl
 800a7bc:	10ad      	asrs	r5, r5, #2
 800a7be:	6125      	str	r5, [r4, #16]
 800a7c0:	4658      	mov	r0, fp
 800a7c2:	f7fe fa13 	bl	8008bec <__hi0bits>
 800a7c6:	016d      	lsls	r5, r5, #5
 800a7c8:	f8d8 6000 	ldr.w	r6, [r8]
 800a7cc:	1a2d      	subs	r5, r5, r0
 800a7ce:	42b5      	cmp	r5, r6
 800a7d0:	dd54      	ble.n	800a87c <__gethex+0x228>
 800a7d2:	1bad      	subs	r5, r5, r6
 800a7d4:	4629      	mov	r1, r5
 800a7d6:	4620      	mov	r0, r4
 800a7d8:	f7fe fda7 	bl	800932a <__any_on>
 800a7dc:	4681      	mov	r9, r0
 800a7de:	b178      	cbz	r0, 800a800 <__gethex+0x1ac>
 800a7e0:	1e6b      	subs	r3, r5, #1
 800a7e2:	1159      	asrs	r1, r3, #5
 800a7e4:	f003 021f 	and.w	r2, r3, #31
 800a7e8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a7ec:	f04f 0901 	mov.w	r9, #1
 800a7f0:	fa09 f202 	lsl.w	r2, r9, r2
 800a7f4:	420a      	tst	r2, r1
 800a7f6:	d003      	beq.n	800a800 <__gethex+0x1ac>
 800a7f8:	454b      	cmp	r3, r9
 800a7fa:	dc36      	bgt.n	800a86a <__gethex+0x216>
 800a7fc:	f04f 0902 	mov.w	r9, #2
 800a800:	4629      	mov	r1, r5
 800a802:	4620      	mov	r0, r4
 800a804:	f7ff febe 	bl	800a584 <rshift>
 800a808:	442f      	add	r7, r5
 800a80a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a80e:	42bb      	cmp	r3, r7
 800a810:	da42      	bge.n	800a898 <__gethex+0x244>
 800a812:	9801      	ldr	r0, [sp, #4]
 800a814:	4621      	mov	r1, r4
 800a816:	f7fe f937 	bl	8008a88 <_Bfree>
 800a81a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a81c:	2300      	movs	r3, #0
 800a81e:	6013      	str	r3, [r2, #0]
 800a820:	25a3      	movs	r5, #163	@ 0xa3
 800a822:	e793      	b.n	800a74c <__gethex+0xf8>
 800a824:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a828:	2a2e      	cmp	r2, #46	@ 0x2e
 800a82a:	d012      	beq.n	800a852 <__gethex+0x1fe>
 800a82c:	2b20      	cmp	r3, #32
 800a82e:	d104      	bne.n	800a83a <__gethex+0x1e6>
 800a830:	f845 bb04 	str.w	fp, [r5], #4
 800a834:	f04f 0b00 	mov.w	fp, #0
 800a838:	465b      	mov	r3, fp
 800a83a:	7830      	ldrb	r0, [r6, #0]
 800a83c:	9303      	str	r3, [sp, #12]
 800a83e:	f7ff fef3 	bl	800a628 <__hexdig_fun>
 800a842:	9b03      	ldr	r3, [sp, #12]
 800a844:	f000 000f 	and.w	r0, r0, #15
 800a848:	4098      	lsls	r0, r3
 800a84a:	ea4b 0b00 	orr.w	fp, fp, r0
 800a84e:	3304      	adds	r3, #4
 800a850:	e7ae      	b.n	800a7b0 <__gethex+0x15c>
 800a852:	45b1      	cmp	r9, r6
 800a854:	d8ea      	bhi.n	800a82c <__gethex+0x1d8>
 800a856:	492b      	ldr	r1, [pc, #172]	@ (800a904 <__gethex+0x2b0>)
 800a858:	9303      	str	r3, [sp, #12]
 800a85a:	2201      	movs	r2, #1
 800a85c:	4630      	mov	r0, r6
 800a85e:	f7ff fe27 	bl	800a4b0 <strncmp>
 800a862:	9b03      	ldr	r3, [sp, #12]
 800a864:	2800      	cmp	r0, #0
 800a866:	d1e1      	bne.n	800a82c <__gethex+0x1d8>
 800a868:	e7a2      	b.n	800a7b0 <__gethex+0x15c>
 800a86a:	1ea9      	subs	r1, r5, #2
 800a86c:	4620      	mov	r0, r4
 800a86e:	f7fe fd5c 	bl	800932a <__any_on>
 800a872:	2800      	cmp	r0, #0
 800a874:	d0c2      	beq.n	800a7fc <__gethex+0x1a8>
 800a876:	f04f 0903 	mov.w	r9, #3
 800a87a:	e7c1      	b.n	800a800 <__gethex+0x1ac>
 800a87c:	da09      	bge.n	800a892 <__gethex+0x23e>
 800a87e:	1b75      	subs	r5, r6, r5
 800a880:	4621      	mov	r1, r4
 800a882:	9801      	ldr	r0, [sp, #4]
 800a884:	462a      	mov	r2, r5
 800a886:	f7fe fb17 	bl	8008eb8 <__lshift>
 800a88a:	1b7f      	subs	r7, r7, r5
 800a88c:	4604      	mov	r4, r0
 800a88e:	f100 0a14 	add.w	sl, r0, #20
 800a892:	f04f 0900 	mov.w	r9, #0
 800a896:	e7b8      	b.n	800a80a <__gethex+0x1b6>
 800a898:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a89c:	42bd      	cmp	r5, r7
 800a89e:	dd6f      	ble.n	800a980 <__gethex+0x32c>
 800a8a0:	1bed      	subs	r5, r5, r7
 800a8a2:	42ae      	cmp	r6, r5
 800a8a4:	dc34      	bgt.n	800a910 <__gethex+0x2bc>
 800a8a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a8aa:	2b02      	cmp	r3, #2
 800a8ac:	d022      	beq.n	800a8f4 <__gethex+0x2a0>
 800a8ae:	2b03      	cmp	r3, #3
 800a8b0:	d024      	beq.n	800a8fc <__gethex+0x2a8>
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d115      	bne.n	800a8e2 <__gethex+0x28e>
 800a8b6:	42ae      	cmp	r6, r5
 800a8b8:	d113      	bne.n	800a8e2 <__gethex+0x28e>
 800a8ba:	2e01      	cmp	r6, #1
 800a8bc:	d10b      	bne.n	800a8d6 <__gethex+0x282>
 800a8be:	9a02      	ldr	r2, [sp, #8]
 800a8c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a8c4:	6013      	str	r3, [r2, #0]
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	6123      	str	r3, [r4, #16]
 800a8ca:	f8ca 3000 	str.w	r3, [sl]
 800a8ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8d0:	2562      	movs	r5, #98	@ 0x62
 800a8d2:	601c      	str	r4, [r3, #0]
 800a8d4:	e73a      	b.n	800a74c <__gethex+0xf8>
 800a8d6:	1e71      	subs	r1, r6, #1
 800a8d8:	4620      	mov	r0, r4
 800a8da:	f7fe fd26 	bl	800932a <__any_on>
 800a8de:	2800      	cmp	r0, #0
 800a8e0:	d1ed      	bne.n	800a8be <__gethex+0x26a>
 800a8e2:	9801      	ldr	r0, [sp, #4]
 800a8e4:	4621      	mov	r1, r4
 800a8e6:	f7fe f8cf 	bl	8008a88 <_Bfree>
 800a8ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	6013      	str	r3, [r2, #0]
 800a8f0:	2550      	movs	r5, #80	@ 0x50
 800a8f2:	e72b      	b.n	800a74c <__gethex+0xf8>
 800a8f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d1f3      	bne.n	800a8e2 <__gethex+0x28e>
 800a8fa:	e7e0      	b.n	800a8be <__gethex+0x26a>
 800a8fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d1dd      	bne.n	800a8be <__gethex+0x26a>
 800a902:	e7ee      	b.n	800a8e2 <__gethex+0x28e>
 800a904:	0800cb40 	.word	0x0800cb40
 800a908:	0800c9d5 	.word	0x0800c9d5
 800a90c:	0800ccee 	.word	0x0800ccee
 800a910:	1e6f      	subs	r7, r5, #1
 800a912:	f1b9 0f00 	cmp.w	r9, #0
 800a916:	d130      	bne.n	800a97a <__gethex+0x326>
 800a918:	b127      	cbz	r7, 800a924 <__gethex+0x2d0>
 800a91a:	4639      	mov	r1, r7
 800a91c:	4620      	mov	r0, r4
 800a91e:	f7fe fd04 	bl	800932a <__any_on>
 800a922:	4681      	mov	r9, r0
 800a924:	117a      	asrs	r2, r7, #5
 800a926:	2301      	movs	r3, #1
 800a928:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a92c:	f007 071f 	and.w	r7, r7, #31
 800a930:	40bb      	lsls	r3, r7
 800a932:	4213      	tst	r3, r2
 800a934:	4629      	mov	r1, r5
 800a936:	4620      	mov	r0, r4
 800a938:	bf18      	it	ne
 800a93a:	f049 0902 	orrne.w	r9, r9, #2
 800a93e:	f7ff fe21 	bl	800a584 <rshift>
 800a942:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a946:	1b76      	subs	r6, r6, r5
 800a948:	2502      	movs	r5, #2
 800a94a:	f1b9 0f00 	cmp.w	r9, #0
 800a94e:	d047      	beq.n	800a9e0 <__gethex+0x38c>
 800a950:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a954:	2b02      	cmp	r3, #2
 800a956:	d015      	beq.n	800a984 <__gethex+0x330>
 800a958:	2b03      	cmp	r3, #3
 800a95a:	d017      	beq.n	800a98c <__gethex+0x338>
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d109      	bne.n	800a974 <__gethex+0x320>
 800a960:	f019 0f02 	tst.w	r9, #2
 800a964:	d006      	beq.n	800a974 <__gethex+0x320>
 800a966:	f8da 3000 	ldr.w	r3, [sl]
 800a96a:	ea49 0903 	orr.w	r9, r9, r3
 800a96e:	f019 0f01 	tst.w	r9, #1
 800a972:	d10e      	bne.n	800a992 <__gethex+0x33e>
 800a974:	f045 0510 	orr.w	r5, r5, #16
 800a978:	e032      	b.n	800a9e0 <__gethex+0x38c>
 800a97a:	f04f 0901 	mov.w	r9, #1
 800a97e:	e7d1      	b.n	800a924 <__gethex+0x2d0>
 800a980:	2501      	movs	r5, #1
 800a982:	e7e2      	b.n	800a94a <__gethex+0x2f6>
 800a984:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a986:	f1c3 0301 	rsb	r3, r3, #1
 800a98a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a98c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d0f0      	beq.n	800a974 <__gethex+0x320>
 800a992:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a996:	f104 0314 	add.w	r3, r4, #20
 800a99a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a99e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a9a2:	f04f 0c00 	mov.w	ip, #0
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9ac:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a9b0:	d01b      	beq.n	800a9ea <__gethex+0x396>
 800a9b2:	3201      	adds	r2, #1
 800a9b4:	6002      	str	r2, [r0, #0]
 800a9b6:	2d02      	cmp	r5, #2
 800a9b8:	f104 0314 	add.w	r3, r4, #20
 800a9bc:	d13c      	bne.n	800aa38 <__gethex+0x3e4>
 800a9be:	f8d8 2000 	ldr.w	r2, [r8]
 800a9c2:	3a01      	subs	r2, #1
 800a9c4:	42b2      	cmp	r2, r6
 800a9c6:	d109      	bne.n	800a9dc <__gethex+0x388>
 800a9c8:	1171      	asrs	r1, r6, #5
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a9d0:	f006 061f 	and.w	r6, r6, #31
 800a9d4:	fa02 f606 	lsl.w	r6, r2, r6
 800a9d8:	421e      	tst	r6, r3
 800a9da:	d13a      	bne.n	800aa52 <__gethex+0x3fe>
 800a9dc:	f045 0520 	orr.w	r5, r5, #32
 800a9e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9e2:	601c      	str	r4, [r3, #0]
 800a9e4:	9b02      	ldr	r3, [sp, #8]
 800a9e6:	601f      	str	r7, [r3, #0]
 800a9e8:	e6b0      	b.n	800a74c <__gethex+0xf8>
 800a9ea:	4299      	cmp	r1, r3
 800a9ec:	f843 cc04 	str.w	ip, [r3, #-4]
 800a9f0:	d8d9      	bhi.n	800a9a6 <__gethex+0x352>
 800a9f2:	68a3      	ldr	r3, [r4, #8]
 800a9f4:	459b      	cmp	fp, r3
 800a9f6:	db17      	blt.n	800aa28 <__gethex+0x3d4>
 800a9f8:	6861      	ldr	r1, [r4, #4]
 800a9fa:	9801      	ldr	r0, [sp, #4]
 800a9fc:	3101      	adds	r1, #1
 800a9fe:	f7fe f803 	bl	8008a08 <_Balloc>
 800aa02:	4681      	mov	r9, r0
 800aa04:	b918      	cbnz	r0, 800aa0e <__gethex+0x3ba>
 800aa06:	4b1a      	ldr	r3, [pc, #104]	@ (800aa70 <__gethex+0x41c>)
 800aa08:	4602      	mov	r2, r0
 800aa0a:	2184      	movs	r1, #132	@ 0x84
 800aa0c:	e6c5      	b.n	800a79a <__gethex+0x146>
 800aa0e:	6922      	ldr	r2, [r4, #16]
 800aa10:	3202      	adds	r2, #2
 800aa12:	f104 010c 	add.w	r1, r4, #12
 800aa16:	0092      	lsls	r2, r2, #2
 800aa18:	300c      	adds	r0, #12
 800aa1a:	f7ff fd6b 	bl	800a4f4 <memcpy>
 800aa1e:	4621      	mov	r1, r4
 800aa20:	9801      	ldr	r0, [sp, #4]
 800aa22:	f7fe f831 	bl	8008a88 <_Bfree>
 800aa26:	464c      	mov	r4, r9
 800aa28:	6923      	ldr	r3, [r4, #16]
 800aa2a:	1c5a      	adds	r2, r3, #1
 800aa2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa30:	6122      	str	r2, [r4, #16]
 800aa32:	2201      	movs	r2, #1
 800aa34:	615a      	str	r2, [r3, #20]
 800aa36:	e7be      	b.n	800a9b6 <__gethex+0x362>
 800aa38:	6922      	ldr	r2, [r4, #16]
 800aa3a:	455a      	cmp	r2, fp
 800aa3c:	dd0b      	ble.n	800aa56 <__gethex+0x402>
 800aa3e:	2101      	movs	r1, #1
 800aa40:	4620      	mov	r0, r4
 800aa42:	f7ff fd9f 	bl	800a584 <rshift>
 800aa46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa4a:	3701      	adds	r7, #1
 800aa4c:	42bb      	cmp	r3, r7
 800aa4e:	f6ff aee0 	blt.w	800a812 <__gethex+0x1be>
 800aa52:	2501      	movs	r5, #1
 800aa54:	e7c2      	b.n	800a9dc <__gethex+0x388>
 800aa56:	f016 061f 	ands.w	r6, r6, #31
 800aa5a:	d0fa      	beq.n	800aa52 <__gethex+0x3fe>
 800aa5c:	4453      	add	r3, sl
 800aa5e:	f1c6 0620 	rsb	r6, r6, #32
 800aa62:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800aa66:	f7fe f8c1 	bl	8008bec <__hi0bits>
 800aa6a:	42b0      	cmp	r0, r6
 800aa6c:	dbe7      	blt.n	800aa3e <__gethex+0x3ea>
 800aa6e:	e7f0      	b.n	800aa52 <__gethex+0x3fe>
 800aa70:	0800c9d5 	.word	0x0800c9d5

0800aa74 <L_shift>:
 800aa74:	f1c2 0208 	rsb	r2, r2, #8
 800aa78:	0092      	lsls	r2, r2, #2
 800aa7a:	b570      	push	{r4, r5, r6, lr}
 800aa7c:	f1c2 0620 	rsb	r6, r2, #32
 800aa80:	6843      	ldr	r3, [r0, #4]
 800aa82:	6804      	ldr	r4, [r0, #0]
 800aa84:	fa03 f506 	lsl.w	r5, r3, r6
 800aa88:	432c      	orrs	r4, r5
 800aa8a:	40d3      	lsrs	r3, r2
 800aa8c:	6004      	str	r4, [r0, #0]
 800aa8e:	f840 3f04 	str.w	r3, [r0, #4]!
 800aa92:	4288      	cmp	r0, r1
 800aa94:	d3f4      	bcc.n	800aa80 <L_shift+0xc>
 800aa96:	bd70      	pop	{r4, r5, r6, pc}

0800aa98 <__match>:
 800aa98:	b530      	push	{r4, r5, lr}
 800aa9a:	6803      	ldr	r3, [r0, #0]
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aaa2:	b914      	cbnz	r4, 800aaaa <__match+0x12>
 800aaa4:	6003      	str	r3, [r0, #0]
 800aaa6:	2001      	movs	r0, #1
 800aaa8:	bd30      	pop	{r4, r5, pc}
 800aaaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aaae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800aab2:	2d19      	cmp	r5, #25
 800aab4:	bf98      	it	ls
 800aab6:	3220      	addls	r2, #32
 800aab8:	42a2      	cmp	r2, r4
 800aaba:	d0f0      	beq.n	800aa9e <__match+0x6>
 800aabc:	2000      	movs	r0, #0
 800aabe:	e7f3      	b.n	800aaa8 <__match+0x10>

0800aac0 <__hexnan>:
 800aac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aac4:	680b      	ldr	r3, [r1, #0]
 800aac6:	6801      	ldr	r1, [r0, #0]
 800aac8:	115e      	asrs	r6, r3, #5
 800aaca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aace:	f013 031f 	ands.w	r3, r3, #31
 800aad2:	b087      	sub	sp, #28
 800aad4:	bf18      	it	ne
 800aad6:	3604      	addne	r6, #4
 800aad8:	2500      	movs	r5, #0
 800aada:	1f37      	subs	r7, r6, #4
 800aadc:	4682      	mov	sl, r0
 800aade:	4690      	mov	r8, r2
 800aae0:	9301      	str	r3, [sp, #4]
 800aae2:	f846 5c04 	str.w	r5, [r6, #-4]
 800aae6:	46b9      	mov	r9, r7
 800aae8:	463c      	mov	r4, r7
 800aaea:	9502      	str	r5, [sp, #8]
 800aaec:	46ab      	mov	fp, r5
 800aaee:	784a      	ldrb	r2, [r1, #1]
 800aaf0:	1c4b      	adds	r3, r1, #1
 800aaf2:	9303      	str	r3, [sp, #12]
 800aaf4:	b342      	cbz	r2, 800ab48 <__hexnan+0x88>
 800aaf6:	4610      	mov	r0, r2
 800aaf8:	9105      	str	r1, [sp, #20]
 800aafa:	9204      	str	r2, [sp, #16]
 800aafc:	f7ff fd94 	bl	800a628 <__hexdig_fun>
 800ab00:	2800      	cmp	r0, #0
 800ab02:	d151      	bne.n	800aba8 <__hexnan+0xe8>
 800ab04:	9a04      	ldr	r2, [sp, #16]
 800ab06:	9905      	ldr	r1, [sp, #20]
 800ab08:	2a20      	cmp	r2, #32
 800ab0a:	d818      	bhi.n	800ab3e <__hexnan+0x7e>
 800ab0c:	9b02      	ldr	r3, [sp, #8]
 800ab0e:	459b      	cmp	fp, r3
 800ab10:	dd13      	ble.n	800ab3a <__hexnan+0x7a>
 800ab12:	454c      	cmp	r4, r9
 800ab14:	d206      	bcs.n	800ab24 <__hexnan+0x64>
 800ab16:	2d07      	cmp	r5, #7
 800ab18:	dc04      	bgt.n	800ab24 <__hexnan+0x64>
 800ab1a:	462a      	mov	r2, r5
 800ab1c:	4649      	mov	r1, r9
 800ab1e:	4620      	mov	r0, r4
 800ab20:	f7ff ffa8 	bl	800aa74 <L_shift>
 800ab24:	4544      	cmp	r4, r8
 800ab26:	d952      	bls.n	800abce <__hexnan+0x10e>
 800ab28:	2300      	movs	r3, #0
 800ab2a:	f1a4 0904 	sub.w	r9, r4, #4
 800ab2e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab32:	f8cd b008 	str.w	fp, [sp, #8]
 800ab36:	464c      	mov	r4, r9
 800ab38:	461d      	mov	r5, r3
 800ab3a:	9903      	ldr	r1, [sp, #12]
 800ab3c:	e7d7      	b.n	800aaee <__hexnan+0x2e>
 800ab3e:	2a29      	cmp	r2, #41	@ 0x29
 800ab40:	d157      	bne.n	800abf2 <__hexnan+0x132>
 800ab42:	3102      	adds	r1, #2
 800ab44:	f8ca 1000 	str.w	r1, [sl]
 800ab48:	f1bb 0f00 	cmp.w	fp, #0
 800ab4c:	d051      	beq.n	800abf2 <__hexnan+0x132>
 800ab4e:	454c      	cmp	r4, r9
 800ab50:	d206      	bcs.n	800ab60 <__hexnan+0xa0>
 800ab52:	2d07      	cmp	r5, #7
 800ab54:	dc04      	bgt.n	800ab60 <__hexnan+0xa0>
 800ab56:	462a      	mov	r2, r5
 800ab58:	4649      	mov	r1, r9
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	f7ff ff8a 	bl	800aa74 <L_shift>
 800ab60:	4544      	cmp	r4, r8
 800ab62:	d936      	bls.n	800abd2 <__hexnan+0x112>
 800ab64:	f1a8 0204 	sub.w	r2, r8, #4
 800ab68:	4623      	mov	r3, r4
 800ab6a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ab6e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ab72:	429f      	cmp	r7, r3
 800ab74:	d2f9      	bcs.n	800ab6a <__hexnan+0xaa>
 800ab76:	1b3b      	subs	r3, r7, r4
 800ab78:	f023 0303 	bic.w	r3, r3, #3
 800ab7c:	3304      	adds	r3, #4
 800ab7e:	3401      	adds	r4, #1
 800ab80:	3e03      	subs	r6, #3
 800ab82:	42b4      	cmp	r4, r6
 800ab84:	bf88      	it	hi
 800ab86:	2304      	movhi	r3, #4
 800ab88:	4443      	add	r3, r8
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	f843 2b04 	str.w	r2, [r3], #4
 800ab90:	429f      	cmp	r7, r3
 800ab92:	d2fb      	bcs.n	800ab8c <__hexnan+0xcc>
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	b91b      	cbnz	r3, 800aba0 <__hexnan+0xe0>
 800ab98:	4547      	cmp	r7, r8
 800ab9a:	d128      	bne.n	800abee <__hexnan+0x12e>
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	603b      	str	r3, [r7, #0]
 800aba0:	2005      	movs	r0, #5
 800aba2:	b007      	add	sp, #28
 800aba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aba8:	3501      	adds	r5, #1
 800abaa:	2d08      	cmp	r5, #8
 800abac:	f10b 0b01 	add.w	fp, fp, #1
 800abb0:	dd06      	ble.n	800abc0 <__hexnan+0x100>
 800abb2:	4544      	cmp	r4, r8
 800abb4:	d9c1      	bls.n	800ab3a <__hexnan+0x7a>
 800abb6:	2300      	movs	r3, #0
 800abb8:	f844 3c04 	str.w	r3, [r4, #-4]
 800abbc:	2501      	movs	r5, #1
 800abbe:	3c04      	subs	r4, #4
 800abc0:	6822      	ldr	r2, [r4, #0]
 800abc2:	f000 000f 	and.w	r0, r0, #15
 800abc6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800abca:	6020      	str	r0, [r4, #0]
 800abcc:	e7b5      	b.n	800ab3a <__hexnan+0x7a>
 800abce:	2508      	movs	r5, #8
 800abd0:	e7b3      	b.n	800ab3a <__hexnan+0x7a>
 800abd2:	9b01      	ldr	r3, [sp, #4]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d0dd      	beq.n	800ab94 <__hexnan+0xd4>
 800abd8:	f1c3 0320 	rsb	r3, r3, #32
 800abdc:	f04f 32ff 	mov.w	r2, #4294967295
 800abe0:	40da      	lsrs	r2, r3
 800abe2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800abe6:	4013      	ands	r3, r2
 800abe8:	f846 3c04 	str.w	r3, [r6, #-4]
 800abec:	e7d2      	b.n	800ab94 <__hexnan+0xd4>
 800abee:	3f04      	subs	r7, #4
 800abf0:	e7d0      	b.n	800ab94 <__hexnan+0xd4>
 800abf2:	2004      	movs	r0, #4
 800abf4:	e7d5      	b.n	800aba2 <__hexnan+0xe2>

0800abf6 <__ascii_mbtowc>:
 800abf6:	b082      	sub	sp, #8
 800abf8:	b901      	cbnz	r1, 800abfc <__ascii_mbtowc+0x6>
 800abfa:	a901      	add	r1, sp, #4
 800abfc:	b142      	cbz	r2, 800ac10 <__ascii_mbtowc+0x1a>
 800abfe:	b14b      	cbz	r3, 800ac14 <__ascii_mbtowc+0x1e>
 800ac00:	7813      	ldrb	r3, [r2, #0]
 800ac02:	600b      	str	r3, [r1, #0]
 800ac04:	7812      	ldrb	r2, [r2, #0]
 800ac06:	1e10      	subs	r0, r2, #0
 800ac08:	bf18      	it	ne
 800ac0a:	2001      	movne	r0, #1
 800ac0c:	b002      	add	sp, #8
 800ac0e:	4770      	bx	lr
 800ac10:	4610      	mov	r0, r2
 800ac12:	e7fb      	b.n	800ac0c <__ascii_mbtowc+0x16>
 800ac14:	f06f 0001 	mvn.w	r0, #1
 800ac18:	e7f8      	b.n	800ac0c <__ascii_mbtowc+0x16>

0800ac1a <_realloc_r>:
 800ac1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac1e:	4680      	mov	r8, r0
 800ac20:	4615      	mov	r5, r2
 800ac22:	460c      	mov	r4, r1
 800ac24:	b921      	cbnz	r1, 800ac30 <_realloc_r+0x16>
 800ac26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac2a:	4611      	mov	r1, r2
 800ac2c:	f7fd be60 	b.w	80088f0 <_malloc_r>
 800ac30:	b92a      	cbnz	r2, 800ac3e <_realloc_r+0x24>
 800ac32:	f7fd fde9 	bl	8008808 <_free_r>
 800ac36:	2400      	movs	r4, #0
 800ac38:	4620      	mov	r0, r4
 800ac3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac3e:	f000 f840 	bl	800acc2 <_malloc_usable_size_r>
 800ac42:	4285      	cmp	r5, r0
 800ac44:	4606      	mov	r6, r0
 800ac46:	d802      	bhi.n	800ac4e <_realloc_r+0x34>
 800ac48:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ac4c:	d8f4      	bhi.n	800ac38 <_realloc_r+0x1e>
 800ac4e:	4629      	mov	r1, r5
 800ac50:	4640      	mov	r0, r8
 800ac52:	f7fd fe4d 	bl	80088f0 <_malloc_r>
 800ac56:	4607      	mov	r7, r0
 800ac58:	2800      	cmp	r0, #0
 800ac5a:	d0ec      	beq.n	800ac36 <_realloc_r+0x1c>
 800ac5c:	42b5      	cmp	r5, r6
 800ac5e:	462a      	mov	r2, r5
 800ac60:	4621      	mov	r1, r4
 800ac62:	bf28      	it	cs
 800ac64:	4632      	movcs	r2, r6
 800ac66:	f7ff fc45 	bl	800a4f4 <memcpy>
 800ac6a:	4621      	mov	r1, r4
 800ac6c:	4640      	mov	r0, r8
 800ac6e:	f7fd fdcb 	bl	8008808 <_free_r>
 800ac72:	463c      	mov	r4, r7
 800ac74:	e7e0      	b.n	800ac38 <_realloc_r+0x1e>

0800ac76 <__ascii_wctomb>:
 800ac76:	4603      	mov	r3, r0
 800ac78:	4608      	mov	r0, r1
 800ac7a:	b141      	cbz	r1, 800ac8e <__ascii_wctomb+0x18>
 800ac7c:	2aff      	cmp	r2, #255	@ 0xff
 800ac7e:	d904      	bls.n	800ac8a <__ascii_wctomb+0x14>
 800ac80:	228a      	movs	r2, #138	@ 0x8a
 800ac82:	601a      	str	r2, [r3, #0]
 800ac84:	f04f 30ff 	mov.w	r0, #4294967295
 800ac88:	4770      	bx	lr
 800ac8a:	700a      	strb	r2, [r1, #0]
 800ac8c:	2001      	movs	r0, #1
 800ac8e:	4770      	bx	lr

0800ac90 <fiprintf>:
 800ac90:	b40e      	push	{r1, r2, r3}
 800ac92:	b503      	push	{r0, r1, lr}
 800ac94:	4601      	mov	r1, r0
 800ac96:	ab03      	add	r3, sp, #12
 800ac98:	4805      	ldr	r0, [pc, #20]	@ (800acb0 <fiprintf+0x20>)
 800ac9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac9e:	6800      	ldr	r0, [r0, #0]
 800aca0:	9301      	str	r3, [sp, #4]
 800aca2:	f000 f83f 	bl	800ad24 <_vfiprintf_r>
 800aca6:	b002      	add	sp, #8
 800aca8:	f85d eb04 	ldr.w	lr, [sp], #4
 800acac:	b003      	add	sp, #12
 800acae:	4770      	bx	lr
 800acb0:	2000003c 	.word	0x2000003c

0800acb4 <abort>:
 800acb4:	b508      	push	{r3, lr}
 800acb6:	2006      	movs	r0, #6
 800acb8:	f000 fa08 	bl	800b0cc <raise>
 800acbc:	2001      	movs	r0, #1
 800acbe:	f7f8 fa22 	bl	8003106 <_exit>

0800acc2 <_malloc_usable_size_r>:
 800acc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acc6:	1f18      	subs	r0, r3, #4
 800acc8:	2b00      	cmp	r3, #0
 800acca:	bfbc      	itt	lt
 800accc:	580b      	ldrlt	r3, [r1, r0]
 800acce:	18c0      	addlt	r0, r0, r3
 800acd0:	4770      	bx	lr

0800acd2 <__sfputc_r>:
 800acd2:	6893      	ldr	r3, [r2, #8]
 800acd4:	3b01      	subs	r3, #1
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	b410      	push	{r4}
 800acda:	6093      	str	r3, [r2, #8]
 800acdc:	da08      	bge.n	800acf0 <__sfputc_r+0x1e>
 800acde:	6994      	ldr	r4, [r2, #24]
 800ace0:	42a3      	cmp	r3, r4
 800ace2:	db01      	blt.n	800ace8 <__sfputc_r+0x16>
 800ace4:	290a      	cmp	r1, #10
 800ace6:	d103      	bne.n	800acf0 <__sfputc_r+0x1e>
 800ace8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acec:	f000 b932 	b.w	800af54 <__swbuf_r>
 800acf0:	6813      	ldr	r3, [r2, #0]
 800acf2:	1c58      	adds	r0, r3, #1
 800acf4:	6010      	str	r0, [r2, #0]
 800acf6:	7019      	strb	r1, [r3, #0]
 800acf8:	4608      	mov	r0, r1
 800acfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acfe:	4770      	bx	lr

0800ad00 <__sfputs_r>:
 800ad00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad02:	4606      	mov	r6, r0
 800ad04:	460f      	mov	r7, r1
 800ad06:	4614      	mov	r4, r2
 800ad08:	18d5      	adds	r5, r2, r3
 800ad0a:	42ac      	cmp	r4, r5
 800ad0c:	d101      	bne.n	800ad12 <__sfputs_r+0x12>
 800ad0e:	2000      	movs	r0, #0
 800ad10:	e007      	b.n	800ad22 <__sfputs_r+0x22>
 800ad12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad16:	463a      	mov	r2, r7
 800ad18:	4630      	mov	r0, r6
 800ad1a:	f7ff ffda 	bl	800acd2 <__sfputc_r>
 800ad1e:	1c43      	adds	r3, r0, #1
 800ad20:	d1f3      	bne.n	800ad0a <__sfputs_r+0xa>
 800ad22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ad24 <_vfiprintf_r>:
 800ad24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad28:	460d      	mov	r5, r1
 800ad2a:	b09d      	sub	sp, #116	@ 0x74
 800ad2c:	4614      	mov	r4, r2
 800ad2e:	4698      	mov	r8, r3
 800ad30:	4606      	mov	r6, r0
 800ad32:	b118      	cbz	r0, 800ad3c <_vfiprintf_r+0x18>
 800ad34:	6a03      	ldr	r3, [r0, #32]
 800ad36:	b90b      	cbnz	r3, 800ad3c <_vfiprintf_r+0x18>
 800ad38:	f7fc fdfa 	bl	8007930 <__sinit>
 800ad3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad3e:	07d9      	lsls	r1, r3, #31
 800ad40:	d405      	bmi.n	800ad4e <_vfiprintf_r+0x2a>
 800ad42:	89ab      	ldrh	r3, [r5, #12]
 800ad44:	059a      	lsls	r2, r3, #22
 800ad46:	d402      	bmi.n	800ad4e <_vfiprintf_r+0x2a>
 800ad48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad4a:	f7fc ff08 	bl	8007b5e <__retarget_lock_acquire_recursive>
 800ad4e:	89ab      	ldrh	r3, [r5, #12]
 800ad50:	071b      	lsls	r3, r3, #28
 800ad52:	d501      	bpl.n	800ad58 <_vfiprintf_r+0x34>
 800ad54:	692b      	ldr	r3, [r5, #16]
 800ad56:	b99b      	cbnz	r3, 800ad80 <_vfiprintf_r+0x5c>
 800ad58:	4629      	mov	r1, r5
 800ad5a:	4630      	mov	r0, r6
 800ad5c:	f000 f938 	bl	800afd0 <__swsetup_r>
 800ad60:	b170      	cbz	r0, 800ad80 <_vfiprintf_r+0x5c>
 800ad62:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad64:	07dc      	lsls	r4, r3, #31
 800ad66:	d504      	bpl.n	800ad72 <_vfiprintf_r+0x4e>
 800ad68:	f04f 30ff 	mov.w	r0, #4294967295
 800ad6c:	b01d      	add	sp, #116	@ 0x74
 800ad6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad72:	89ab      	ldrh	r3, [r5, #12]
 800ad74:	0598      	lsls	r0, r3, #22
 800ad76:	d4f7      	bmi.n	800ad68 <_vfiprintf_r+0x44>
 800ad78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad7a:	f7fc fef1 	bl	8007b60 <__retarget_lock_release_recursive>
 800ad7e:	e7f3      	b.n	800ad68 <_vfiprintf_r+0x44>
 800ad80:	2300      	movs	r3, #0
 800ad82:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad84:	2320      	movs	r3, #32
 800ad86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ad8a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad8e:	2330      	movs	r3, #48	@ 0x30
 800ad90:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800af40 <_vfiprintf_r+0x21c>
 800ad94:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ad98:	f04f 0901 	mov.w	r9, #1
 800ad9c:	4623      	mov	r3, r4
 800ad9e:	469a      	mov	sl, r3
 800ada0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ada4:	b10a      	cbz	r2, 800adaa <_vfiprintf_r+0x86>
 800ada6:	2a25      	cmp	r2, #37	@ 0x25
 800ada8:	d1f9      	bne.n	800ad9e <_vfiprintf_r+0x7a>
 800adaa:	ebba 0b04 	subs.w	fp, sl, r4
 800adae:	d00b      	beq.n	800adc8 <_vfiprintf_r+0xa4>
 800adb0:	465b      	mov	r3, fp
 800adb2:	4622      	mov	r2, r4
 800adb4:	4629      	mov	r1, r5
 800adb6:	4630      	mov	r0, r6
 800adb8:	f7ff ffa2 	bl	800ad00 <__sfputs_r>
 800adbc:	3001      	adds	r0, #1
 800adbe:	f000 80a7 	beq.w	800af10 <_vfiprintf_r+0x1ec>
 800adc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800adc4:	445a      	add	r2, fp
 800adc6:	9209      	str	r2, [sp, #36]	@ 0x24
 800adc8:	f89a 3000 	ldrb.w	r3, [sl]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	f000 809f 	beq.w	800af10 <_vfiprintf_r+0x1ec>
 800add2:	2300      	movs	r3, #0
 800add4:	f04f 32ff 	mov.w	r2, #4294967295
 800add8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800addc:	f10a 0a01 	add.w	sl, sl, #1
 800ade0:	9304      	str	r3, [sp, #16]
 800ade2:	9307      	str	r3, [sp, #28]
 800ade4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ade8:	931a      	str	r3, [sp, #104]	@ 0x68
 800adea:	4654      	mov	r4, sl
 800adec:	2205      	movs	r2, #5
 800adee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adf2:	4853      	ldr	r0, [pc, #332]	@ (800af40 <_vfiprintf_r+0x21c>)
 800adf4:	f7f5 f9ec 	bl	80001d0 <memchr>
 800adf8:	9a04      	ldr	r2, [sp, #16]
 800adfa:	b9d8      	cbnz	r0, 800ae34 <_vfiprintf_r+0x110>
 800adfc:	06d1      	lsls	r1, r2, #27
 800adfe:	bf44      	itt	mi
 800ae00:	2320      	movmi	r3, #32
 800ae02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae06:	0713      	lsls	r3, r2, #28
 800ae08:	bf44      	itt	mi
 800ae0a:	232b      	movmi	r3, #43	@ 0x2b
 800ae0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae10:	f89a 3000 	ldrb.w	r3, [sl]
 800ae14:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae16:	d015      	beq.n	800ae44 <_vfiprintf_r+0x120>
 800ae18:	9a07      	ldr	r2, [sp, #28]
 800ae1a:	4654      	mov	r4, sl
 800ae1c:	2000      	movs	r0, #0
 800ae1e:	f04f 0c0a 	mov.w	ip, #10
 800ae22:	4621      	mov	r1, r4
 800ae24:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae28:	3b30      	subs	r3, #48	@ 0x30
 800ae2a:	2b09      	cmp	r3, #9
 800ae2c:	d94b      	bls.n	800aec6 <_vfiprintf_r+0x1a2>
 800ae2e:	b1b0      	cbz	r0, 800ae5e <_vfiprintf_r+0x13a>
 800ae30:	9207      	str	r2, [sp, #28]
 800ae32:	e014      	b.n	800ae5e <_vfiprintf_r+0x13a>
 800ae34:	eba0 0308 	sub.w	r3, r0, r8
 800ae38:	fa09 f303 	lsl.w	r3, r9, r3
 800ae3c:	4313      	orrs	r3, r2
 800ae3e:	9304      	str	r3, [sp, #16]
 800ae40:	46a2      	mov	sl, r4
 800ae42:	e7d2      	b.n	800adea <_vfiprintf_r+0xc6>
 800ae44:	9b03      	ldr	r3, [sp, #12]
 800ae46:	1d19      	adds	r1, r3, #4
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	9103      	str	r1, [sp, #12]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	bfbb      	ittet	lt
 800ae50:	425b      	neglt	r3, r3
 800ae52:	f042 0202 	orrlt.w	r2, r2, #2
 800ae56:	9307      	strge	r3, [sp, #28]
 800ae58:	9307      	strlt	r3, [sp, #28]
 800ae5a:	bfb8      	it	lt
 800ae5c:	9204      	strlt	r2, [sp, #16]
 800ae5e:	7823      	ldrb	r3, [r4, #0]
 800ae60:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae62:	d10a      	bne.n	800ae7a <_vfiprintf_r+0x156>
 800ae64:	7863      	ldrb	r3, [r4, #1]
 800ae66:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae68:	d132      	bne.n	800aed0 <_vfiprintf_r+0x1ac>
 800ae6a:	9b03      	ldr	r3, [sp, #12]
 800ae6c:	1d1a      	adds	r2, r3, #4
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	9203      	str	r2, [sp, #12]
 800ae72:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ae76:	3402      	adds	r4, #2
 800ae78:	9305      	str	r3, [sp, #20]
 800ae7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800af50 <_vfiprintf_r+0x22c>
 800ae7e:	7821      	ldrb	r1, [r4, #0]
 800ae80:	2203      	movs	r2, #3
 800ae82:	4650      	mov	r0, sl
 800ae84:	f7f5 f9a4 	bl	80001d0 <memchr>
 800ae88:	b138      	cbz	r0, 800ae9a <_vfiprintf_r+0x176>
 800ae8a:	9b04      	ldr	r3, [sp, #16]
 800ae8c:	eba0 000a 	sub.w	r0, r0, sl
 800ae90:	2240      	movs	r2, #64	@ 0x40
 800ae92:	4082      	lsls	r2, r0
 800ae94:	4313      	orrs	r3, r2
 800ae96:	3401      	adds	r4, #1
 800ae98:	9304      	str	r3, [sp, #16]
 800ae9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae9e:	4829      	ldr	r0, [pc, #164]	@ (800af44 <_vfiprintf_r+0x220>)
 800aea0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aea4:	2206      	movs	r2, #6
 800aea6:	f7f5 f993 	bl	80001d0 <memchr>
 800aeaa:	2800      	cmp	r0, #0
 800aeac:	d03f      	beq.n	800af2e <_vfiprintf_r+0x20a>
 800aeae:	4b26      	ldr	r3, [pc, #152]	@ (800af48 <_vfiprintf_r+0x224>)
 800aeb0:	bb1b      	cbnz	r3, 800aefa <_vfiprintf_r+0x1d6>
 800aeb2:	9b03      	ldr	r3, [sp, #12]
 800aeb4:	3307      	adds	r3, #7
 800aeb6:	f023 0307 	bic.w	r3, r3, #7
 800aeba:	3308      	adds	r3, #8
 800aebc:	9303      	str	r3, [sp, #12]
 800aebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aec0:	443b      	add	r3, r7
 800aec2:	9309      	str	r3, [sp, #36]	@ 0x24
 800aec4:	e76a      	b.n	800ad9c <_vfiprintf_r+0x78>
 800aec6:	fb0c 3202 	mla	r2, ip, r2, r3
 800aeca:	460c      	mov	r4, r1
 800aecc:	2001      	movs	r0, #1
 800aece:	e7a8      	b.n	800ae22 <_vfiprintf_r+0xfe>
 800aed0:	2300      	movs	r3, #0
 800aed2:	3401      	adds	r4, #1
 800aed4:	9305      	str	r3, [sp, #20]
 800aed6:	4619      	mov	r1, r3
 800aed8:	f04f 0c0a 	mov.w	ip, #10
 800aedc:	4620      	mov	r0, r4
 800aede:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aee2:	3a30      	subs	r2, #48	@ 0x30
 800aee4:	2a09      	cmp	r2, #9
 800aee6:	d903      	bls.n	800aef0 <_vfiprintf_r+0x1cc>
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d0c6      	beq.n	800ae7a <_vfiprintf_r+0x156>
 800aeec:	9105      	str	r1, [sp, #20]
 800aeee:	e7c4      	b.n	800ae7a <_vfiprintf_r+0x156>
 800aef0:	fb0c 2101 	mla	r1, ip, r1, r2
 800aef4:	4604      	mov	r4, r0
 800aef6:	2301      	movs	r3, #1
 800aef8:	e7f0      	b.n	800aedc <_vfiprintf_r+0x1b8>
 800aefa:	ab03      	add	r3, sp, #12
 800aefc:	9300      	str	r3, [sp, #0]
 800aefe:	462a      	mov	r2, r5
 800af00:	4b12      	ldr	r3, [pc, #72]	@ (800af4c <_vfiprintf_r+0x228>)
 800af02:	a904      	add	r1, sp, #16
 800af04:	4630      	mov	r0, r6
 800af06:	f7fb febb 	bl	8006c80 <_printf_float>
 800af0a:	4607      	mov	r7, r0
 800af0c:	1c78      	adds	r0, r7, #1
 800af0e:	d1d6      	bne.n	800aebe <_vfiprintf_r+0x19a>
 800af10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af12:	07d9      	lsls	r1, r3, #31
 800af14:	d405      	bmi.n	800af22 <_vfiprintf_r+0x1fe>
 800af16:	89ab      	ldrh	r3, [r5, #12]
 800af18:	059a      	lsls	r2, r3, #22
 800af1a:	d402      	bmi.n	800af22 <_vfiprintf_r+0x1fe>
 800af1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af1e:	f7fc fe1f 	bl	8007b60 <__retarget_lock_release_recursive>
 800af22:	89ab      	ldrh	r3, [r5, #12]
 800af24:	065b      	lsls	r3, r3, #25
 800af26:	f53f af1f 	bmi.w	800ad68 <_vfiprintf_r+0x44>
 800af2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af2c:	e71e      	b.n	800ad6c <_vfiprintf_r+0x48>
 800af2e:	ab03      	add	r3, sp, #12
 800af30:	9300      	str	r3, [sp, #0]
 800af32:	462a      	mov	r2, r5
 800af34:	4b05      	ldr	r3, [pc, #20]	@ (800af4c <_vfiprintf_r+0x228>)
 800af36:	a904      	add	r1, sp, #16
 800af38:	4630      	mov	r0, r6
 800af3a:	f7fc f939 	bl	80071b0 <_printf_i>
 800af3e:	e7e4      	b.n	800af0a <_vfiprintf_r+0x1e6>
 800af40:	0800cc99 	.word	0x0800cc99
 800af44:	0800cca3 	.word	0x0800cca3
 800af48:	08006c81 	.word	0x08006c81
 800af4c:	0800ad01 	.word	0x0800ad01
 800af50:	0800cc9f 	.word	0x0800cc9f

0800af54 <__swbuf_r>:
 800af54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af56:	460e      	mov	r6, r1
 800af58:	4614      	mov	r4, r2
 800af5a:	4605      	mov	r5, r0
 800af5c:	b118      	cbz	r0, 800af66 <__swbuf_r+0x12>
 800af5e:	6a03      	ldr	r3, [r0, #32]
 800af60:	b90b      	cbnz	r3, 800af66 <__swbuf_r+0x12>
 800af62:	f7fc fce5 	bl	8007930 <__sinit>
 800af66:	69a3      	ldr	r3, [r4, #24]
 800af68:	60a3      	str	r3, [r4, #8]
 800af6a:	89a3      	ldrh	r3, [r4, #12]
 800af6c:	071a      	lsls	r2, r3, #28
 800af6e:	d501      	bpl.n	800af74 <__swbuf_r+0x20>
 800af70:	6923      	ldr	r3, [r4, #16]
 800af72:	b943      	cbnz	r3, 800af86 <__swbuf_r+0x32>
 800af74:	4621      	mov	r1, r4
 800af76:	4628      	mov	r0, r5
 800af78:	f000 f82a 	bl	800afd0 <__swsetup_r>
 800af7c:	b118      	cbz	r0, 800af86 <__swbuf_r+0x32>
 800af7e:	f04f 37ff 	mov.w	r7, #4294967295
 800af82:	4638      	mov	r0, r7
 800af84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af86:	6823      	ldr	r3, [r4, #0]
 800af88:	6922      	ldr	r2, [r4, #16]
 800af8a:	1a98      	subs	r0, r3, r2
 800af8c:	6963      	ldr	r3, [r4, #20]
 800af8e:	b2f6      	uxtb	r6, r6
 800af90:	4283      	cmp	r3, r0
 800af92:	4637      	mov	r7, r6
 800af94:	dc05      	bgt.n	800afa2 <__swbuf_r+0x4e>
 800af96:	4621      	mov	r1, r4
 800af98:	4628      	mov	r0, r5
 800af9a:	f7ff fa47 	bl	800a42c <_fflush_r>
 800af9e:	2800      	cmp	r0, #0
 800afa0:	d1ed      	bne.n	800af7e <__swbuf_r+0x2a>
 800afa2:	68a3      	ldr	r3, [r4, #8]
 800afa4:	3b01      	subs	r3, #1
 800afa6:	60a3      	str	r3, [r4, #8]
 800afa8:	6823      	ldr	r3, [r4, #0]
 800afaa:	1c5a      	adds	r2, r3, #1
 800afac:	6022      	str	r2, [r4, #0]
 800afae:	701e      	strb	r6, [r3, #0]
 800afb0:	6962      	ldr	r2, [r4, #20]
 800afb2:	1c43      	adds	r3, r0, #1
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d004      	beq.n	800afc2 <__swbuf_r+0x6e>
 800afb8:	89a3      	ldrh	r3, [r4, #12]
 800afba:	07db      	lsls	r3, r3, #31
 800afbc:	d5e1      	bpl.n	800af82 <__swbuf_r+0x2e>
 800afbe:	2e0a      	cmp	r6, #10
 800afc0:	d1df      	bne.n	800af82 <__swbuf_r+0x2e>
 800afc2:	4621      	mov	r1, r4
 800afc4:	4628      	mov	r0, r5
 800afc6:	f7ff fa31 	bl	800a42c <_fflush_r>
 800afca:	2800      	cmp	r0, #0
 800afcc:	d0d9      	beq.n	800af82 <__swbuf_r+0x2e>
 800afce:	e7d6      	b.n	800af7e <__swbuf_r+0x2a>

0800afd0 <__swsetup_r>:
 800afd0:	b538      	push	{r3, r4, r5, lr}
 800afd2:	4b29      	ldr	r3, [pc, #164]	@ (800b078 <__swsetup_r+0xa8>)
 800afd4:	4605      	mov	r5, r0
 800afd6:	6818      	ldr	r0, [r3, #0]
 800afd8:	460c      	mov	r4, r1
 800afda:	b118      	cbz	r0, 800afe4 <__swsetup_r+0x14>
 800afdc:	6a03      	ldr	r3, [r0, #32]
 800afde:	b90b      	cbnz	r3, 800afe4 <__swsetup_r+0x14>
 800afe0:	f7fc fca6 	bl	8007930 <__sinit>
 800afe4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afe8:	0719      	lsls	r1, r3, #28
 800afea:	d422      	bmi.n	800b032 <__swsetup_r+0x62>
 800afec:	06da      	lsls	r2, r3, #27
 800afee:	d407      	bmi.n	800b000 <__swsetup_r+0x30>
 800aff0:	2209      	movs	r2, #9
 800aff2:	602a      	str	r2, [r5, #0]
 800aff4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aff8:	81a3      	strh	r3, [r4, #12]
 800affa:	f04f 30ff 	mov.w	r0, #4294967295
 800affe:	e033      	b.n	800b068 <__swsetup_r+0x98>
 800b000:	0758      	lsls	r0, r3, #29
 800b002:	d512      	bpl.n	800b02a <__swsetup_r+0x5a>
 800b004:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b006:	b141      	cbz	r1, 800b01a <__swsetup_r+0x4a>
 800b008:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b00c:	4299      	cmp	r1, r3
 800b00e:	d002      	beq.n	800b016 <__swsetup_r+0x46>
 800b010:	4628      	mov	r0, r5
 800b012:	f7fd fbf9 	bl	8008808 <_free_r>
 800b016:	2300      	movs	r3, #0
 800b018:	6363      	str	r3, [r4, #52]	@ 0x34
 800b01a:	89a3      	ldrh	r3, [r4, #12]
 800b01c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b020:	81a3      	strh	r3, [r4, #12]
 800b022:	2300      	movs	r3, #0
 800b024:	6063      	str	r3, [r4, #4]
 800b026:	6923      	ldr	r3, [r4, #16]
 800b028:	6023      	str	r3, [r4, #0]
 800b02a:	89a3      	ldrh	r3, [r4, #12]
 800b02c:	f043 0308 	orr.w	r3, r3, #8
 800b030:	81a3      	strh	r3, [r4, #12]
 800b032:	6923      	ldr	r3, [r4, #16]
 800b034:	b94b      	cbnz	r3, 800b04a <__swsetup_r+0x7a>
 800b036:	89a3      	ldrh	r3, [r4, #12]
 800b038:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b03c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b040:	d003      	beq.n	800b04a <__swsetup_r+0x7a>
 800b042:	4621      	mov	r1, r4
 800b044:	4628      	mov	r0, r5
 800b046:	f000 f883 	bl	800b150 <__smakebuf_r>
 800b04a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b04e:	f013 0201 	ands.w	r2, r3, #1
 800b052:	d00a      	beq.n	800b06a <__swsetup_r+0x9a>
 800b054:	2200      	movs	r2, #0
 800b056:	60a2      	str	r2, [r4, #8]
 800b058:	6962      	ldr	r2, [r4, #20]
 800b05a:	4252      	negs	r2, r2
 800b05c:	61a2      	str	r2, [r4, #24]
 800b05e:	6922      	ldr	r2, [r4, #16]
 800b060:	b942      	cbnz	r2, 800b074 <__swsetup_r+0xa4>
 800b062:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b066:	d1c5      	bne.n	800aff4 <__swsetup_r+0x24>
 800b068:	bd38      	pop	{r3, r4, r5, pc}
 800b06a:	0799      	lsls	r1, r3, #30
 800b06c:	bf58      	it	pl
 800b06e:	6962      	ldrpl	r2, [r4, #20]
 800b070:	60a2      	str	r2, [r4, #8]
 800b072:	e7f4      	b.n	800b05e <__swsetup_r+0x8e>
 800b074:	2000      	movs	r0, #0
 800b076:	e7f7      	b.n	800b068 <__swsetup_r+0x98>
 800b078:	2000003c 	.word	0x2000003c

0800b07c <_raise_r>:
 800b07c:	291f      	cmp	r1, #31
 800b07e:	b538      	push	{r3, r4, r5, lr}
 800b080:	4605      	mov	r5, r0
 800b082:	460c      	mov	r4, r1
 800b084:	d904      	bls.n	800b090 <_raise_r+0x14>
 800b086:	2316      	movs	r3, #22
 800b088:	6003      	str	r3, [r0, #0]
 800b08a:	f04f 30ff 	mov.w	r0, #4294967295
 800b08e:	bd38      	pop	{r3, r4, r5, pc}
 800b090:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b092:	b112      	cbz	r2, 800b09a <_raise_r+0x1e>
 800b094:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b098:	b94b      	cbnz	r3, 800b0ae <_raise_r+0x32>
 800b09a:	4628      	mov	r0, r5
 800b09c:	f000 f830 	bl	800b100 <_getpid_r>
 800b0a0:	4622      	mov	r2, r4
 800b0a2:	4601      	mov	r1, r0
 800b0a4:	4628      	mov	r0, r5
 800b0a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0aa:	f000 b817 	b.w	800b0dc <_kill_r>
 800b0ae:	2b01      	cmp	r3, #1
 800b0b0:	d00a      	beq.n	800b0c8 <_raise_r+0x4c>
 800b0b2:	1c59      	adds	r1, r3, #1
 800b0b4:	d103      	bne.n	800b0be <_raise_r+0x42>
 800b0b6:	2316      	movs	r3, #22
 800b0b8:	6003      	str	r3, [r0, #0]
 800b0ba:	2001      	movs	r0, #1
 800b0bc:	e7e7      	b.n	800b08e <_raise_r+0x12>
 800b0be:	2100      	movs	r1, #0
 800b0c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b0c4:	4620      	mov	r0, r4
 800b0c6:	4798      	blx	r3
 800b0c8:	2000      	movs	r0, #0
 800b0ca:	e7e0      	b.n	800b08e <_raise_r+0x12>

0800b0cc <raise>:
 800b0cc:	4b02      	ldr	r3, [pc, #8]	@ (800b0d8 <raise+0xc>)
 800b0ce:	4601      	mov	r1, r0
 800b0d0:	6818      	ldr	r0, [r3, #0]
 800b0d2:	f7ff bfd3 	b.w	800b07c <_raise_r>
 800b0d6:	bf00      	nop
 800b0d8:	2000003c 	.word	0x2000003c

0800b0dc <_kill_r>:
 800b0dc:	b538      	push	{r3, r4, r5, lr}
 800b0de:	4d07      	ldr	r5, [pc, #28]	@ (800b0fc <_kill_r+0x20>)
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	4604      	mov	r4, r0
 800b0e4:	4608      	mov	r0, r1
 800b0e6:	4611      	mov	r1, r2
 800b0e8:	602b      	str	r3, [r5, #0]
 800b0ea:	f7f7 fffc 	bl	80030e6 <_kill>
 800b0ee:	1c43      	adds	r3, r0, #1
 800b0f0:	d102      	bne.n	800b0f8 <_kill_r+0x1c>
 800b0f2:	682b      	ldr	r3, [r5, #0]
 800b0f4:	b103      	cbz	r3, 800b0f8 <_kill_r+0x1c>
 800b0f6:	6023      	str	r3, [r4, #0]
 800b0f8:	bd38      	pop	{r3, r4, r5, pc}
 800b0fa:	bf00      	nop
 800b0fc:	20000668 	.word	0x20000668

0800b100 <_getpid_r>:
 800b100:	f7f7 bfe9 	b.w	80030d6 <_getpid>

0800b104 <__swhatbuf_r>:
 800b104:	b570      	push	{r4, r5, r6, lr}
 800b106:	460c      	mov	r4, r1
 800b108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b10c:	2900      	cmp	r1, #0
 800b10e:	b096      	sub	sp, #88	@ 0x58
 800b110:	4615      	mov	r5, r2
 800b112:	461e      	mov	r6, r3
 800b114:	da0d      	bge.n	800b132 <__swhatbuf_r+0x2e>
 800b116:	89a3      	ldrh	r3, [r4, #12]
 800b118:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b11c:	f04f 0100 	mov.w	r1, #0
 800b120:	bf14      	ite	ne
 800b122:	2340      	movne	r3, #64	@ 0x40
 800b124:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b128:	2000      	movs	r0, #0
 800b12a:	6031      	str	r1, [r6, #0]
 800b12c:	602b      	str	r3, [r5, #0]
 800b12e:	b016      	add	sp, #88	@ 0x58
 800b130:	bd70      	pop	{r4, r5, r6, pc}
 800b132:	466a      	mov	r2, sp
 800b134:	f000 f848 	bl	800b1c8 <_fstat_r>
 800b138:	2800      	cmp	r0, #0
 800b13a:	dbec      	blt.n	800b116 <__swhatbuf_r+0x12>
 800b13c:	9901      	ldr	r1, [sp, #4]
 800b13e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b142:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b146:	4259      	negs	r1, r3
 800b148:	4159      	adcs	r1, r3
 800b14a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b14e:	e7eb      	b.n	800b128 <__swhatbuf_r+0x24>

0800b150 <__smakebuf_r>:
 800b150:	898b      	ldrh	r3, [r1, #12]
 800b152:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b154:	079d      	lsls	r5, r3, #30
 800b156:	4606      	mov	r6, r0
 800b158:	460c      	mov	r4, r1
 800b15a:	d507      	bpl.n	800b16c <__smakebuf_r+0x1c>
 800b15c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b160:	6023      	str	r3, [r4, #0]
 800b162:	6123      	str	r3, [r4, #16]
 800b164:	2301      	movs	r3, #1
 800b166:	6163      	str	r3, [r4, #20]
 800b168:	b003      	add	sp, #12
 800b16a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b16c:	ab01      	add	r3, sp, #4
 800b16e:	466a      	mov	r2, sp
 800b170:	f7ff ffc8 	bl	800b104 <__swhatbuf_r>
 800b174:	9f00      	ldr	r7, [sp, #0]
 800b176:	4605      	mov	r5, r0
 800b178:	4639      	mov	r1, r7
 800b17a:	4630      	mov	r0, r6
 800b17c:	f7fd fbb8 	bl	80088f0 <_malloc_r>
 800b180:	b948      	cbnz	r0, 800b196 <__smakebuf_r+0x46>
 800b182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b186:	059a      	lsls	r2, r3, #22
 800b188:	d4ee      	bmi.n	800b168 <__smakebuf_r+0x18>
 800b18a:	f023 0303 	bic.w	r3, r3, #3
 800b18e:	f043 0302 	orr.w	r3, r3, #2
 800b192:	81a3      	strh	r3, [r4, #12]
 800b194:	e7e2      	b.n	800b15c <__smakebuf_r+0xc>
 800b196:	89a3      	ldrh	r3, [r4, #12]
 800b198:	6020      	str	r0, [r4, #0]
 800b19a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b19e:	81a3      	strh	r3, [r4, #12]
 800b1a0:	9b01      	ldr	r3, [sp, #4]
 800b1a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b1a6:	b15b      	cbz	r3, 800b1c0 <__smakebuf_r+0x70>
 800b1a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1ac:	4630      	mov	r0, r6
 800b1ae:	f000 f81d 	bl	800b1ec <_isatty_r>
 800b1b2:	b128      	cbz	r0, 800b1c0 <__smakebuf_r+0x70>
 800b1b4:	89a3      	ldrh	r3, [r4, #12]
 800b1b6:	f023 0303 	bic.w	r3, r3, #3
 800b1ba:	f043 0301 	orr.w	r3, r3, #1
 800b1be:	81a3      	strh	r3, [r4, #12]
 800b1c0:	89a3      	ldrh	r3, [r4, #12]
 800b1c2:	431d      	orrs	r5, r3
 800b1c4:	81a5      	strh	r5, [r4, #12]
 800b1c6:	e7cf      	b.n	800b168 <__smakebuf_r+0x18>

0800b1c8 <_fstat_r>:
 800b1c8:	b538      	push	{r3, r4, r5, lr}
 800b1ca:	4d07      	ldr	r5, [pc, #28]	@ (800b1e8 <_fstat_r+0x20>)
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	4604      	mov	r4, r0
 800b1d0:	4608      	mov	r0, r1
 800b1d2:	4611      	mov	r1, r2
 800b1d4:	602b      	str	r3, [r5, #0]
 800b1d6:	f7f7 ffe6 	bl	80031a6 <_fstat>
 800b1da:	1c43      	adds	r3, r0, #1
 800b1dc:	d102      	bne.n	800b1e4 <_fstat_r+0x1c>
 800b1de:	682b      	ldr	r3, [r5, #0]
 800b1e0:	b103      	cbz	r3, 800b1e4 <_fstat_r+0x1c>
 800b1e2:	6023      	str	r3, [r4, #0]
 800b1e4:	bd38      	pop	{r3, r4, r5, pc}
 800b1e6:	bf00      	nop
 800b1e8:	20000668 	.word	0x20000668

0800b1ec <_isatty_r>:
 800b1ec:	b538      	push	{r3, r4, r5, lr}
 800b1ee:	4d06      	ldr	r5, [pc, #24]	@ (800b208 <_isatty_r+0x1c>)
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	4604      	mov	r4, r0
 800b1f4:	4608      	mov	r0, r1
 800b1f6:	602b      	str	r3, [r5, #0]
 800b1f8:	f7f7 ffe5 	bl	80031c6 <_isatty>
 800b1fc:	1c43      	adds	r3, r0, #1
 800b1fe:	d102      	bne.n	800b206 <_isatty_r+0x1a>
 800b200:	682b      	ldr	r3, [r5, #0]
 800b202:	b103      	cbz	r3, 800b206 <_isatty_r+0x1a>
 800b204:	6023      	str	r3, [r4, #0]
 800b206:	bd38      	pop	{r3, r4, r5, pc}
 800b208:	20000668 	.word	0x20000668

0800b20c <asin>:
 800b20c:	b538      	push	{r3, r4, r5, lr}
 800b20e:	ed2d 8b02 	vpush	{d8}
 800b212:	ec55 4b10 	vmov	r4, r5, d0
 800b216:	f000 fb17 	bl	800b848 <__ieee754_asin>
 800b21a:	4622      	mov	r2, r4
 800b21c:	462b      	mov	r3, r5
 800b21e:	4620      	mov	r0, r4
 800b220:	4629      	mov	r1, r5
 800b222:	eeb0 8a40 	vmov.f32	s16, s0
 800b226:	eef0 8a60 	vmov.f32	s17, s1
 800b22a:	f7f5 fc7f 	bl	8000b2c <__aeabi_dcmpun>
 800b22e:	b9a8      	cbnz	r0, 800b25c <asin+0x50>
 800b230:	ec45 4b10 	vmov	d0, r4, r5
 800b234:	f000 f84a 	bl	800b2cc <fabs>
 800b238:	4b0c      	ldr	r3, [pc, #48]	@ (800b26c <asin+0x60>)
 800b23a:	ec51 0b10 	vmov	r0, r1, d0
 800b23e:	2200      	movs	r2, #0
 800b240:	f7f5 fc6a 	bl	8000b18 <__aeabi_dcmpgt>
 800b244:	b150      	cbz	r0, 800b25c <asin+0x50>
 800b246:	f7fc fc5f 	bl	8007b08 <__errno>
 800b24a:	ecbd 8b02 	vpop	{d8}
 800b24e:	2321      	movs	r3, #33	@ 0x21
 800b250:	6003      	str	r3, [r0, #0]
 800b252:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b256:	4806      	ldr	r0, [pc, #24]	@ (800b270 <asin+0x64>)
 800b258:	f7ff b95a 	b.w	800a510 <nan>
 800b25c:	eeb0 0a48 	vmov.f32	s0, s16
 800b260:	eef0 0a68 	vmov.f32	s1, s17
 800b264:	ecbd 8b02 	vpop	{d8}
 800b268:	bd38      	pop	{r3, r4, r5, pc}
 800b26a:	bf00      	nop
 800b26c:	3ff00000 	.word	0x3ff00000
 800b270:	0800cced 	.word	0x0800cced

0800b274 <sqrt>:
 800b274:	b538      	push	{r3, r4, r5, lr}
 800b276:	ed2d 8b02 	vpush	{d8}
 800b27a:	ec55 4b10 	vmov	r4, r5, d0
 800b27e:	f000 f883 	bl	800b388 <__ieee754_sqrt>
 800b282:	4622      	mov	r2, r4
 800b284:	462b      	mov	r3, r5
 800b286:	4620      	mov	r0, r4
 800b288:	4629      	mov	r1, r5
 800b28a:	eeb0 8a40 	vmov.f32	s16, s0
 800b28e:	eef0 8a60 	vmov.f32	s17, s1
 800b292:	f7f5 fc4b 	bl	8000b2c <__aeabi_dcmpun>
 800b296:	b990      	cbnz	r0, 800b2be <sqrt+0x4a>
 800b298:	2200      	movs	r2, #0
 800b29a:	2300      	movs	r3, #0
 800b29c:	4620      	mov	r0, r4
 800b29e:	4629      	mov	r1, r5
 800b2a0:	f7f5 fc1c 	bl	8000adc <__aeabi_dcmplt>
 800b2a4:	b158      	cbz	r0, 800b2be <sqrt+0x4a>
 800b2a6:	f7fc fc2f 	bl	8007b08 <__errno>
 800b2aa:	2321      	movs	r3, #33	@ 0x21
 800b2ac:	6003      	str	r3, [r0, #0]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	4610      	mov	r0, r2
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	f7f5 fac9 	bl	800084c <__aeabi_ddiv>
 800b2ba:	ec41 0b18 	vmov	d8, r0, r1
 800b2be:	eeb0 0a48 	vmov.f32	s0, s16
 800b2c2:	eef0 0a68 	vmov.f32	s1, s17
 800b2c6:	ecbd 8b02 	vpop	{d8}
 800b2ca:	bd38      	pop	{r3, r4, r5, pc}

0800b2cc <fabs>:
 800b2cc:	ec51 0b10 	vmov	r0, r1, d0
 800b2d0:	4602      	mov	r2, r0
 800b2d2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b2d6:	ec43 2b10 	vmov	d0, r2, r3
 800b2da:	4770      	bx	lr
 800b2dc:	0000      	movs	r0, r0
	...

0800b2e0 <sin>:
 800b2e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b2e2:	ec53 2b10 	vmov	r2, r3, d0
 800b2e6:	4826      	ldr	r0, [pc, #152]	@ (800b380 <sin+0xa0>)
 800b2e8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b2ec:	4281      	cmp	r1, r0
 800b2ee:	d807      	bhi.n	800b300 <sin+0x20>
 800b2f0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800b378 <sin+0x98>
 800b2f4:	2000      	movs	r0, #0
 800b2f6:	b005      	add	sp, #20
 800b2f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2fc:	f000 b9e8 	b.w	800b6d0 <__kernel_sin>
 800b300:	4820      	ldr	r0, [pc, #128]	@ (800b384 <sin+0xa4>)
 800b302:	4281      	cmp	r1, r0
 800b304:	d908      	bls.n	800b318 <sin+0x38>
 800b306:	4610      	mov	r0, r2
 800b308:	4619      	mov	r1, r3
 800b30a:	f7f4 ffbd 	bl	8000288 <__aeabi_dsub>
 800b30e:	ec41 0b10 	vmov	d0, r0, r1
 800b312:	b005      	add	sp, #20
 800b314:	f85d fb04 	ldr.w	pc, [sp], #4
 800b318:	4668      	mov	r0, sp
 800b31a:	f000 fc99 	bl	800bc50 <__ieee754_rem_pio2>
 800b31e:	f000 0003 	and.w	r0, r0, #3
 800b322:	2801      	cmp	r0, #1
 800b324:	d00c      	beq.n	800b340 <sin+0x60>
 800b326:	2802      	cmp	r0, #2
 800b328:	d011      	beq.n	800b34e <sin+0x6e>
 800b32a:	b9e8      	cbnz	r0, 800b368 <sin+0x88>
 800b32c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b330:	ed9d 0b00 	vldr	d0, [sp]
 800b334:	2001      	movs	r0, #1
 800b336:	f000 f9cb 	bl	800b6d0 <__kernel_sin>
 800b33a:	ec51 0b10 	vmov	r0, r1, d0
 800b33e:	e7e6      	b.n	800b30e <sin+0x2e>
 800b340:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b344:	ed9d 0b00 	vldr	d0, [sp]
 800b348:	f000 f8fa 	bl	800b540 <__kernel_cos>
 800b34c:	e7f5      	b.n	800b33a <sin+0x5a>
 800b34e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b352:	ed9d 0b00 	vldr	d0, [sp]
 800b356:	2001      	movs	r0, #1
 800b358:	f000 f9ba 	bl	800b6d0 <__kernel_sin>
 800b35c:	ec53 2b10 	vmov	r2, r3, d0
 800b360:	4610      	mov	r0, r2
 800b362:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b366:	e7d2      	b.n	800b30e <sin+0x2e>
 800b368:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b36c:	ed9d 0b00 	vldr	d0, [sp]
 800b370:	f000 f8e6 	bl	800b540 <__kernel_cos>
 800b374:	e7f2      	b.n	800b35c <sin+0x7c>
 800b376:	bf00      	nop
	...
 800b380:	3fe921fb 	.word	0x3fe921fb
 800b384:	7fefffff 	.word	0x7fefffff

0800b388 <__ieee754_sqrt>:
 800b388:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b38c:	4a68      	ldr	r2, [pc, #416]	@ (800b530 <__ieee754_sqrt+0x1a8>)
 800b38e:	ec55 4b10 	vmov	r4, r5, d0
 800b392:	43aa      	bics	r2, r5
 800b394:	462b      	mov	r3, r5
 800b396:	4621      	mov	r1, r4
 800b398:	d110      	bne.n	800b3bc <__ieee754_sqrt+0x34>
 800b39a:	4622      	mov	r2, r4
 800b39c:	4620      	mov	r0, r4
 800b39e:	4629      	mov	r1, r5
 800b3a0:	f7f5 f92a 	bl	80005f8 <__aeabi_dmul>
 800b3a4:	4602      	mov	r2, r0
 800b3a6:	460b      	mov	r3, r1
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	4629      	mov	r1, r5
 800b3ac:	f7f4 ff6e 	bl	800028c <__adddf3>
 800b3b0:	4604      	mov	r4, r0
 800b3b2:	460d      	mov	r5, r1
 800b3b4:	ec45 4b10 	vmov	d0, r4, r5
 800b3b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3bc:	2d00      	cmp	r5, #0
 800b3be:	dc0e      	bgt.n	800b3de <__ieee754_sqrt+0x56>
 800b3c0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800b3c4:	4322      	orrs	r2, r4
 800b3c6:	d0f5      	beq.n	800b3b4 <__ieee754_sqrt+0x2c>
 800b3c8:	b19d      	cbz	r5, 800b3f2 <__ieee754_sqrt+0x6a>
 800b3ca:	4622      	mov	r2, r4
 800b3cc:	4620      	mov	r0, r4
 800b3ce:	4629      	mov	r1, r5
 800b3d0:	f7f4 ff5a 	bl	8000288 <__aeabi_dsub>
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	460b      	mov	r3, r1
 800b3d8:	f7f5 fa38 	bl	800084c <__aeabi_ddiv>
 800b3dc:	e7e8      	b.n	800b3b0 <__ieee754_sqrt+0x28>
 800b3de:	152a      	asrs	r2, r5, #20
 800b3e0:	d115      	bne.n	800b40e <__ieee754_sqrt+0x86>
 800b3e2:	2000      	movs	r0, #0
 800b3e4:	e009      	b.n	800b3fa <__ieee754_sqrt+0x72>
 800b3e6:	0acb      	lsrs	r3, r1, #11
 800b3e8:	3a15      	subs	r2, #21
 800b3ea:	0549      	lsls	r1, r1, #21
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d0fa      	beq.n	800b3e6 <__ieee754_sqrt+0x5e>
 800b3f0:	e7f7      	b.n	800b3e2 <__ieee754_sqrt+0x5a>
 800b3f2:	462a      	mov	r2, r5
 800b3f4:	e7fa      	b.n	800b3ec <__ieee754_sqrt+0x64>
 800b3f6:	005b      	lsls	r3, r3, #1
 800b3f8:	3001      	adds	r0, #1
 800b3fa:	02dc      	lsls	r4, r3, #11
 800b3fc:	d5fb      	bpl.n	800b3f6 <__ieee754_sqrt+0x6e>
 800b3fe:	1e44      	subs	r4, r0, #1
 800b400:	1b12      	subs	r2, r2, r4
 800b402:	f1c0 0420 	rsb	r4, r0, #32
 800b406:	fa21 f404 	lsr.w	r4, r1, r4
 800b40a:	4323      	orrs	r3, r4
 800b40c:	4081      	lsls	r1, r0
 800b40e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b412:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800b416:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b41a:	07d2      	lsls	r2, r2, #31
 800b41c:	bf5c      	itt	pl
 800b41e:	005b      	lslpl	r3, r3, #1
 800b420:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800b424:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b428:	bf58      	it	pl
 800b42a:	0049      	lslpl	r1, r1, #1
 800b42c:	2600      	movs	r6, #0
 800b42e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800b432:	106d      	asrs	r5, r5, #1
 800b434:	0049      	lsls	r1, r1, #1
 800b436:	2016      	movs	r0, #22
 800b438:	4632      	mov	r2, r6
 800b43a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800b43e:	1917      	adds	r7, r2, r4
 800b440:	429f      	cmp	r7, r3
 800b442:	bfde      	ittt	le
 800b444:	193a      	addle	r2, r7, r4
 800b446:	1bdb      	suble	r3, r3, r7
 800b448:	1936      	addle	r6, r6, r4
 800b44a:	0fcf      	lsrs	r7, r1, #31
 800b44c:	3801      	subs	r0, #1
 800b44e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800b452:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b456:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b45a:	d1f0      	bne.n	800b43e <__ieee754_sqrt+0xb6>
 800b45c:	4604      	mov	r4, r0
 800b45e:	2720      	movs	r7, #32
 800b460:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800b464:	429a      	cmp	r2, r3
 800b466:	eb00 0e0c 	add.w	lr, r0, ip
 800b46a:	db02      	blt.n	800b472 <__ieee754_sqrt+0xea>
 800b46c:	d113      	bne.n	800b496 <__ieee754_sqrt+0x10e>
 800b46e:	458e      	cmp	lr, r1
 800b470:	d811      	bhi.n	800b496 <__ieee754_sqrt+0x10e>
 800b472:	f1be 0f00 	cmp.w	lr, #0
 800b476:	eb0e 000c 	add.w	r0, lr, ip
 800b47a:	da42      	bge.n	800b502 <__ieee754_sqrt+0x17a>
 800b47c:	2800      	cmp	r0, #0
 800b47e:	db40      	blt.n	800b502 <__ieee754_sqrt+0x17a>
 800b480:	f102 0801 	add.w	r8, r2, #1
 800b484:	1a9b      	subs	r3, r3, r2
 800b486:	458e      	cmp	lr, r1
 800b488:	bf88      	it	hi
 800b48a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b48e:	eba1 010e 	sub.w	r1, r1, lr
 800b492:	4464      	add	r4, ip
 800b494:	4642      	mov	r2, r8
 800b496:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800b49a:	3f01      	subs	r7, #1
 800b49c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800b4a0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b4a4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800b4a8:	d1dc      	bne.n	800b464 <__ieee754_sqrt+0xdc>
 800b4aa:	4319      	orrs	r1, r3
 800b4ac:	d01b      	beq.n	800b4e6 <__ieee754_sqrt+0x15e>
 800b4ae:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800b534 <__ieee754_sqrt+0x1ac>
 800b4b2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800b538 <__ieee754_sqrt+0x1b0>
 800b4b6:	e9da 0100 	ldrd	r0, r1, [sl]
 800b4ba:	e9db 2300 	ldrd	r2, r3, [fp]
 800b4be:	f7f4 fee3 	bl	8000288 <__aeabi_dsub>
 800b4c2:	e9da 8900 	ldrd	r8, r9, [sl]
 800b4c6:	4602      	mov	r2, r0
 800b4c8:	460b      	mov	r3, r1
 800b4ca:	4640      	mov	r0, r8
 800b4cc:	4649      	mov	r1, r9
 800b4ce:	f7f5 fb0f 	bl	8000af0 <__aeabi_dcmple>
 800b4d2:	b140      	cbz	r0, 800b4e6 <__ieee754_sqrt+0x15e>
 800b4d4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b4d8:	e9da 0100 	ldrd	r0, r1, [sl]
 800b4dc:	e9db 2300 	ldrd	r2, r3, [fp]
 800b4e0:	d111      	bne.n	800b506 <__ieee754_sqrt+0x17e>
 800b4e2:	3601      	adds	r6, #1
 800b4e4:	463c      	mov	r4, r7
 800b4e6:	1072      	asrs	r2, r6, #1
 800b4e8:	0863      	lsrs	r3, r4, #1
 800b4ea:	07f1      	lsls	r1, r6, #31
 800b4ec:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800b4f0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800b4f4:	bf48      	it	mi
 800b4f6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800b4fa:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800b4fe:	4618      	mov	r0, r3
 800b500:	e756      	b.n	800b3b0 <__ieee754_sqrt+0x28>
 800b502:	4690      	mov	r8, r2
 800b504:	e7be      	b.n	800b484 <__ieee754_sqrt+0xfc>
 800b506:	f7f4 fec1 	bl	800028c <__adddf3>
 800b50a:	e9da 8900 	ldrd	r8, r9, [sl]
 800b50e:	4602      	mov	r2, r0
 800b510:	460b      	mov	r3, r1
 800b512:	4640      	mov	r0, r8
 800b514:	4649      	mov	r1, r9
 800b516:	f7f5 fae1 	bl	8000adc <__aeabi_dcmplt>
 800b51a:	b120      	cbz	r0, 800b526 <__ieee754_sqrt+0x19e>
 800b51c:	1ca0      	adds	r0, r4, #2
 800b51e:	bf08      	it	eq
 800b520:	3601      	addeq	r6, #1
 800b522:	3402      	adds	r4, #2
 800b524:	e7df      	b.n	800b4e6 <__ieee754_sqrt+0x15e>
 800b526:	1c63      	adds	r3, r4, #1
 800b528:	f023 0401 	bic.w	r4, r3, #1
 800b52c:	e7db      	b.n	800b4e6 <__ieee754_sqrt+0x15e>
 800b52e:	bf00      	nop
 800b530:	7ff00000 	.word	0x7ff00000
 800b534:	20000200 	.word	0x20000200
 800b538:	200001f8 	.word	0x200001f8
 800b53c:	00000000 	.word	0x00000000

0800b540 <__kernel_cos>:
 800b540:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b544:	ec57 6b10 	vmov	r6, r7, d0
 800b548:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b54c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800b550:	ed8d 1b00 	vstr	d1, [sp]
 800b554:	d206      	bcs.n	800b564 <__kernel_cos+0x24>
 800b556:	4630      	mov	r0, r6
 800b558:	4639      	mov	r1, r7
 800b55a:	f7f5 fafd 	bl	8000b58 <__aeabi_d2iz>
 800b55e:	2800      	cmp	r0, #0
 800b560:	f000 8088 	beq.w	800b674 <__kernel_cos+0x134>
 800b564:	4632      	mov	r2, r6
 800b566:	463b      	mov	r3, r7
 800b568:	4630      	mov	r0, r6
 800b56a:	4639      	mov	r1, r7
 800b56c:	f7f5 f844 	bl	80005f8 <__aeabi_dmul>
 800b570:	4b51      	ldr	r3, [pc, #324]	@ (800b6b8 <__kernel_cos+0x178>)
 800b572:	2200      	movs	r2, #0
 800b574:	4604      	mov	r4, r0
 800b576:	460d      	mov	r5, r1
 800b578:	f7f5 f83e 	bl	80005f8 <__aeabi_dmul>
 800b57c:	a340      	add	r3, pc, #256	@ (adr r3, 800b680 <__kernel_cos+0x140>)
 800b57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b582:	4682      	mov	sl, r0
 800b584:	468b      	mov	fp, r1
 800b586:	4620      	mov	r0, r4
 800b588:	4629      	mov	r1, r5
 800b58a:	f7f5 f835 	bl	80005f8 <__aeabi_dmul>
 800b58e:	a33e      	add	r3, pc, #248	@ (adr r3, 800b688 <__kernel_cos+0x148>)
 800b590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b594:	f7f4 fe7a 	bl	800028c <__adddf3>
 800b598:	4622      	mov	r2, r4
 800b59a:	462b      	mov	r3, r5
 800b59c:	f7f5 f82c 	bl	80005f8 <__aeabi_dmul>
 800b5a0:	a33b      	add	r3, pc, #236	@ (adr r3, 800b690 <__kernel_cos+0x150>)
 800b5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a6:	f7f4 fe6f 	bl	8000288 <__aeabi_dsub>
 800b5aa:	4622      	mov	r2, r4
 800b5ac:	462b      	mov	r3, r5
 800b5ae:	f7f5 f823 	bl	80005f8 <__aeabi_dmul>
 800b5b2:	a339      	add	r3, pc, #228	@ (adr r3, 800b698 <__kernel_cos+0x158>)
 800b5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b8:	f7f4 fe68 	bl	800028c <__adddf3>
 800b5bc:	4622      	mov	r2, r4
 800b5be:	462b      	mov	r3, r5
 800b5c0:	f7f5 f81a 	bl	80005f8 <__aeabi_dmul>
 800b5c4:	a336      	add	r3, pc, #216	@ (adr r3, 800b6a0 <__kernel_cos+0x160>)
 800b5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ca:	f7f4 fe5d 	bl	8000288 <__aeabi_dsub>
 800b5ce:	4622      	mov	r2, r4
 800b5d0:	462b      	mov	r3, r5
 800b5d2:	f7f5 f811 	bl	80005f8 <__aeabi_dmul>
 800b5d6:	a334      	add	r3, pc, #208	@ (adr r3, 800b6a8 <__kernel_cos+0x168>)
 800b5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5dc:	f7f4 fe56 	bl	800028c <__adddf3>
 800b5e0:	4622      	mov	r2, r4
 800b5e2:	462b      	mov	r3, r5
 800b5e4:	f7f5 f808 	bl	80005f8 <__aeabi_dmul>
 800b5e8:	4622      	mov	r2, r4
 800b5ea:	462b      	mov	r3, r5
 800b5ec:	f7f5 f804 	bl	80005f8 <__aeabi_dmul>
 800b5f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5f4:	4604      	mov	r4, r0
 800b5f6:	460d      	mov	r5, r1
 800b5f8:	4630      	mov	r0, r6
 800b5fa:	4639      	mov	r1, r7
 800b5fc:	f7f4 fffc 	bl	80005f8 <__aeabi_dmul>
 800b600:	460b      	mov	r3, r1
 800b602:	4602      	mov	r2, r0
 800b604:	4629      	mov	r1, r5
 800b606:	4620      	mov	r0, r4
 800b608:	f7f4 fe3e 	bl	8000288 <__aeabi_dsub>
 800b60c:	4b2b      	ldr	r3, [pc, #172]	@ (800b6bc <__kernel_cos+0x17c>)
 800b60e:	4598      	cmp	r8, r3
 800b610:	4606      	mov	r6, r0
 800b612:	460f      	mov	r7, r1
 800b614:	d810      	bhi.n	800b638 <__kernel_cos+0xf8>
 800b616:	4602      	mov	r2, r0
 800b618:	460b      	mov	r3, r1
 800b61a:	4650      	mov	r0, sl
 800b61c:	4659      	mov	r1, fp
 800b61e:	f7f4 fe33 	bl	8000288 <__aeabi_dsub>
 800b622:	460b      	mov	r3, r1
 800b624:	4926      	ldr	r1, [pc, #152]	@ (800b6c0 <__kernel_cos+0x180>)
 800b626:	4602      	mov	r2, r0
 800b628:	2000      	movs	r0, #0
 800b62a:	f7f4 fe2d 	bl	8000288 <__aeabi_dsub>
 800b62e:	ec41 0b10 	vmov	d0, r0, r1
 800b632:	b003      	add	sp, #12
 800b634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b638:	4b22      	ldr	r3, [pc, #136]	@ (800b6c4 <__kernel_cos+0x184>)
 800b63a:	4921      	ldr	r1, [pc, #132]	@ (800b6c0 <__kernel_cos+0x180>)
 800b63c:	4598      	cmp	r8, r3
 800b63e:	bf8c      	ite	hi
 800b640:	4d21      	ldrhi	r5, [pc, #132]	@ (800b6c8 <__kernel_cos+0x188>)
 800b642:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800b646:	2400      	movs	r4, #0
 800b648:	4622      	mov	r2, r4
 800b64a:	462b      	mov	r3, r5
 800b64c:	2000      	movs	r0, #0
 800b64e:	f7f4 fe1b 	bl	8000288 <__aeabi_dsub>
 800b652:	4622      	mov	r2, r4
 800b654:	4680      	mov	r8, r0
 800b656:	4689      	mov	r9, r1
 800b658:	462b      	mov	r3, r5
 800b65a:	4650      	mov	r0, sl
 800b65c:	4659      	mov	r1, fp
 800b65e:	f7f4 fe13 	bl	8000288 <__aeabi_dsub>
 800b662:	4632      	mov	r2, r6
 800b664:	463b      	mov	r3, r7
 800b666:	f7f4 fe0f 	bl	8000288 <__aeabi_dsub>
 800b66a:	4602      	mov	r2, r0
 800b66c:	460b      	mov	r3, r1
 800b66e:	4640      	mov	r0, r8
 800b670:	4649      	mov	r1, r9
 800b672:	e7da      	b.n	800b62a <__kernel_cos+0xea>
 800b674:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800b6b0 <__kernel_cos+0x170>
 800b678:	e7db      	b.n	800b632 <__kernel_cos+0xf2>
 800b67a:	bf00      	nop
 800b67c:	f3af 8000 	nop.w
 800b680:	be8838d4 	.word	0xbe8838d4
 800b684:	bda8fae9 	.word	0xbda8fae9
 800b688:	bdb4b1c4 	.word	0xbdb4b1c4
 800b68c:	3e21ee9e 	.word	0x3e21ee9e
 800b690:	809c52ad 	.word	0x809c52ad
 800b694:	3e927e4f 	.word	0x3e927e4f
 800b698:	19cb1590 	.word	0x19cb1590
 800b69c:	3efa01a0 	.word	0x3efa01a0
 800b6a0:	16c15177 	.word	0x16c15177
 800b6a4:	3f56c16c 	.word	0x3f56c16c
 800b6a8:	5555554c 	.word	0x5555554c
 800b6ac:	3fa55555 	.word	0x3fa55555
 800b6b0:	00000000 	.word	0x00000000
 800b6b4:	3ff00000 	.word	0x3ff00000
 800b6b8:	3fe00000 	.word	0x3fe00000
 800b6bc:	3fd33332 	.word	0x3fd33332
 800b6c0:	3ff00000 	.word	0x3ff00000
 800b6c4:	3fe90000 	.word	0x3fe90000
 800b6c8:	3fd20000 	.word	0x3fd20000
 800b6cc:	00000000 	.word	0x00000000

0800b6d0 <__kernel_sin>:
 800b6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6d4:	ec55 4b10 	vmov	r4, r5, d0
 800b6d8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b6dc:	b085      	sub	sp, #20
 800b6de:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800b6e2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800b6e6:	4680      	mov	r8, r0
 800b6e8:	d205      	bcs.n	800b6f6 <__kernel_sin+0x26>
 800b6ea:	4620      	mov	r0, r4
 800b6ec:	4629      	mov	r1, r5
 800b6ee:	f7f5 fa33 	bl	8000b58 <__aeabi_d2iz>
 800b6f2:	2800      	cmp	r0, #0
 800b6f4:	d052      	beq.n	800b79c <__kernel_sin+0xcc>
 800b6f6:	4622      	mov	r2, r4
 800b6f8:	462b      	mov	r3, r5
 800b6fa:	4620      	mov	r0, r4
 800b6fc:	4629      	mov	r1, r5
 800b6fe:	f7f4 ff7b 	bl	80005f8 <__aeabi_dmul>
 800b702:	4682      	mov	sl, r0
 800b704:	468b      	mov	fp, r1
 800b706:	4602      	mov	r2, r0
 800b708:	460b      	mov	r3, r1
 800b70a:	4620      	mov	r0, r4
 800b70c:	4629      	mov	r1, r5
 800b70e:	f7f4 ff73 	bl	80005f8 <__aeabi_dmul>
 800b712:	a342      	add	r3, pc, #264	@ (adr r3, 800b81c <__kernel_sin+0x14c>)
 800b714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b718:	e9cd 0100 	strd	r0, r1, [sp]
 800b71c:	4650      	mov	r0, sl
 800b71e:	4659      	mov	r1, fp
 800b720:	f7f4 ff6a 	bl	80005f8 <__aeabi_dmul>
 800b724:	a33f      	add	r3, pc, #252	@ (adr r3, 800b824 <__kernel_sin+0x154>)
 800b726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72a:	f7f4 fdad 	bl	8000288 <__aeabi_dsub>
 800b72e:	4652      	mov	r2, sl
 800b730:	465b      	mov	r3, fp
 800b732:	f7f4 ff61 	bl	80005f8 <__aeabi_dmul>
 800b736:	a33d      	add	r3, pc, #244	@ (adr r3, 800b82c <__kernel_sin+0x15c>)
 800b738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b73c:	f7f4 fda6 	bl	800028c <__adddf3>
 800b740:	4652      	mov	r2, sl
 800b742:	465b      	mov	r3, fp
 800b744:	f7f4 ff58 	bl	80005f8 <__aeabi_dmul>
 800b748:	a33a      	add	r3, pc, #232	@ (adr r3, 800b834 <__kernel_sin+0x164>)
 800b74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74e:	f7f4 fd9b 	bl	8000288 <__aeabi_dsub>
 800b752:	4652      	mov	r2, sl
 800b754:	465b      	mov	r3, fp
 800b756:	f7f4 ff4f 	bl	80005f8 <__aeabi_dmul>
 800b75a:	a338      	add	r3, pc, #224	@ (adr r3, 800b83c <__kernel_sin+0x16c>)
 800b75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b760:	f7f4 fd94 	bl	800028c <__adddf3>
 800b764:	4606      	mov	r6, r0
 800b766:	460f      	mov	r7, r1
 800b768:	f1b8 0f00 	cmp.w	r8, #0
 800b76c:	d11b      	bne.n	800b7a6 <__kernel_sin+0xd6>
 800b76e:	4602      	mov	r2, r0
 800b770:	460b      	mov	r3, r1
 800b772:	4650      	mov	r0, sl
 800b774:	4659      	mov	r1, fp
 800b776:	f7f4 ff3f 	bl	80005f8 <__aeabi_dmul>
 800b77a:	a325      	add	r3, pc, #148	@ (adr r3, 800b810 <__kernel_sin+0x140>)
 800b77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b780:	f7f4 fd82 	bl	8000288 <__aeabi_dsub>
 800b784:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b788:	f7f4 ff36 	bl	80005f8 <__aeabi_dmul>
 800b78c:	4602      	mov	r2, r0
 800b78e:	460b      	mov	r3, r1
 800b790:	4620      	mov	r0, r4
 800b792:	4629      	mov	r1, r5
 800b794:	f7f4 fd7a 	bl	800028c <__adddf3>
 800b798:	4604      	mov	r4, r0
 800b79a:	460d      	mov	r5, r1
 800b79c:	ec45 4b10 	vmov	d0, r4, r5
 800b7a0:	b005      	add	sp, #20
 800b7a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7aa:	4b1b      	ldr	r3, [pc, #108]	@ (800b818 <__kernel_sin+0x148>)
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	f7f4 ff23 	bl	80005f8 <__aeabi_dmul>
 800b7b2:	4632      	mov	r2, r6
 800b7b4:	4680      	mov	r8, r0
 800b7b6:	4689      	mov	r9, r1
 800b7b8:	463b      	mov	r3, r7
 800b7ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b7be:	f7f4 ff1b 	bl	80005f8 <__aeabi_dmul>
 800b7c2:	4602      	mov	r2, r0
 800b7c4:	460b      	mov	r3, r1
 800b7c6:	4640      	mov	r0, r8
 800b7c8:	4649      	mov	r1, r9
 800b7ca:	f7f4 fd5d 	bl	8000288 <__aeabi_dsub>
 800b7ce:	4652      	mov	r2, sl
 800b7d0:	465b      	mov	r3, fp
 800b7d2:	f7f4 ff11 	bl	80005f8 <__aeabi_dmul>
 800b7d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b7da:	f7f4 fd55 	bl	8000288 <__aeabi_dsub>
 800b7de:	a30c      	add	r3, pc, #48	@ (adr r3, 800b810 <__kernel_sin+0x140>)
 800b7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e4:	4606      	mov	r6, r0
 800b7e6:	460f      	mov	r7, r1
 800b7e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b7ec:	f7f4 ff04 	bl	80005f8 <__aeabi_dmul>
 800b7f0:	4602      	mov	r2, r0
 800b7f2:	460b      	mov	r3, r1
 800b7f4:	4630      	mov	r0, r6
 800b7f6:	4639      	mov	r1, r7
 800b7f8:	f7f4 fd48 	bl	800028c <__adddf3>
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	460b      	mov	r3, r1
 800b800:	4620      	mov	r0, r4
 800b802:	4629      	mov	r1, r5
 800b804:	f7f4 fd40 	bl	8000288 <__aeabi_dsub>
 800b808:	e7c6      	b.n	800b798 <__kernel_sin+0xc8>
 800b80a:	bf00      	nop
 800b80c:	f3af 8000 	nop.w
 800b810:	55555549 	.word	0x55555549
 800b814:	3fc55555 	.word	0x3fc55555
 800b818:	3fe00000 	.word	0x3fe00000
 800b81c:	5acfd57c 	.word	0x5acfd57c
 800b820:	3de5d93a 	.word	0x3de5d93a
 800b824:	8a2b9ceb 	.word	0x8a2b9ceb
 800b828:	3e5ae5e6 	.word	0x3e5ae5e6
 800b82c:	57b1fe7d 	.word	0x57b1fe7d
 800b830:	3ec71de3 	.word	0x3ec71de3
 800b834:	19c161d5 	.word	0x19c161d5
 800b838:	3f2a01a0 	.word	0x3f2a01a0
 800b83c:	1110f8a6 	.word	0x1110f8a6
 800b840:	3f811111 	.word	0x3f811111
 800b844:	00000000 	.word	0x00000000

0800b848 <__ieee754_asin>:
 800b848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b84c:	ec55 4b10 	vmov	r4, r5, d0
 800b850:	4bc7      	ldr	r3, [pc, #796]	@ (800bb70 <__ieee754_asin+0x328>)
 800b852:	b087      	sub	sp, #28
 800b854:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800b858:	429e      	cmp	r6, r3
 800b85a:	9501      	str	r5, [sp, #4]
 800b85c:	d92d      	bls.n	800b8ba <__ieee754_asin+0x72>
 800b85e:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800b862:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800b866:	4326      	orrs	r6, r4
 800b868:	d116      	bne.n	800b898 <__ieee754_asin+0x50>
 800b86a:	a3a7      	add	r3, pc, #668	@ (adr r3, 800bb08 <__ieee754_asin+0x2c0>)
 800b86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b870:	4620      	mov	r0, r4
 800b872:	4629      	mov	r1, r5
 800b874:	f7f4 fec0 	bl	80005f8 <__aeabi_dmul>
 800b878:	a3a5      	add	r3, pc, #660	@ (adr r3, 800bb10 <__ieee754_asin+0x2c8>)
 800b87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b87e:	4606      	mov	r6, r0
 800b880:	460f      	mov	r7, r1
 800b882:	4620      	mov	r0, r4
 800b884:	4629      	mov	r1, r5
 800b886:	f7f4 feb7 	bl	80005f8 <__aeabi_dmul>
 800b88a:	4602      	mov	r2, r0
 800b88c:	460b      	mov	r3, r1
 800b88e:	4630      	mov	r0, r6
 800b890:	4639      	mov	r1, r7
 800b892:	f7f4 fcfb 	bl	800028c <__adddf3>
 800b896:	e009      	b.n	800b8ac <__ieee754_asin+0x64>
 800b898:	4622      	mov	r2, r4
 800b89a:	462b      	mov	r3, r5
 800b89c:	4620      	mov	r0, r4
 800b89e:	4629      	mov	r1, r5
 800b8a0:	f7f4 fcf2 	bl	8000288 <__aeabi_dsub>
 800b8a4:	4602      	mov	r2, r0
 800b8a6:	460b      	mov	r3, r1
 800b8a8:	f7f4 ffd0 	bl	800084c <__aeabi_ddiv>
 800b8ac:	4604      	mov	r4, r0
 800b8ae:	460d      	mov	r5, r1
 800b8b0:	ec45 4b10 	vmov	d0, r4, r5
 800b8b4:	b007      	add	sp, #28
 800b8b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ba:	4bae      	ldr	r3, [pc, #696]	@ (800bb74 <__ieee754_asin+0x32c>)
 800b8bc:	429e      	cmp	r6, r3
 800b8be:	d810      	bhi.n	800b8e2 <__ieee754_asin+0x9a>
 800b8c0:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800b8c4:	f080 80ad 	bcs.w	800ba22 <__ieee754_asin+0x1da>
 800b8c8:	a393      	add	r3, pc, #588	@ (adr r3, 800bb18 <__ieee754_asin+0x2d0>)
 800b8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	4629      	mov	r1, r5
 800b8d2:	f7f4 fcdb 	bl	800028c <__adddf3>
 800b8d6:	4ba8      	ldr	r3, [pc, #672]	@ (800bb78 <__ieee754_asin+0x330>)
 800b8d8:	2200      	movs	r2, #0
 800b8da:	f7f5 f91d 	bl	8000b18 <__aeabi_dcmpgt>
 800b8de:	2800      	cmp	r0, #0
 800b8e0:	d1e6      	bne.n	800b8b0 <__ieee754_asin+0x68>
 800b8e2:	ec45 4b10 	vmov	d0, r4, r5
 800b8e6:	f7ff fcf1 	bl	800b2cc <fabs>
 800b8ea:	49a3      	ldr	r1, [pc, #652]	@ (800bb78 <__ieee754_asin+0x330>)
 800b8ec:	ec53 2b10 	vmov	r2, r3, d0
 800b8f0:	2000      	movs	r0, #0
 800b8f2:	f7f4 fcc9 	bl	8000288 <__aeabi_dsub>
 800b8f6:	4ba1      	ldr	r3, [pc, #644]	@ (800bb7c <__ieee754_asin+0x334>)
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	f7f4 fe7d 	bl	80005f8 <__aeabi_dmul>
 800b8fe:	a388      	add	r3, pc, #544	@ (adr r3, 800bb20 <__ieee754_asin+0x2d8>)
 800b900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b904:	4604      	mov	r4, r0
 800b906:	460d      	mov	r5, r1
 800b908:	f7f4 fe76 	bl	80005f8 <__aeabi_dmul>
 800b90c:	a386      	add	r3, pc, #536	@ (adr r3, 800bb28 <__ieee754_asin+0x2e0>)
 800b90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b912:	f7f4 fcbb 	bl	800028c <__adddf3>
 800b916:	4622      	mov	r2, r4
 800b918:	462b      	mov	r3, r5
 800b91a:	f7f4 fe6d 	bl	80005f8 <__aeabi_dmul>
 800b91e:	a384      	add	r3, pc, #528	@ (adr r3, 800bb30 <__ieee754_asin+0x2e8>)
 800b920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b924:	f7f4 fcb0 	bl	8000288 <__aeabi_dsub>
 800b928:	4622      	mov	r2, r4
 800b92a:	462b      	mov	r3, r5
 800b92c:	f7f4 fe64 	bl	80005f8 <__aeabi_dmul>
 800b930:	a381      	add	r3, pc, #516	@ (adr r3, 800bb38 <__ieee754_asin+0x2f0>)
 800b932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b936:	f7f4 fca9 	bl	800028c <__adddf3>
 800b93a:	4622      	mov	r2, r4
 800b93c:	462b      	mov	r3, r5
 800b93e:	f7f4 fe5b 	bl	80005f8 <__aeabi_dmul>
 800b942:	a37f      	add	r3, pc, #508	@ (adr r3, 800bb40 <__ieee754_asin+0x2f8>)
 800b944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b948:	f7f4 fc9e 	bl	8000288 <__aeabi_dsub>
 800b94c:	4622      	mov	r2, r4
 800b94e:	462b      	mov	r3, r5
 800b950:	f7f4 fe52 	bl	80005f8 <__aeabi_dmul>
 800b954:	a37c      	add	r3, pc, #496	@ (adr r3, 800bb48 <__ieee754_asin+0x300>)
 800b956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b95a:	f7f4 fc97 	bl	800028c <__adddf3>
 800b95e:	4622      	mov	r2, r4
 800b960:	462b      	mov	r3, r5
 800b962:	f7f4 fe49 	bl	80005f8 <__aeabi_dmul>
 800b966:	a37a      	add	r3, pc, #488	@ (adr r3, 800bb50 <__ieee754_asin+0x308>)
 800b968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b970:	4620      	mov	r0, r4
 800b972:	4629      	mov	r1, r5
 800b974:	f7f4 fe40 	bl	80005f8 <__aeabi_dmul>
 800b978:	a377      	add	r3, pc, #476	@ (adr r3, 800bb58 <__ieee754_asin+0x310>)
 800b97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97e:	f7f4 fc83 	bl	8000288 <__aeabi_dsub>
 800b982:	4622      	mov	r2, r4
 800b984:	462b      	mov	r3, r5
 800b986:	f7f4 fe37 	bl	80005f8 <__aeabi_dmul>
 800b98a:	a375      	add	r3, pc, #468	@ (adr r3, 800bb60 <__ieee754_asin+0x318>)
 800b98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b990:	f7f4 fc7c 	bl	800028c <__adddf3>
 800b994:	4622      	mov	r2, r4
 800b996:	462b      	mov	r3, r5
 800b998:	f7f4 fe2e 	bl	80005f8 <__aeabi_dmul>
 800b99c:	a372      	add	r3, pc, #456	@ (adr r3, 800bb68 <__ieee754_asin+0x320>)
 800b99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a2:	f7f4 fc71 	bl	8000288 <__aeabi_dsub>
 800b9a6:	4622      	mov	r2, r4
 800b9a8:	462b      	mov	r3, r5
 800b9aa:	f7f4 fe25 	bl	80005f8 <__aeabi_dmul>
 800b9ae:	4b72      	ldr	r3, [pc, #456]	@ (800bb78 <__ieee754_asin+0x330>)
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	f7f4 fc6b 	bl	800028c <__adddf3>
 800b9b6:	ec45 4b10 	vmov	d0, r4, r5
 800b9ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b9be:	f7ff fce3 	bl	800b388 <__ieee754_sqrt>
 800b9c2:	4b6f      	ldr	r3, [pc, #444]	@ (800bb80 <__ieee754_asin+0x338>)
 800b9c4:	429e      	cmp	r6, r3
 800b9c6:	ec5b ab10 	vmov	sl, fp, d0
 800b9ca:	f240 80db 	bls.w	800bb84 <__ieee754_asin+0x33c>
 800b9ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b9d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9d6:	f7f4 ff39 	bl	800084c <__aeabi_ddiv>
 800b9da:	4652      	mov	r2, sl
 800b9dc:	465b      	mov	r3, fp
 800b9de:	f7f4 fe0b 	bl	80005f8 <__aeabi_dmul>
 800b9e2:	4652      	mov	r2, sl
 800b9e4:	465b      	mov	r3, fp
 800b9e6:	f7f4 fc51 	bl	800028c <__adddf3>
 800b9ea:	4602      	mov	r2, r0
 800b9ec:	460b      	mov	r3, r1
 800b9ee:	f7f4 fc4d 	bl	800028c <__adddf3>
 800b9f2:	a347      	add	r3, pc, #284	@ (adr r3, 800bb10 <__ieee754_asin+0x2c8>)
 800b9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f8:	f7f4 fc46 	bl	8000288 <__aeabi_dsub>
 800b9fc:	4602      	mov	r2, r0
 800b9fe:	460b      	mov	r3, r1
 800ba00:	a141      	add	r1, pc, #260	@ (adr r1, 800bb08 <__ieee754_asin+0x2c0>)
 800ba02:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba06:	f7f4 fc3f 	bl	8000288 <__aeabi_dsub>
 800ba0a:	9b01      	ldr	r3, [sp, #4]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	bfdc      	itt	le
 800ba10:	4602      	movle	r2, r0
 800ba12:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 800ba16:	4604      	mov	r4, r0
 800ba18:	460d      	mov	r5, r1
 800ba1a:	bfdc      	itt	le
 800ba1c:	4614      	movle	r4, r2
 800ba1e:	461d      	movle	r5, r3
 800ba20:	e746      	b.n	800b8b0 <__ieee754_asin+0x68>
 800ba22:	4622      	mov	r2, r4
 800ba24:	462b      	mov	r3, r5
 800ba26:	4620      	mov	r0, r4
 800ba28:	4629      	mov	r1, r5
 800ba2a:	f7f4 fde5 	bl	80005f8 <__aeabi_dmul>
 800ba2e:	a33c      	add	r3, pc, #240	@ (adr r3, 800bb20 <__ieee754_asin+0x2d8>)
 800ba30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba34:	4606      	mov	r6, r0
 800ba36:	460f      	mov	r7, r1
 800ba38:	f7f4 fdde 	bl	80005f8 <__aeabi_dmul>
 800ba3c:	a33a      	add	r3, pc, #232	@ (adr r3, 800bb28 <__ieee754_asin+0x2e0>)
 800ba3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba42:	f7f4 fc23 	bl	800028c <__adddf3>
 800ba46:	4632      	mov	r2, r6
 800ba48:	463b      	mov	r3, r7
 800ba4a:	f7f4 fdd5 	bl	80005f8 <__aeabi_dmul>
 800ba4e:	a338      	add	r3, pc, #224	@ (adr r3, 800bb30 <__ieee754_asin+0x2e8>)
 800ba50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba54:	f7f4 fc18 	bl	8000288 <__aeabi_dsub>
 800ba58:	4632      	mov	r2, r6
 800ba5a:	463b      	mov	r3, r7
 800ba5c:	f7f4 fdcc 	bl	80005f8 <__aeabi_dmul>
 800ba60:	a335      	add	r3, pc, #212	@ (adr r3, 800bb38 <__ieee754_asin+0x2f0>)
 800ba62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba66:	f7f4 fc11 	bl	800028c <__adddf3>
 800ba6a:	4632      	mov	r2, r6
 800ba6c:	463b      	mov	r3, r7
 800ba6e:	f7f4 fdc3 	bl	80005f8 <__aeabi_dmul>
 800ba72:	a333      	add	r3, pc, #204	@ (adr r3, 800bb40 <__ieee754_asin+0x2f8>)
 800ba74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba78:	f7f4 fc06 	bl	8000288 <__aeabi_dsub>
 800ba7c:	4632      	mov	r2, r6
 800ba7e:	463b      	mov	r3, r7
 800ba80:	f7f4 fdba 	bl	80005f8 <__aeabi_dmul>
 800ba84:	a330      	add	r3, pc, #192	@ (adr r3, 800bb48 <__ieee754_asin+0x300>)
 800ba86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8a:	f7f4 fbff 	bl	800028c <__adddf3>
 800ba8e:	4632      	mov	r2, r6
 800ba90:	463b      	mov	r3, r7
 800ba92:	f7f4 fdb1 	bl	80005f8 <__aeabi_dmul>
 800ba96:	a32e      	add	r3, pc, #184	@ (adr r3, 800bb50 <__ieee754_asin+0x308>)
 800ba98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba9c:	4680      	mov	r8, r0
 800ba9e:	4689      	mov	r9, r1
 800baa0:	4630      	mov	r0, r6
 800baa2:	4639      	mov	r1, r7
 800baa4:	f7f4 fda8 	bl	80005f8 <__aeabi_dmul>
 800baa8:	a32b      	add	r3, pc, #172	@ (adr r3, 800bb58 <__ieee754_asin+0x310>)
 800baaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baae:	f7f4 fbeb 	bl	8000288 <__aeabi_dsub>
 800bab2:	4632      	mov	r2, r6
 800bab4:	463b      	mov	r3, r7
 800bab6:	f7f4 fd9f 	bl	80005f8 <__aeabi_dmul>
 800baba:	a329      	add	r3, pc, #164	@ (adr r3, 800bb60 <__ieee754_asin+0x318>)
 800babc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac0:	f7f4 fbe4 	bl	800028c <__adddf3>
 800bac4:	4632      	mov	r2, r6
 800bac6:	463b      	mov	r3, r7
 800bac8:	f7f4 fd96 	bl	80005f8 <__aeabi_dmul>
 800bacc:	a326      	add	r3, pc, #152	@ (adr r3, 800bb68 <__ieee754_asin+0x320>)
 800bace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad2:	f7f4 fbd9 	bl	8000288 <__aeabi_dsub>
 800bad6:	4632      	mov	r2, r6
 800bad8:	463b      	mov	r3, r7
 800bada:	f7f4 fd8d 	bl	80005f8 <__aeabi_dmul>
 800bade:	4b26      	ldr	r3, [pc, #152]	@ (800bb78 <__ieee754_asin+0x330>)
 800bae0:	2200      	movs	r2, #0
 800bae2:	f7f4 fbd3 	bl	800028c <__adddf3>
 800bae6:	4602      	mov	r2, r0
 800bae8:	460b      	mov	r3, r1
 800baea:	4640      	mov	r0, r8
 800baec:	4649      	mov	r1, r9
 800baee:	f7f4 fead 	bl	800084c <__aeabi_ddiv>
 800baf2:	4622      	mov	r2, r4
 800baf4:	462b      	mov	r3, r5
 800baf6:	f7f4 fd7f 	bl	80005f8 <__aeabi_dmul>
 800bafa:	4602      	mov	r2, r0
 800bafc:	460b      	mov	r3, r1
 800bafe:	4620      	mov	r0, r4
 800bb00:	4629      	mov	r1, r5
 800bb02:	e6c6      	b.n	800b892 <__ieee754_asin+0x4a>
 800bb04:	f3af 8000 	nop.w
 800bb08:	54442d18 	.word	0x54442d18
 800bb0c:	3ff921fb 	.word	0x3ff921fb
 800bb10:	33145c07 	.word	0x33145c07
 800bb14:	3c91a626 	.word	0x3c91a626
 800bb18:	8800759c 	.word	0x8800759c
 800bb1c:	7e37e43c 	.word	0x7e37e43c
 800bb20:	0dfdf709 	.word	0x0dfdf709
 800bb24:	3f023de1 	.word	0x3f023de1
 800bb28:	7501b288 	.word	0x7501b288
 800bb2c:	3f49efe0 	.word	0x3f49efe0
 800bb30:	b5688f3b 	.word	0xb5688f3b
 800bb34:	3fa48228 	.word	0x3fa48228
 800bb38:	0e884455 	.word	0x0e884455
 800bb3c:	3fc9c155 	.word	0x3fc9c155
 800bb40:	03eb6f7d 	.word	0x03eb6f7d
 800bb44:	3fd4d612 	.word	0x3fd4d612
 800bb48:	55555555 	.word	0x55555555
 800bb4c:	3fc55555 	.word	0x3fc55555
 800bb50:	b12e9282 	.word	0xb12e9282
 800bb54:	3fb3b8c5 	.word	0x3fb3b8c5
 800bb58:	1b8d0159 	.word	0x1b8d0159
 800bb5c:	3fe6066c 	.word	0x3fe6066c
 800bb60:	9c598ac8 	.word	0x9c598ac8
 800bb64:	40002ae5 	.word	0x40002ae5
 800bb68:	1c8a2d4b 	.word	0x1c8a2d4b
 800bb6c:	40033a27 	.word	0x40033a27
 800bb70:	3fefffff 	.word	0x3fefffff
 800bb74:	3fdfffff 	.word	0x3fdfffff
 800bb78:	3ff00000 	.word	0x3ff00000
 800bb7c:	3fe00000 	.word	0x3fe00000
 800bb80:	3fef3332 	.word	0x3fef3332
 800bb84:	4652      	mov	r2, sl
 800bb86:	465b      	mov	r3, fp
 800bb88:	4650      	mov	r0, sl
 800bb8a:	4659      	mov	r1, fp
 800bb8c:	f7f4 fb7e 	bl	800028c <__adddf3>
 800bb90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb94:	4606      	mov	r6, r0
 800bb96:	460f      	mov	r7, r1
 800bb98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb9c:	f7f4 fe56 	bl	800084c <__aeabi_ddiv>
 800bba0:	4602      	mov	r2, r0
 800bba2:	460b      	mov	r3, r1
 800bba4:	4630      	mov	r0, r6
 800bba6:	4639      	mov	r1, r7
 800bba8:	f7f4 fd26 	bl	80005f8 <__aeabi_dmul>
 800bbac:	f04f 0800 	mov.w	r8, #0
 800bbb0:	4606      	mov	r6, r0
 800bbb2:	460f      	mov	r7, r1
 800bbb4:	4642      	mov	r2, r8
 800bbb6:	465b      	mov	r3, fp
 800bbb8:	4640      	mov	r0, r8
 800bbba:	4659      	mov	r1, fp
 800bbbc:	f7f4 fd1c 	bl	80005f8 <__aeabi_dmul>
 800bbc0:	4602      	mov	r2, r0
 800bbc2:	460b      	mov	r3, r1
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	4629      	mov	r1, r5
 800bbc8:	f7f4 fb5e 	bl	8000288 <__aeabi_dsub>
 800bbcc:	4642      	mov	r2, r8
 800bbce:	4604      	mov	r4, r0
 800bbd0:	460d      	mov	r5, r1
 800bbd2:	465b      	mov	r3, fp
 800bbd4:	4650      	mov	r0, sl
 800bbd6:	4659      	mov	r1, fp
 800bbd8:	f7f4 fb58 	bl	800028c <__adddf3>
 800bbdc:	4602      	mov	r2, r0
 800bbde:	460b      	mov	r3, r1
 800bbe0:	4620      	mov	r0, r4
 800bbe2:	4629      	mov	r1, r5
 800bbe4:	f7f4 fe32 	bl	800084c <__aeabi_ddiv>
 800bbe8:	4602      	mov	r2, r0
 800bbea:	460b      	mov	r3, r1
 800bbec:	f7f4 fb4e 	bl	800028c <__adddf3>
 800bbf0:	4602      	mov	r2, r0
 800bbf2:	460b      	mov	r3, r1
 800bbf4:	a112      	add	r1, pc, #72	@ (adr r1, 800bc40 <__ieee754_asin+0x3f8>)
 800bbf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbfa:	f7f4 fb45 	bl	8000288 <__aeabi_dsub>
 800bbfe:	4602      	mov	r2, r0
 800bc00:	460b      	mov	r3, r1
 800bc02:	4630      	mov	r0, r6
 800bc04:	4639      	mov	r1, r7
 800bc06:	f7f4 fb3f 	bl	8000288 <__aeabi_dsub>
 800bc0a:	4642      	mov	r2, r8
 800bc0c:	4604      	mov	r4, r0
 800bc0e:	460d      	mov	r5, r1
 800bc10:	465b      	mov	r3, fp
 800bc12:	4640      	mov	r0, r8
 800bc14:	4659      	mov	r1, fp
 800bc16:	f7f4 fb39 	bl	800028c <__adddf3>
 800bc1a:	4602      	mov	r2, r0
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	a10a      	add	r1, pc, #40	@ (adr r1, 800bc48 <__ieee754_asin+0x400>)
 800bc20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc24:	f7f4 fb30 	bl	8000288 <__aeabi_dsub>
 800bc28:	4602      	mov	r2, r0
 800bc2a:	460b      	mov	r3, r1
 800bc2c:	4620      	mov	r0, r4
 800bc2e:	4629      	mov	r1, r5
 800bc30:	f7f4 fb2a 	bl	8000288 <__aeabi_dsub>
 800bc34:	4602      	mov	r2, r0
 800bc36:	460b      	mov	r3, r1
 800bc38:	a103      	add	r1, pc, #12	@ (adr r1, 800bc48 <__ieee754_asin+0x400>)
 800bc3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc3e:	e6e2      	b.n	800ba06 <__ieee754_asin+0x1be>
 800bc40:	33145c07 	.word	0x33145c07
 800bc44:	3c91a626 	.word	0x3c91a626
 800bc48:	54442d18 	.word	0x54442d18
 800bc4c:	3fe921fb 	.word	0x3fe921fb

0800bc50 <__ieee754_rem_pio2>:
 800bc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc54:	ec57 6b10 	vmov	r6, r7, d0
 800bc58:	4bc5      	ldr	r3, [pc, #788]	@ (800bf70 <__ieee754_rem_pio2+0x320>)
 800bc5a:	b08d      	sub	sp, #52	@ 0x34
 800bc5c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800bc60:	4598      	cmp	r8, r3
 800bc62:	4604      	mov	r4, r0
 800bc64:	9704      	str	r7, [sp, #16]
 800bc66:	d807      	bhi.n	800bc78 <__ieee754_rem_pio2+0x28>
 800bc68:	2200      	movs	r2, #0
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	ed80 0b00 	vstr	d0, [r0]
 800bc70:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800bc74:	2500      	movs	r5, #0
 800bc76:	e028      	b.n	800bcca <__ieee754_rem_pio2+0x7a>
 800bc78:	4bbe      	ldr	r3, [pc, #760]	@ (800bf74 <__ieee754_rem_pio2+0x324>)
 800bc7a:	4598      	cmp	r8, r3
 800bc7c:	d878      	bhi.n	800bd70 <__ieee754_rem_pio2+0x120>
 800bc7e:	9b04      	ldr	r3, [sp, #16]
 800bc80:	4dbd      	ldr	r5, [pc, #756]	@ (800bf78 <__ieee754_rem_pio2+0x328>)
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	4630      	mov	r0, r6
 800bc86:	a3ac      	add	r3, pc, #688	@ (adr r3, 800bf38 <__ieee754_rem_pio2+0x2e8>)
 800bc88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc8c:	4639      	mov	r1, r7
 800bc8e:	dd38      	ble.n	800bd02 <__ieee754_rem_pio2+0xb2>
 800bc90:	f7f4 fafa 	bl	8000288 <__aeabi_dsub>
 800bc94:	45a8      	cmp	r8, r5
 800bc96:	4606      	mov	r6, r0
 800bc98:	460f      	mov	r7, r1
 800bc9a:	d01a      	beq.n	800bcd2 <__ieee754_rem_pio2+0x82>
 800bc9c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800bf40 <__ieee754_rem_pio2+0x2f0>)
 800bc9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca2:	f7f4 faf1 	bl	8000288 <__aeabi_dsub>
 800bca6:	4602      	mov	r2, r0
 800bca8:	460b      	mov	r3, r1
 800bcaa:	4680      	mov	r8, r0
 800bcac:	4689      	mov	r9, r1
 800bcae:	4630      	mov	r0, r6
 800bcb0:	4639      	mov	r1, r7
 800bcb2:	f7f4 fae9 	bl	8000288 <__aeabi_dsub>
 800bcb6:	a3a2      	add	r3, pc, #648	@ (adr r3, 800bf40 <__ieee754_rem_pio2+0x2f0>)
 800bcb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcbc:	f7f4 fae4 	bl	8000288 <__aeabi_dsub>
 800bcc0:	e9c4 8900 	strd	r8, r9, [r4]
 800bcc4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bcc8:	2501      	movs	r5, #1
 800bcca:	4628      	mov	r0, r5
 800bccc:	b00d      	add	sp, #52	@ 0x34
 800bcce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcd2:	a39d      	add	r3, pc, #628	@ (adr r3, 800bf48 <__ieee754_rem_pio2+0x2f8>)
 800bcd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd8:	f7f4 fad6 	bl	8000288 <__aeabi_dsub>
 800bcdc:	a39c      	add	r3, pc, #624	@ (adr r3, 800bf50 <__ieee754_rem_pio2+0x300>)
 800bcde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce2:	4606      	mov	r6, r0
 800bce4:	460f      	mov	r7, r1
 800bce6:	f7f4 facf 	bl	8000288 <__aeabi_dsub>
 800bcea:	4602      	mov	r2, r0
 800bcec:	460b      	mov	r3, r1
 800bcee:	4680      	mov	r8, r0
 800bcf0:	4689      	mov	r9, r1
 800bcf2:	4630      	mov	r0, r6
 800bcf4:	4639      	mov	r1, r7
 800bcf6:	f7f4 fac7 	bl	8000288 <__aeabi_dsub>
 800bcfa:	a395      	add	r3, pc, #596	@ (adr r3, 800bf50 <__ieee754_rem_pio2+0x300>)
 800bcfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd00:	e7dc      	b.n	800bcbc <__ieee754_rem_pio2+0x6c>
 800bd02:	f7f4 fac3 	bl	800028c <__adddf3>
 800bd06:	45a8      	cmp	r8, r5
 800bd08:	4606      	mov	r6, r0
 800bd0a:	460f      	mov	r7, r1
 800bd0c:	d018      	beq.n	800bd40 <__ieee754_rem_pio2+0xf0>
 800bd0e:	a38c      	add	r3, pc, #560	@ (adr r3, 800bf40 <__ieee754_rem_pio2+0x2f0>)
 800bd10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd14:	f7f4 faba 	bl	800028c <__adddf3>
 800bd18:	4602      	mov	r2, r0
 800bd1a:	460b      	mov	r3, r1
 800bd1c:	4680      	mov	r8, r0
 800bd1e:	4689      	mov	r9, r1
 800bd20:	4630      	mov	r0, r6
 800bd22:	4639      	mov	r1, r7
 800bd24:	f7f4 fab0 	bl	8000288 <__aeabi_dsub>
 800bd28:	a385      	add	r3, pc, #532	@ (adr r3, 800bf40 <__ieee754_rem_pio2+0x2f0>)
 800bd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd2e:	f7f4 faad 	bl	800028c <__adddf3>
 800bd32:	f04f 35ff 	mov.w	r5, #4294967295
 800bd36:	e9c4 8900 	strd	r8, r9, [r4]
 800bd3a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bd3e:	e7c4      	b.n	800bcca <__ieee754_rem_pio2+0x7a>
 800bd40:	a381      	add	r3, pc, #516	@ (adr r3, 800bf48 <__ieee754_rem_pio2+0x2f8>)
 800bd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd46:	f7f4 faa1 	bl	800028c <__adddf3>
 800bd4a:	a381      	add	r3, pc, #516	@ (adr r3, 800bf50 <__ieee754_rem_pio2+0x300>)
 800bd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd50:	4606      	mov	r6, r0
 800bd52:	460f      	mov	r7, r1
 800bd54:	f7f4 fa9a 	bl	800028c <__adddf3>
 800bd58:	4602      	mov	r2, r0
 800bd5a:	460b      	mov	r3, r1
 800bd5c:	4680      	mov	r8, r0
 800bd5e:	4689      	mov	r9, r1
 800bd60:	4630      	mov	r0, r6
 800bd62:	4639      	mov	r1, r7
 800bd64:	f7f4 fa90 	bl	8000288 <__aeabi_dsub>
 800bd68:	a379      	add	r3, pc, #484	@ (adr r3, 800bf50 <__ieee754_rem_pio2+0x300>)
 800bd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd6e:	e7de      	b.n	800bd2e <__ieee754_rem_pio2+0xde>
 800bd70:	4b82      	ldr	r3, [pc, #520]	@ (800bf7c <__ieee754_rem_pio2+0x32c>)
 800bd72:	4598      	cmp	r8, r3
 800bd74:	f200 80d1 	bhi.w	800bf1a <__ieee754_rem_pio2+0x2ca>
 800bd78:	f7ff faa8 	bl	800b2cc <fabs>
 800bd7c:	ec57 6b10 	vmov	r6, r7, d0
 800bd80:	a375      	add	r3, pc, #468	@ (adr r3, 800bf58 <__ieee754_rem_pio2+0x308>)
 800bd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd86:	4630      	mov	r0, r6
 800bd88:	4639      	mov	r1, r7
 800bd8a:	f7f4 fc35 	bl	80005f8 <__aeabi_dmul>
 800bd8e:	4b7c      	ldr	r3, [pc, #496]	@ (800bf80 <__ieee754_rem_pio2+0x330>)
 800bd90:	2200      	movs	r2, #0
 800bd92:	f7f4 fa7b 	bl	800028c <__adddf3>
 800bd96:	f7f4 fedf 	bl	8000b58 <__aeabi_d2iz>
 800bd9a:	4605      	mov	r5, r0
 800bd9c:	f7f4 fbc2 	bl	8000524 <__aeabi_i2d>
 800bda0:	4602      	mov	r2, r0
 800bda2:	460b      	mov	r3, r1
 800bda4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bda8:	a363      	add	r3, pc, #396	@ (adr r3, 800bf38 <__ieee754_rem_pio2+0x2e8>)
 800bdaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdae:	f7f4 fc23 	bl	80005f8 <__aeabi_dmul>
 800bdb2:	4602      	mov	r2, r0
 800bdb4:	460b      	mov	r3, r1
 800bdb6:	4630      	mov	r0, r6
 800bdb8:	4639      	mov	r1, r7
 800bdba:	f7f4 fa65 	bl	8000288 <__aeabi_dsub>
 800bdbe:	a360      	add	r3, pc, #384	@ (adr r3, 800bf40 <__ieee754_rem_pio2+0x2f0>)
 800bdc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc4:	4682      	mov	sl, r0
 800bdc6:	468b      	mov	fp, r1
 800bdc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdcc:	f7f4 fc14 	bl	80005f8 <__aeabi_dmul>
 800bdd0:	2d1f      	cmp	r5, #31
 800bdd2:	4606      	mov	r6, r0
 800bdd4:	460f      	mov	r7, r1
 800bdd6:	dc0c      	bgt.n	800bdf2 <__ieee754_rem_pio2+0x1a2>
 800bdd8:	4b6a      	ldr	r3, [pc, #424]	@ (800bf84 <__ieee754_rem_pio2+0x334>)
 800bdda:	1e6a      	subs	r2, r5, #1
 800bddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bde0:	4543      	cmp	r3, r8
 800bde2:	d006      	beq.n	800bdf2 <__ieee754_rem_pio2+0x1a2>
 800bde4:	4632      	mov	r2, r6
 800bde6:	463b      	mov	r3, r7
 800bde8:	4650      	mov	r0, sl
 800bdea:	4659      	mov	r1, fp
 800bdec:	f7f4 fa4c 	bl	8000288 <__aeabi_dsub>
 800bdf0:	e00e      	b.n	800be10 <__ieee754_rem_pio2+0x1c0>
 800bdf2:	463b      	mov	r3, r7
 800bdf4:	4632      	mov	r2, r6
 800bdf6:	4650      	mov	r0, sl
 800bdf8:	4659      	mov	r1, fp
 800bdfa:	f7f4 fa45 	bl	8000288 <__aeabi_dsub>
 800bdfe:	ea4f 5328 	mov.w	r3, r8, asr #20
 800be02:	9305      	str	r3, [sp, #20]
 800be04:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800be08:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800be0c:	2b10      	cmp	r3, #16
 800be0e:	dc02      	bgt.n	800be16 <__ieee754_rem_pio2+0x1c6>
 800be10:	e9c4 0100 	strd	r0, r1, [r4]
 800be14:	e039      	b.n	800be8a <__ieee754_rem_pio2+0x23a>
 800be16:	a34c      	add	r3, pc, #304	@ (adr r3, 800bf48 <__ieee754_rem_pio2+0x2f8>)
 800be18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be20:	f7f4 fbea 	bl	80005f8 <__aeabi_dmul>
 800be24:	4606      	mov	r6, r0
 800be26:	460f      	mov	r7, r1
 800be28:	4602      	mov	r2, r0
 800be2a:	460b      	mov	r3, r1
 800be2c:	4650      	mov	r0, sl
 800be2e:	4659      	mov	r1, fp
 800be30:	f7f4 fa2a 	bl	8000288 <__aeabi_dsub>
 800be34:	4602      	mov	r2, r0
 800be36:	460b      	mov	r3, r1
 800be38:	4680      	mov	r8, r0
 800be3a:	4689      	mov	r9, r1
 800be3c:	4650      	mov	r0, sl
 800be3e:	4659      	mov	r1, fp
 800be40:	f7f4 fa22 	bl	8000288 <__aeabi_dsub>
 800be44:	4632      	mov	r2, r6
 800be46:	463b      	mov	r3, r7
 800be48:	f7f4 fa1e 	bl	8000288 <__aeabi_dsub>
 800be4c:	a340      	add	r3, pc, #256	@ (adr r3, 800bf50 <__ieee754_rem_pio2+0x300>)
 800be4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be52:	4606      	mov	r6, r0
 800be54:	460f      	mov	r7, r1
 800be56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be5a:	f7f4 fbcd 	bl	80005f8 <__aeabi_dmul>
 800be5e:	4632      	mov	r2, r6
 800be60:	463b      	mov	r3, r7
 800be62:	f7f4 fa11 	bl	8000288 <__aeabi_dsub>
 800be66:	4602      	mov	r2, r0
 800be68:	460b      	mov	r3, r1
 800be6a:	4606      	mov	r6, r0
 800be6c:	460f      	mov	r7, r1
 800be6e:	4640      	mov	r0, r8
 800be70:	4649      	mov	r1, r9
 800be72:	f7f4 fa09 	bl	8000288 <__aeabi_dsub>
 800be76:	9a05      	ldr	r2, [sp, #20]
 800be78:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800be7c:	1ad3      	subs	r3, r2, r3
 800be7e:	2b31      	cmp	r3, #49	@ 0x31
 800be80:	dc20      	bgt.n	800bec4 <__ieee754_rem_pio2+0x274>
 800be82:	e9c4 0100 	strd	r0, r1, [r4]
 800be86:	46c2      	mov	sl, r8
 800be88:	46cb      	mov	fp, r9
 800be8a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800be8e:	4650      	mov	r0, sl
 800be90:	4642      	mov	r2, r8
 800be92:	464b      	mov	r3, r9
 800be94:	4659      	mov	r1, fp
 800be96:	f7f4 f9f7 	bl	8000288 <__aeabi_dsub>
 800be9a:	463b      	mov	r3, r7
 800be9c:	4632      	mov	r2, r6
 800be9e:	f7f4 f9f3 	bl	8000288 <__aeabi_dsub>
 800bea2:	9b04      	ldr	r3, [sp, #16]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800beaa:	f6bf af0e 	bge.w	800bcca <__ieee754_rem_pio2+0x7a>
 800beae:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800beb2:	6063      	str	r3, [r4, #4]
 800beb4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800beb8:	f8c4 8000 	str.w	r8, [r4]
 800bebc:	60a0      	str	r0, [r4, #8]
 800bebe:	60e3      	str	r3, [r4, #12]
 800bec0:	426d      	negs	r5, r5
 800bec2:	e702      	b.n	800bcca <__ieee754_rem_pio2+0x7a>
 800bec4:	a326      	add	r3, pc, #152	@ (adr r3, 800bf60 <__ieee754_rem_pio2+0x310>)
 800bec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bece:	f7f4 fb93 	bl	80005f8 <__aeabi_dmul>
 800bed2:	4606      	mov	r6, r0
 800bed4:	460f      	mov	r7, r1
 800bed6:	4602      	mov	r2, r0
 800bed8:	460b      	mov	r3, r1
 800beda:	4640      	mov	r0, r8
 800bedc:	4649      	mov	r1, r9
 800bede:	f7f4 f9d3 	bl	8000288 <__aeabi_dsub>
 800bee2:	4602      	mov	r2, r0
 800bee4:	460b      	mov	r3, r1
 800bee6:	4682      	mov	sl, r0
 800bee8:	468b      	mov	fp, r1
 800beea:	4640      	mov	r0, r8
 800beec:	4649      	mov	r1, r9
 800beee:	f7f4 f9cb 	bl	8000288 <__aeabi_dsub>
 800bef2:	4632      	mov	r2, r6
 800bef4:	463b      	mov	r3, r7
 800bef6:	f7f4 f9c7 	bl	8000288 <__aeabi_dsub>
 800befa:	a31b      	add	r3, pc, #108	@ (adr r3, 800bf68 <__ieee754_rem_pio2+0x318>)
 800befc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf00:	4606      	mov	r6, r0
 800bf02:	460f      	mov	r7, r1
 800bf04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf08:	f7f4 fb76 	bl	80005f8 <__aeabi_dmul>
 800bf0c:	4632      	mov	r2, r6
 800bf0e:	463b      	mov	r3, r7
 800bf10:	f7f4 f9ba 	bl	8000288 <__aeabi_dsub>
 800bf14:	4606      	mov	r6, r0
 800bf16:	460f      	mov	r7, r1
 800bf18:	e764      	b.n	800bde4 <__ieee754_rem_pio2+0x194>
 800bf1a:	4b1b      	ldr	r3, [pc, #108]	@ (800bf88 <__ieee754_rem_pio2+0x338>)
 800bf1c:	4598      	cmp	r8, r3
 800bf1e:	d935      	bls.n	800bf8c <__ieee754_rem_pio2+0x33c>
 800bf20:	4632      	mov	r2, r6
 800bf22:	463b      	mov	r3, r7
 800bf24:	4630      	mov	r0, r6
 800bf26:	4639      	mov	r1, r7
 800bf28:	f7f4 f9ae 	bl	8000288 <__aeabi_dsub>
 800bf2c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bf30:	e9c4 0100 	strd	r0, r1, [r4]
 800bf34:	e69e      	b.n	800bc74 <__ieee754_rem_pio2+0x24>
 800bf36:	bf00      	nop
 800bf38:	54400000 	.word	0x54400000
 800bf3c:	3ff921fb 	.word	0x3ff921fb
 800bf40:	1a626331 	.word	0x1a626331
 800bf44:	3dd0b461 	.word	0x3dd0b461
 800bf48:	1a600000 	.word	0x1a600000
 800bf4c:	3dd0b461 	.word	0x3dd0b461
 800bf50:	2e037073 	.word	0x2e037073
 800bf54:	3ba3198a 	.word	0x3ba3198a
 800bf58:	6dc9c883 	.word	0x6dc9c883
 800bf5c:	3fe45f30 	.word	0x3fe45f30
 800bf60:	2e000000 	.word	0x2e000000
 800bf64:	3ba3198a 	.word	0x3ba3198a
 800bf68:	252049c1 	.word	0x252049c1
 800bf6c:	397b839a 	.word	0x397b839a
 800bf70:	3fe921fb 	.word	0x3fe921fb
 800bf74:	4002d97b 	.word	0x4002d97b
 800bf78:	3ff921fb 	.word	0x3ff921fb
 800bf7c:	413921fb 	.word	0x413921fb
 800bf80:	3fe00000 	.word	0x3fe00000
 800bf84:	0800cd50 	.word	0x0800cd50
 800bf88:	7fefffff 	.word	0x7fefffff
 800bf8c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800bf90:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800bf94:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800bf98:	4630      	mov	r0, r6
 800bf9a:	460f      	mov	r7, r1
 800bf9c:	f7f4 fddc 	bl	8000b58 <__aeabi_d2iz>
 800bfa0:	f7f4 fac0 	bl	8000524 <__aeabi_i2d>
 800bfa4:	4602      	mov	r2, r0
 800bfa6:	460b      	mov	r3, r1
 800bfa8:	4630      	mov	r0, r6
 800bfaa:	4639      	mov	r1, r7
 800bfac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bfb0:	f7f4 f96a 	bl	8000288 <__aeabi_dsub>
 800bfb4:	4b22      	ldr	r3, [pc, #136]	@ (800c040 <__ieee754_rem_pio2+0x3f0>)
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	f7f4 fb1e 	bl	80005f8 <__aeabi_dmul>
 800bfbc:	460f      	mov	r7, r1
 800bfbe:	4606      	mov	r6, r0
 800bfc0:	f7f4 fdca 	bl	8000b58 <__aeabi_d2iz>
 800bfc4:	f7f4 faae 	bl	8000524 <__aeabi_i2d>
 800bfc8:	4602      	mov	r2, r0
 800bfca:	460b      	mov	r3, r1
 800bfcc:	4630      	mov	r0, r6
 800bfce:	4639      	mov	r1, r7
 800bfd0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bfd4:	f7f4 f958 	bl	8000288 <__aeabi_dsub>
 800bfd8:	4b19      	ldr	r3, [pc, #100]	@ (800c040 <__ieee754_rem_pio2+0x3f0>)
 800bfda:	2200      	movs	r2, #0
 800bfdc:	f7f4 fb0c 	bl	80005f8 <__aeabi_dmul>
 800bfe0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800bfe4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800bfe8:	f04f 0803 	mov.w	r8, #3
 800bfec:	2600      	movs	r6, #0
 800bfee:	2700      	movs	r7, #0
 800bff0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800bff4:	4632      	mov	r2, r6
 800bff6:	463b      	mov	r3, r7
 800bff8:	46c2      	mov	sl, r8
 800bffa:	f108 38ff 	add.w	r8, r8, #4294967295
 800bffe:	f7f4 fd63 	bl	8000ac8 <__aeabi_dcmpeq>
 800c002:	2800      	cmp	r0, #0
 800c004:	d1f4      	bne.n	800bff0 <__ieee754_rem_pio2+0x3a0>
 800c006:	4b0f      	ldr	r3, [pc, #60]	@ (800c044 <__ieee754_rem_pio2+0x3f4>)
 800c008:	9301      	str	r3, [sp, #4]
 800c00a:	2302      	movs	r3, #2
 800c00c:	9300      	str	r3, [sp, #0]
 800c00e:	462a      	mov	r2, r5
 800c010:	4653      	mov	r3, sl
 800c012:	4621      	mov	r1, r4
 800c014:	a806      	add	r0, sp, #24
 800c016:	f000 f817 	bl	800c048 <__kernel_rem_pio2>
 800c01a:	9b04      	ldr	r3, [sp, #16]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	4605      	mov	r5, r0
 800c020:	f6bf ae53 	bge.w	800bcca <__ieee754_rem_pio2+0x7a>
 800c024:	e9d4 2100 	ldrd	r2, r1, [r4]
 800c028:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c02c:	e9c4 2300 	strd	r2, r3, [r4]
 800c030:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800c034:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c038:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c03c:	e740      	b.n	800bec0 <__ieee754_rem_pio2+0x270>
 800c03e:	bf00      	nop
 800c040:	41700000 	.word	0x41700000
 800c044:	0800cdd0 	.word	0x0800cdd0

0800c048 <__kernel_rem_pio2>:
 800c048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c04c:	ed2d 8b02 	vpush	{d8}
 800c050:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800c054:	f112 0f14 	cmn.w	r2, #20
 800c058:	9306      	str	r3, [sp, #24]
 800c05a:	9104      	str	r1, [sp, #16]
 800c05c:	4bbe      	ldr	r3, [pc, #760]	@ (800c358 <__kernel_rem_pio2+0x310>)
 800c05e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800c060:	9008      	str	r0, [sp, #32]
 800c062:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c066:	9300      	str	r3, [sp, #0]
 800c068:	9b06      	ldr	r3, [sp, #24]
 800c06a:	f103 33ff 	add.w	r3, r3, #4294967295
 800c06e:	bfa8      	it	ge
 800c070:	1ed4      	subge	r4, r2, #3
 800c072:	9305      	str	r3, [sp, #20]
 800c074:	bfb2      	itee	lt
 800c076:	2400      	movlt	r4, #0
 800c078:	2318      	movge	r3, #24
 800c07a:	fb94 f4f3 	sdivge	r4, r4, r3
 800c07e:	f06f 0317 	mvn.w	r3, #23
 800c082:	fb04 3303 	mla	r3, r4, r3, r3
 800c086:	eb03 0b02 	add.w	fp, r3, r2
 800c08a:	9b00      	ldr	r3, [sp, #0]
 800c08c:	9a05      	ldr	r2, [sp, #20]
 800c08e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800c348 <__kernel_rem_pio2+0x300>
 800c092:	eb03 0802 	add.w	r8, r3, r2
 800c096:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800c098:	1aa7      	subs	r7, r4, r2
 800c09a:	ae20      	add	r6, sp, #128	@ 0x80
 800c09c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c0a0:	2500      	movs	r5, #0
 800c0a2:	4545      	cmp	r5, r8
 800c0a4:	dd13      	ble.n	800c0ce <__kernel_rem_pio2+0x86>
 800c0a6:	9b06      	ldr	r3, [sp, #24]
 800c0a8:	aa20      	add	r2, sp, #128	@ 0x80
 800c0aa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c0ae:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800c0b2:	f04f 0800 	mov.w	r8, #0
 800c0b6:	9b00      	ldr	r3, [sp, #0]
 800c0b8:	4598      	cmp	r8, r3
 800c0ba:	dc31      	bgt.n	800c120 <__kernel_rem_pio2+0xd8>
 800c0bc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800c348 <__kernel_rem_pio2+0x300>
 800c0c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c0c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c0c8:	462f      	mov	r7, r5
 800c0ca:	2600      	movs	r6, #0
 800c0cc:	e01b      	b.n	800c106 <__kernel_rem_pio2+0xbe>
 800c0ce:	42ef      	cmn	r7, r5
 800c0d0:	d407      	bmi.n	800c0e2 <__kernel_rem_pio2+0x9a>
 800c0d2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c0d6:	f7f4 fa25 	bl	8000524 <__aeabi_i2d>
 800c0da:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c0de:	3501      	adds	r5, #1
 800c0e0:	e7df      	b.n	800c0a2 <__kernel_rem_pio2+0x5a>
 800c0e2:	ec51 0b18 	vmov	r0, r1, d8
 800c0e6:	e7f8      	b.n	800c0da <__kernel_rem_pio2+0x92>
 800c0e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0ec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c0f0:	f7f4 fa82 	bl	80005f8 <__aeabi_dmul>
 800c0f4:	4602      	mov	r2, r0
 800c0f6:	460b      	mov	r3, r1
 800c0f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0fc:	f7f4 f8c6 	bl	800028c <__adddf3>
 800c100:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c104:	3601      	adds	r6, #1
 800c106:	9b05      	ldr	r3, [sp, #20]
 800c108:	429e      	cmp	r6, r3
 800c10a:	f1a7 0708 	sub.w	r7, r7, #8
 800c10e:	ddeb      	ble.n	800c0e8 <__kernel_rem_pio2+0xa0>
 800c110:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c114:	f108 0801 	add.w	r8, r8, #1
 800c118:	ecaa 7b02 	vstmia	sl!, {d7}
 800c11c:	3508      	adds	r5, #8
 800c11e:	e7ca      	b.n	800c0b6 <__kernel_rem_pio2+0x6e>
 800c120:	9b00      	ldr	r3, [sp, #0]
 800c122:	f8dd 8000 	ldr.w	r8, [sp]
 800c126:	aa0c      	add	r2, sp, #48	@ 0x30
 800c128:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c12c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c12e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800c130:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c134:	9309      	str	r3, [sp, #36]	@ 0x24
 800c136:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800c13a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c13c:	ab98      	add	r3, sp, #608	@ 0x260
 800c13e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c142:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800c146:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c14a:	ac0c      	add	r4, sp, #48	@ 0x30
 800c14c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800c14e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800c152:	46a1      	mov	r9, r4
 800c154:	46c2      	mov	sl, r8
 800c156:	f1ba 0f00 	cmp.w	sl, #0
 800c15a:	f1a5 0508 	sub.w	r5, r5, #8
 800c15e:	dc77      	bgt.n	800c250 <__kernel_rem_pio2+0x208>
 800c160:	4658      	mov	r0, fp
 800c162:	ed9d 0b02 	vldr	d0, [sp, #8]
 800c166:	f000 fac7 	bl	800c6f8 <scalbn>
 800c16a:	ec57 6b10 	vmov	r6, r7, d0
 800c16e:	2200      	movs	r2, #0
 800c170:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800c174:	4630      	mov	r0, r6
 800c176:	4639      	mov	r1, r7
 800c178:	f7f4 fa3e 	bl	80005f8 <__aeabi_dmul>
 800c17c:	ec41 0b10 	vmov	d0, r0, r1
 800c180:	f000 fb3a 	bl	800c7f8 <floor>
 800c184:	4b75      	ldr	r3, [pc, #468]	@ (800c35c <__kernel_rem_pio2+0x314>)
 800c186:	ec51 0b10 	vmov	r0, r1, d0
 800c18a:	2200      	movs	r2, #0
 800c18c:	f7f4 fa34 	bl	80005f8 <__aeabi_dmul>
 800c190:	4602      	mov	r2, r0
 800c192:	460b      	mov	r3, r1
 800c194:	4630      	mov	r0, r6
 800c196:	4639      	mov	r1, r7
 800c198:	f7f4 f876 	bl	8000288 <__aeabi_dsub>
 800c19c:	460f      	mov	r7, r1
 800c19e:	4606      	mov	r6, r0
 800c1a0:	f7f4 fcda 	bl	8000b58 <__aeabi_d2iz>
 800c1a4:	9002      	str	r0, [sp, #8]
 800c1a6:	f7f4 f9bd 	bl	8000524 <__aeabi_i2d>
 800c1aa:	4602      	mov	r2, r0
 800c1ac:	460b      	mov	r3, r1
 800c1ae:	4630      	mov	r0, r6
 800c1b0:	4639      	mov	r1, r7
 800c1b2:	f7f4 f869 	bl	8000288 <__aeabi_dsub>
 800c1b6:	f1bb 0f00 	cmp.w	fp, #0
 800c1ba:	4606      	mov	r6, r0
 800c1bc:	460f      	mov	r7, r1
 800c1be:	dd6c      	ble.n	800c29a <__kernel_rem_pio2+0x252>
 800c1c0:	f108 31ff 	add.w	r1, r8, #4294967295
 800c1c4:	ab0c      	add	r3, sp, #48	@ 0x30
 800c1c6:	9d02      	ldr	r5, [sp, #8]
 800c1c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c1cc:	f1cb 0018 	rsb	r0, fp, #24
 800c1d0:	fa43 f200 	asr.w	r2, r3, r0
 800c1d4:	4415      	add	r5, r2
 800c1d6:	4082      	lsls	r2, r0
 800c1d8:	1a9b      	subs	r3, r3, r2
 800c1da:	aa0c      	add	r2, sp, #48	@ 0x30
 800c1dc:	9502      	str	r5, [sp, #8]
 800c1de:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c1e2:	f1cb 0217 	rsb	r2, fp, #23
 800c1e6:	fa43 f902 	asr.w	r9, r3, r2
 800c1ea:	f1b9 0f00 	cmp.w	r9, #0
 800c1ee:	dd64      	ble.n	800c2ba <__kernel_rem_pio2+0x272>
 800c1f0:	9b02      	ldr	r3, [sp, #8]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	3301      	adds	r3, #1
 800c1f6:	9302      	str	r3, [sp, #8]
 800c1f8:	4615      	mov	r5, r2
 800c1fa:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800c1fe:	4590      	cmp	r8, r2
 800c200:	f300 80b8 	bgt.w	800c374 <__kernel_rem_pio2+0x32c>
 800c204:	f1bb 0f00 	cmp.w	fp, #0
 800c208:	dd07      	ble.n	800c21a <__kernel_rem_pio2+0x1d2>
 800c20a:	f1bb 0f01 	cmp.w	fp, #1
 800c20e:	f000 80bf 	beq.w	800c390 <__kernel_rem_pio2+0x348>
 800c212:	f1bb 0f02 	cmp.w	fp, #2
 800c216:	f000 80c6 	beq.w	800c3a6 <__kernel_rem_pio2+0x35e>
 800c21a:	f1b9 0f02 	cmp.w	r9, #2
 800c21e:	d14c      	bne.n	800c2ba <__kernel_rem_pio2+0x272>
 800c220:	4632      	mov	r2, r6
 800c222:	463b      	mov	r3, r7
 800c224:	494e      	ldr	r1, [pc, #312]	@ (800c360 <__kernel_rem_pio2+0x318>)
 800c226:	2000      	movs	r0, #0
 800c228:	f7f4 f82e 	bl	8000288 <__aeabi_dsub>
 800c22c:	4606      	mov	r6, r0
 800c22e:	460f      	mov	r7, r1
 800c230:	2d00      	cmp	r5, #0
 800c232:	d042      	beq.n	800c2ba <__kernel_rem_pio2+0x272>
 800c234:	4658      	mov	r0, fp
 800c236:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800c350 <__kernel_rem_pio2+0x308>
 800c23a:	f000 fa5d 	bl	800c6f8 <scalbn>
 800c23e:	4630      	mov	r0, r6
 800c240:	4639      	mov	r1, r7
 800c242:	ec53 2b10 	vmov	r2, r3, d0
 800c246:	f7f4 f81f 	bl	8000288 <__aeabi_dsub>
 800c24a:	4606      	mov	r6, r0
 800c24c:	460f      	mov	r7, r1
 800c24e:	e034      	b.n	800c2ba <__kernel_rem_pio2+0x272>
 800c250:	4b44      	ldr	r3, [pc, #272]	@ (800c364 <__kernel_rem_pio2+0x31c>)
 800c252:	2200      	movs	r2, #0
 800c254:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c258:	f7f4 f9ce 	bl	80005f8 <__aeabi_dmul>
 800c25c:	f7f4 fc7c 	bl	8000b58 <__aeabi_d2iz>
 800c260:	f7f4 f960 	bl	8000524 <__aeabi_i2d>
 800c264:	4b40      	ldr	r3, [pc, #256]	@ (800c368 <__kernel_rem_pio2+0x320>)
 800c266:	2200      	movs	r2, #0
 800c268:	4606      	mov	r6, r0
 800c26a:	460f      	mov	r7, r1
 800c26c:	f7f4 f9c4 	bl	80005f8 <__aeabi_dmul>
 800c270:	4602      	mov	r2, r0
 800c272:	460b      	mov	r3, r1
 800c274:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c278:	f7f4 f806 	bl	8000288 <__aeabi_dsub>
 800c27c:	f7f4 fc6c 	bl	8000b58 <__aeabi_d2iz>
 800c280:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c284:	f849 0b04 	str.w	r0, [r9], #4
 800c288:	4639      	mov	r1, r7
 800c28a:	4630      	mov	r0, r6
 800c28c:	f7f3 fffe 	bl	800028c <__adddf3>
 800c290:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c294:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c298:	e75d      	b.n	800c156 <__kernel_rem_pio2+0x10e>
 800c29a:	d107      	bne.n	800c2ac <__kernel_rem_pio2+0x264>
 800c29c:	f108 33ff 	add.w	r3, r8, #4294967295
 800c2a0:	aa0c      	add	r2, sp, #48	@ 0x30
 800c2a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2a6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800c2aa:	e79e      	b.n	800c1ea <__kernel_rem_pio2+0x1a2>
 800c2ac:	4b2f      	ldr	r3, [pc, #188]	@ (800c36c <__kernel_rem_pio2+0x324>)
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	f7f4 fc28 	bl	8000b04 <__aeabi_dcmpge>
 800c2b4:	2800      	cmp	r0, #0
 800c2b6:	d143      	bne.n	800c340 <__kernel_rem_pio2+0x2f8>
 800c2b8:	4681      	mov	r9, r0
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	2300      	movs	r3, #0
 800c2be:	4630      	mov	r0, r6
 800c2c0:	4639      	mov	r1, r7
 800c2c2:	f7f4 fc01 	bl	8000ac8 <__aeabi_dcmpeq>
 800c2c6:	2800      	cmp	r0, #0
 800c2c8:	f000 80bf 	beq.w	800c44a <__kernel_rem_pio2+0x402>
 800c2cc:	f108 33ff 	add.w	r3, r8, #4294967295
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	9900      	ldr	r1, [sp, #0]
 800c2d4:	428b      	cmp	r3, r1
 800c2d6:	da6e      	bge.n	800c3b6 <__kernel_rem_pio2+0x36e>
 800c2d8:	2a00      	cmp	r2, #0
 800c2da:	f000 8089 	beq.w	800c3f0 <__kernel_rem_pio2+0x3a8>
 800c2de:	f108 38ff 	add.w	r8, r8, #4294967295
 800c2e2:	ab0c      	add	r3, sp, #48	@ 0x30
 800c2e4:	f1ab 0b18 	sub.w	fp, fp, #24
 800c2e8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d0f6      	beq.n	800c2de <__kernel_rem_pio2+0x296>
 800c2f0:	4658      	mov	r0, fp
 800c2f2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800c350 <__kernel_rem_pio2+0x308>
 800c2f6:	f000 f9ff 	bl	800c6f8 <scalbn>
 800c2fa:	f108 0301 	add.w	r3, r8, #1
 800c2fe:	00da      	lsls	r2, r3, #3
 800c300:	9205      	str	r2, [sp, #20]
 800c302:	ec55 4b10 	vmov	r4, r5, d0
 800c306:	aa70      	add	r2, sp, #448	@ 0x1c0
 800c308:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800c364 <__kernel_rem_pio2+0x31c>
 800c30c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800c310:	4646      	mov	r6, r8
 800c312:	f04f 0a00 	mov.w	sl, #0
 800c316:	2e00      	cmp	r6, #0
 800c318:	f280 80cf 	bge.w	800c4ba <__kernel_rem_pio2+0x472>
 800c31c:	4644      	mov	r4, r8
 800c31e:	2c00      	cmp	r4, #0
 800c320:	f2c0 80fd 	blt.w	800c51e <__kernel_rem_pio2+0x4d6>
 800c324:	4b12      	ldr	r3, [pc, #72]	@ (800c370 <__kernel_rem_pio2+0x328>)
 800c326:	461f      	mov	r7, r3
 800c328:	ab70      	add	r3, sp, #448	@ 0x1c0
 800c32a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c32e:	9306      	str	r3, [sp, #24]
 800c330:	f04f 0a00 	mov.w	sl, #0
 800c334:	f04f 0b00 	mov.w	fp, #0
 800c338:	2600      	movs	r6, #0
 800c33a:	eba8 0504 	sub.w	r5, r8, r4
 800c33e:	e0e2      	b.n	800c506 <__kernel_rem_pio2+0x4be>
 800c340:	f04f 0902 	mov.w	r9, #2
 800c344:	e754      	b.n	800c1f0 <__kernel_rem_pio2+0x1a8>
 800c346:	bf00      	nop
	...
 800c354:	3ff00000 	.word	0x3ff00000
 800c358:	0800cf18 	.word	0x0800cf18
 800c35c:	40200000 	.word	0x40200000
 800c360:	3ff00000 	.word	0x3ff00000
 800c364:	3e700000 	.word	0x3e700000
 800c368:	41700000 	.word	0x41700000
 800c36c:	3fe00000 	.word	0x3fe00000
 800c370:	0800ced8 	.word	0x0800ced8
 800c374:	f854 3b04 	ldr.w	r3, [r4], #4
 800c378:	b945      	cbnz	r5, 800c38c <__kernel_rem_pio2+0x344>
 800c37a:	b123      	cbz	r3, 800c386 <__kernel_rem_pio2+0x33e>
 800c37c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800c380:	f844 3c04 	str.w	r3, [r4, #-4]
 800c384:	2301      	movs	r3, #1
 800c386:	3201      	adds	r2, #1
 800c388:	461d      	mov	r5, r3
 800c38a:	e738      	b.n	800c1fe <__kernel_rem_pio2+0x1b6>
 800c38c:	1acb      	subs	r3, r1, r3
 800c38e:	e7f7      	b.n	800c380 <__kernel_rem_pio2+0x338>
 800c390:	f108 32ff 	add.w	r2, r8, #4294967295
 800c394:	ab0c      	add	r3, sp, #48	@ 0x30
 800c396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c39a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c39e:	a90c      	add	r1, sp, #48	@ 0x30
 800c3a0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c3a4:	e739      	b.n	800c21a <__kernel_rem_pio2+0x1d2>
 800c3a6:	f108 32ff 	add.w	r2, r8, #4294967295
 800c3aa:	ab0c      	add	r3, sp, #48	@ 0x30
 800c3ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3b0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c3b4:	e7f3      	b.n	800c39e <__kernel_rem_pio2+0x356>
 800c3b6:	a90c      	add	r1, sp, #48	@ 0x30
 800c3b8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c3bc:	3b01      	subs	r3, #1
 800c3be:	430a      	orrs	r2, r1
 800c3c0:	e787      	b.n	800c2d2 <__kernel_rem_pio2+0x28a>
 800c3c2:	3401      	adds	r4, #1
 800c3c4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c3c8:	2a00      	cmp	r2, #0
 800c3ca:	d0fa      	beq.n	800c3c2 <__kernel_rem_pio2+0x37a>
 800c3cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c3ce:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c3d2:	eb0d 0503 	add.w	r5, sp, r3
 800c3d6:	9b06      	ldr	r3, [sp, #24]
 800c3d8:	aa20      	add	r2, sp, #128	@ 0x80
 800c3da:	4443      	add	r3, r8
 800c3dc:	f108 0701 	add.w	r7, r8, #1
 800c3e0:	3d98      	subs	r5, #152	@ 0x98
 800c3e2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800c3e6:	4444      	add	r4, r8
 800c3e8:	42bc      	cmp	r4, r7
 800c3ea:	da04      	bge.n	800c3f6 <__kernel_rem_pio2+0x3ae>
 800c3ec:	46a0      	mov	r8, r4
 800c3ee:	e6a2      	b.n	800c136 <__kernel_rem_pio2+0xee>
 800c3f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3f2:	2401      	movs	r4, #1
 800c3f4:	e7e6      	b.n	800c3c4 <__kernel_rem_pio2+0x37c>
 800c3f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3f8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800c3fc:	f7f4 f892 	bl	8000524 <__aeabi_i2d>
 800c400:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800c6c8 <__kernel_rem_pio2+0x680>
 800c404:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c408:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c40c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c410:	46b2      	mov	sl, r6
 800c412:	f04f 0800 	mov.w	r8, #0
 800c416:	9b05      	ldr	r3, [sp, #20]
 800c418:	4598      	cmp	r8, r3
 800c41a:	dd05      	ble.n	800c428 <__kernel_rem_pio2+0x3e0>
 800c41c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c420:	3701      	adds	r7, #1
 800c422:	eca5 7b02 	vstmia	r5!, {d7}
 800c426:	e7df      	b.n	800c3e8 <__kernel_rem_pio2+0x3a0>
 800c428:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800c42c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c430:	f7f4 f8e2 	bl	80005f8 <__aeabi_dmul>
 800c434:	4602      	mov	r2, r0
 800c436:	460b      	mov	r3, r1
 800c438:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c43c:	f7f3 ff26 	bl	800028c <__adddf3>
 800c440:	f108 0801 	add.w	r8, r8, #1
 800c444:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c448:	e7e5      	b.n	800c416 <__kernel_rem_pio2+0x3ce>
 800c44a:	f1cb 0000 	rsb	r0, fp, #0
 800c44e:	ec47 6b10 	vmov	d0, r6, r7
 800c452:	f000 f951 	bl	800c6f8 <scalbn>
 800c456:	ec55 4b10 	vmov	r4, r5, d0
 800c45a:	4b9d      	ldr	r3, [pc, #628]	@ (800c6d0 <__kernel_rem_pio2+0x688>)
 800c45c:	2200      	movs	r2, #0
 800c45e:	4620      	mov	r0, r4
 800c460:	4629      	mov	r1, r5
 800c462:	f7f4 fb4f 	bl	8000b04 <__aeabi_dcmpge>
 800c466:	b300      	cbz	r0, 800c4aa <__kernel_rem_pio2+0x462>
 800c468:	4b9a      	ldr	r3, [pc, #616]	@ (800c6d4 <__kernel_rem_pio2+0x68c>)
 800c46a:	2200      	movs	r2, #0
 800c46c:	4620      	mov	r0, r4
 800c46e:	4629      	mov	r1, r5
 800c470:	f7f4 f8c2 	bl	80005f8 <__aeabi_dmul>
 800c474:	f7f4 fb70 	bl	8000b58 <__aeabi_d2iz>
 800c478:	4606      	mov	r6, r0
 800c47a:	f7f4 f853 	bl	8000524 <__aeabi_i2d>
 800c47e:	4b94      	ldr	r3, [pc, #592]	@ (800c6d0 <__kernel_rem_pio2+0x688>)
 800c480:	2200      	movs	r2, #0
 800c482:	f7f4 f8b9 	bl	80005f8 <__aeabi_dmul>
 800c486:	460b      	mov	r3, r1
 800c488:	4602      	mov	r2, r0
 800c48a:	4629      	mov	r1, r5
 800c48c:	4620      	mov	r0, r4
 800c48e:	f7f3 fefb 	bl	8000288 <__aeabi_dsub>
 800c492:	f7f4 fb61 	bl	8000b58 <__aeabi_d2iz>
 800c496:	ab0c      	add	r3, sp, #48	@ 0x30
 800c498:	f10b 0b18 	add.w	fp, fp, #24
 800c49c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800c4a0:	f108 0801 	add.w	r8, r8, #1
 800c4a4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800c4a8:	e722      	b.n	800c2f0 <__kernel_rem_pio2+0x2a8>
 800c4aa:	4620      	mov	r0, r4
 800c4ac:	4629      	mov	r1, r5
 800c4ae:	f7f4 fb53 	bl	8000b58 <__aeabi_d2iz>
 800c4b2:	ab0c      	add	r3, sp, #48	@ 0x30
 800c4b4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800c4b8:	e71a      	b.n	800c2f0 <__kernel_rem_pio2+0x2a8>
 800c4ba:	ab0c      	add	r3, sp, #48	@ 0x30
 800c4bc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c4c0:	f7f4 f830 	bl	8000524 <__aeabi_i2d>
 800c4c4:	4622      	mov	r2, r4
 800c4c6:	462b      	mov	r3, r5
 800c4c8:	f7f4 f896 	bl	80005f8 <__aeabi_dmul>
 800c4cc:	4652      	mov	r2, sl
 800c4ce:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800c4d2:	465b      	mov	r3, fp
 800c4d4:	4620      	mov	r0, r4
 800c4d6:	4629      	mov	r1, r5
 800c4d8:	f7f4 f88e 	bl	80005f8 <__aeabi_dmul>
 800c4dc:	3e01      	subs	r6, #1
 800c4de:	4604      	mov	r4, r0
 800c4e0:	460d      	mov	r5, r1
 800c4e2:	e718      	b.n	800c316 <__kernel_rem_pio2+0x2ce>
 800c4e4:	9906      	ldr	r1, [sp, #24]
 800c4e6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800c4ea:	9106      	str	r1, [sp, #24]
 800c4ec:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800c4f0:	f7f4 f882 	bl	80005f8 <__aeabi_dmul>
 800c4f4:	4602      	mov	r2, r0
 800c4f6:	460b      	mov	r3, r1
 800c4f8:	4650      	mov	r0, sl
 800c4fa:	4659      	mov	r1, fp
 800c4fc:	f7f3 fec6 	bl	800028c <__adddf3>
 800c500:	3601      	adds	r6, #1
 800c502:	4682      	mov	sl, r0
 800c504:	468b      	mov	fp, r1
 800c506:	9b00      	ldr	r3, [sp, #0]
 800c508:	429e      	cmp	r6, r3
 800c50a:	dc01      	bgt.n	800c510 <__kernel_rem_pio2+0x4c8>
 800c50c:	42b5      	cmp	r5, r6
 800c50e:	dae9      	bge.n	800c4e4 <__kernel_rem_pio2+0x49c>
 800c510:	ab48      	add	r3, sp, #288	@ 0x120
 800c512:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c516:	e9c5 ab00 	strd	sl, fp, [r5]
 800c51a:	3c01      	subs	r4, #1
 800c51c:	e6ff      	b.n	800c31e <__kernel_rem_pio2+0x2d6>
 800c51e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c520:	2b02      	cmp	r3, #2
 800c522:	dc0b      	bgt.n	800c53c <__kernel_rem_pio2+0x4f4>
 800c524:	2b00      	cmp	r3, #0
 800c526:	dc39      	bgt.n	800c59c <__kernel_rem_pio2+0x554>
 800c528:	d05d      	beq.n	800c5e6 <__kernel_rem_pio2+0x59e>
 800c52a:	9b02      	ldr	r3, [sp, #8]
 800c52c:	f003 0007 	and.w	r0, r3, #7
 800c530:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800c534:	ecbd 8b02 	vpop	{d8}
 800c538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c53c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c53e:	2b03      	cmp	r3, #3
 800c540:	d1f3      	bne.n	800c52a <__kernel_rem_pio2+0x4e2>
 800c542:	9b05      	ldr	r3, [sp, #20]
 800c544:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c548:	eb0d 0403 	add.w	r4, sp, r3
 800c54c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800c550:	4625      	mov	r5, r4
 800c552:	46c2      	mov	sl, r8
 800c554:	f1ba 0f00 	cmp.w	sl, #0
 800c558:	f1a5 0508 	sub.w	r5, r5, #8
 800c55c:	dc6b      	bgt.n	800c636 <__kernel_rem_pio2+0x5ee>
 800c55e:	4645      	mov	r5, r8
 800c560:	2d01      	cmp	r5, #1
 800c562:	f1a4 0408 	sub.w	r4, r4, #8
 800c566:	f300 8087 	bgt.w	800c678 <__kernel_rem_pio2+0x630>
 800c56a:	9c05      	ldr	r4, [sp, #20]
 800c56c:	ab48      	add	r3, sp, #288	@ 0x120
 800c56e:	441c      	add	r4, r3
 800c570:	2000      	movs	r0, #0
 800c572:	2100      	movs	r1, #0
 800c574:	f1b8 0f01 	cmp.w	r8, #1
 800c578:	f300 809c 	bgt.w	800c6b4 <__kernel_rem_pio2+0x66c>
 800c57c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800c580:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800c584:	f1b9 0f00 	cmp.w	r9, #0
 800c588:	f040 80a6 	bne.w	800c6d8 <__kernel_rem_pio2+0x690>
 800c58c:	9b04      	ldr	r3, [sp, #16]
 800c58e:	e9c3 7800 	strd	r7, r8, [r3]
 800c592:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800c596:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c59a:	e7c6      	b.n	800c52a <__kernel_rem_pio2+0x4e2>
 800c59c:	9d05      	ldr	r5, [sp, #20]
 800c59e:	ab48      	add	r3, sp, #288	@ 0x120
 800c5a0:	441d      	add	r5, r3
 800c5a2:	4644      	mov	r4, r8
 800c5a4:	2000      	movs	r0, #0
 800c5a6:	2100      	movs	r1, #0
 800c5a8:	2c00      	cmp	r4, #0
 800c5aa:	da35      	bge.n	800c618 <__kernel_rem_pio2+0x5d0>
 800c5ac:	f1b9 0f00 	cmp.w	r9, #0
 800c5b0:	d038      	beq.n	800c624 <__kernel_rem_pio2+0x5dc>
 800c5b2:	4602      	mov	r2, r0
 800c5b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c5b8:	9c04      	ldr	r4, [sp, #16]
 800c5ba:	e9c4 2300 	strd	r2, r3, [r4]
 800c5be:	4602      	mov	r2, r0
 800c5c0:	460b      	mov	r3, r1
 800c5c2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800c5c6:	f7f3 fe5f 	bl	8000288 <__aeabi_dsub>
 800c5ca:	ad4a      	add	r5, sp, #296	@ 0x128
 800c5cc:	2401      	movs	r4, #1
 800c5ce:	45a0      	cmp	r8, r4
 800c5d0:	da2b      	bge.n	800c62a <__kernel_rem_pio2+0x5e2>
 800c5d2:	f1b9 0f00 	cmp.w	r9, #0
 800c5d6:	d002      	beq.n	800c5de <__kernel_rem_pio2+0x596>
 800c5d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c5dc:	4619      	mov	r1, r3
 800c5de:	9b04      	ldr	r3, [sp, #16]
 800c5e0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c5e4:	e7a1      	b.n	800c52a <__kernel_rem_pio2+0x4e2>
 800c5e6:	9c05      	ldr	r4, [sp, #20]
 800c5e8:	ab48      	add	r3, sp, #288	@ 0x120
 800c5ea:	441c      	add	r4, r3
 800c5ec:	2000      	movs	r0, #0
 800c5ee:	2100      	movs	r1, #0
 800c5f0:	f1b8 0f00 	cmp.w	r8, #0
 800c5f4:	da09      	bge.n	800c60a <__kernel_rem_pio2+0x5c2>
 800c5f6:	f1b9 0f00 	cmp.w	r9, #0
 800c5fa:	d002      	beq.n	800c602 <__kernel_rem_pio2+0x5ba>
 800c5fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c600:	4619      	mov	r1, r3
 800c602:	9b04      	ldr	r3, [sp, #16]
 800c604:	e9c3 0100 	strd	r0, r1, [r3]
 800c608:	e78f      	b.n	800c52a <__kernel_rem_pio2+0x4e2>
 800c60a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c60e:	f7f3 fe3d 	bl	800028c <__adddf3>
 800c612:	f108 38ff 	add.w	r8, r8, #4294967295
 800c616:	e7eb      	b.n	800c5f0 <__kernel_rem_pio2+0x5a8>
 800c618:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800c61c:	f7f3 fe36 	bl	800028c <__adddf3>
 800c620:	3c01      	subs	r4, #1
 800c622:	e7c1      	b.n	800c5a8 <__kernel_rem_pio2+0x560>
 800c624:	4602      	mov	r2, r0
 800c626:	460b      	mov	r3, r1
 800c628:	e7c6      	b.n	800c5b8 <__kernel_rem_pio2+0x570>
 800c62a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800c62e:	f7f3 fe2d 	bl	800028c <__adddf3>
 800c632:	3401      	adds	r4, #1
 800c634:	e7cb      	b.n	800c5ce <__kernel_rem_pio2+0x586>
 800c636:	ed95 7b00 	vldr	d7, [r5]
 800c63a:	ed8d 7b00 	vstr	d7, [sp]
 800c63e:	ed95 7b02 	vldr	d7, [r5, #8]
 800c642:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c646:	ec53 2b17 	vmov	r2, r3, d7
 800c64a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c64e:	f7f3 fe1d 	bl	800028c <__adddf3>
 800c652:	4602      	mov	r2, r0
 800c654:	460b      	mov	r3, r1
 800c656:	4606      	mov	r6, r0
 800c658:	460f      	mov	r7, r1
 800c65a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c65e:	f7f3 fe13 	bl	8000288 <__aeabi_dsub>
 800c662:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c666:	f7f3 fe11 	bl	800028c <__adddf3>
 800c66a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c66e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800c672:	e9c5 6700 	strd	r6, r7, [r5]
 800c676:	e76d      	b.n	800c554 <__kernel_rem_pio2+0x50c>
 800c678:	ed94 7b00 	vldr	d7, [r4]
 800c67c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800c680:	ec51 0b17 	vmov	r0, r1, d7
 800c684:	4652      	mov	r2, sl
 800c686:	465b      	mov	r3, fp
 800c688:	ed8d 7b00 	vstr	d7, [sp]
 800c68c:	f7f3 fdfe 	bl	800028c <__adddf3>
 800c690:	4602      	mov	r2, r0
 800c692:	460b      	mov	r3, r1
 800c694:	4606      	mov	r6, r0
 800c696:	460f      	mov	r7, r1
 800c698:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c69c:	f7f3 fdf4 	bl	8000288 <__aeabi_dsub>
 800c6a0:	4652      	mov	r2, sl
 800c6a2:	465b      	mov	r3, fp
 800c6a4:	f7f3 fdf2 	bl	800028c <__adddf3>
 800c6a8:	3d01      	subs	r5, #1
 800c6aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c6ae:	e9c4 6700 	strd	r6, r7, [r4]
 800c6b2:	e755      	b.n	800c560 <__kernel_rem_pio2+0x518>
 800c6b4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c6b8:	f7f3 fde8 	bl	800028c <__adddf3>
 800c6bc:	f108 38ff 	add.w	r8, r8, #4294967295
 800c6c0:	e758      	b.n	800c574 <__kernel_rem_pio2+0x52c>
 800c6c2:	bf00      	nop
 800c6c4:	f3af 8000 	nop.w
	...
 800c6d0:	41700000 	.word	0x41700000
 800c6d4:	3e700000 	.word	0x3e700000
 800c6d8:	9b04      	ldr	r3, [sp, #16]
 800c6da:	9a04      	ldr	r2, [sp, #16]
 800c6dc:	601f      	str	r7, [r3, #0]
 800c6de:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800c6e2:	605c      	str	r4, [r3, #4]
 800c6e4:	609d      	str	r5, [r3, #8]
 800c6e6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c6ea:	60d3      	str	r3, [r2, #12]
 800c6ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c6f0:	6110      	str	r0, [r2, #16]
 800c6f2:	6153      	str	r3, [r2, #20]
 800c6f4:	e719      	b.n	800c52a <__kernel_rem_pio2+0x4e2>
 800c6f6:	bf00      	nop

0800c6f8 <scalbn>:
 800c6f8:	b570      	push	{r4, r5, r6, lr}
 800c6fa:	ec55 4b10 	vmov	r4, r5, d0
 800c6fe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c702:	4606      	mov	r6, r0
 800c704:	462b      	mov	r3, r5
 800c706:	b991      	cbnz	r1, 800c72e <scalbn+0x36>
 800c708:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c70c:	4323      	orrs	r3, r4
 800c70e:	d03d      	beq.n	800c78c <scalbn+0x94>
 800c710:	4b35      	ldr	r3, [pc, #212]	@ (800c7e8 <scalbn+0xf0>)
 800c712:	4620      	mov	r0, r4
 800c714:	4629      	mov	r1, r5
 800c716:	2200      	movs	r2, #0
 800c718:	f7f3 ff6e 	bl	80005f8 <__aeabi_dmul>
 800c71c:	4b33      	ldr	r3, [pc, #204]	@ (800c7ec <scalbn+0xf4>)
 800c71e:	429e      	cmp	r6, r3
 800c720:	4604      	mov	r4, r0
 800c722:	460d      	mov	r5, r1
 800c724:	da0f      	bge.n	800c746 <scalbn+0x4e>
 800c726:	a328      	add	r3, pc, #160	@ (adr r3, 800c7c8 <scalbn+0xd0>)
 800c728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c72c:	e01e      	b.n	800c76c <scalbn+0x74>
 800c72e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800c732:	4291      	cmp	r1, r2
 800c734:	d10b      	bne.n	800c74e <scalbn+0x56>
 800c736:	4622      	mov	r2, r4
 800c738:	4620      	mov	r0, r4
 800c73a:	4629      	mov	r1, r5
 800c73c:	f7f3 fda6 	bl	800028c <__adddf3>
 800c740:	4604      	mov	r4, r0
 800c742:	460d      	mov	r5, r1
 800c744:	e022      	b.n	800c78c <scalbn+0x94>
 800c746:	460b      	mov	r3, r1
 800c748:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c74c:	3936      	subs	r1, #54	@ 0x36
 800c74e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800c752:	4296      	cmp	r6, r2
 800c754:	dd0d      	ble.n	800c772 <scalbn+0x7a>
 800c756:	2d00      	cmp	r5, #0
 800c758:	a11d      	add	r1, pc, #116	@ (adr r1, 800c7d0 <scalbn+0xd8>)
 800c75a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c75e:	da02      	bge.n	800c766 <scalbn+0x6e>
 800c760:	a11d      	add	r1, pc, #116	@ (adr r1, 800c7d8 <scalbn+0xe0>)
 800c762:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c766:	a31a      	add	r3, pc, #104	@ (adr r3, 800c7d0 <scalbn+0xd8>)
 800c768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76c:	f7f3 ff44 	bl	80005f8 <__aeabi_dmul>
 800c770:	e7e6      	b.n	800c740 <scalbn+0x48>
 800c772:	1872      	adds	r2, r6, r1
 800c774:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c778:	428a      	cmp	r2, r1
 800c77a:	dcec      	bgt.n	800c756 <scalbn+0x5e>
 800c77c:	2a00      	cmp	r2, #0
 800c77e:	dd08      	ble.n	800c792 <scalbn+0x9a>
 800c780:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c784:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c788:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c78c:	ec45 4b10 	vmov	d0, r4, r5
 800c790:	bd70      	pop	{r4, r5, r6, pc}
 800c792:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c796:	da08      	bge.n	800c7aa <scalbn+0xb2>
 800c798:	2d00      	cmp	r5, #0
 800c79a:	a10b      	add	r1, pc, #44	@ (adr r1, 800c7c8 <scalbn+0xd0>)
 800c79c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7a0:	dac1      	bge.n	800c726 <scalbn+0x2e>
 800c7a2:	a10f      	add	r1, pc, #60	@ (adr r1, 800c7e0 <scalbn+0xe8>)
 800c7a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7a8:	e7bd      	b.n	800c726 <scalbn+0x2e>
 800c7aa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c7ae:	3236      	adds	r2, #54	@ 0x36
 800c7b0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c7b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c7b8:	4620      	mov	r0, r4
 800c7ba:	4b0d      	ldr	r3, [pc, #52]	@ (800c7f0 <scalbn+0xf8>)
 800c7bc:	4629      	mov	r1, r5
 800c7be:	2200      	movs	r2, #0
 800c7c0:	e7d4      	b.n	800c76c <scalbn+0x74>
 800c7c2:	bf00      	nop
 800c7c4:	f3af 8000 	nop.w
 800c7c8:	c2f8f359 	.word	0xc2f8f359
 800c7cc:	01a56e1f 	.word	0x01a56e1f
 800c7d0:	8800759c 	.word	0x8800759c
 800c7d4:	7e37e43c 	.word	0x7e37e43c
 800c7d8:	8800759c 	.word	0x8800759c
 800c7dc:	fe37e43c 	.word	0xfe37e43c
 800c7e0:	c2f8f359 	.word	0xc2f8f359
 800c7e4:	81a56e1f 	.word	0x81a56e1f
 800c7e8:	43500000 	.word	0x43500000
 800c7ec:	ffff3cb0 	.word	0xffff3cb0
 800c7f0:	3c900000 	.word	0x3c900000
 800c7f4:	00000000 	.word	0x00000000

0800c7f8 <floor>:
 800c7f8:	ec51 0b10 	vmov	r0, r1, d0
 800c7fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c804:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800c808:	2e13      	cmp	r6, #19
 800c80a:	460c      	mov	r4, r1
 800c80c:	4605      	mov	r5, r0
 800c80e:	4680      	mov	r8, r0
 800c810:	dc34      	bgt.n	800c87c <floor+0x84>
 800c812:	2e00      	cmp	r6, #0
 800c814:	da17      	bge.n	800c846 <floor+0x4e>
 800c816:	a332      	add	r3, pc, #200	@ (adr r3, 800c8e0 <floor+0xe8>)
 800c818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c81c:	f7f3 fd36 	bl	800028c <__adddf3>
 800c820:	2200      	movs	r2, #0
 800c822:	2300      	movs	r3, #0
 800c824:	f7f4 f978 	bl	8000b18 <__aeabi_dcmpgt>
 800c828:	b150      	cbz	r0, 800c840 <floor+0x48>
 800c82a:	2c00      	cmp	r4, #0
 800c82c:	da55      	bge.n	800c8da <floor+0xe2>
 800c82e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800c832:	432c      	orrs	r4, r5
 800c834:	2500      	movs	r5, #0
 800c836:	42ac      	cmp	r4, r5
 800c838:	4c2b      	ldr	r4, [pc, #172]	@ (800c8e8 <floor+0xf0>)
 800c83a:	bf08      	it	eq
 800c83c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800c840:	4621      	mov	r1, r4
 800c842:	4628      	mov	r0, r5
 800c844:	e023      	b.n	800c88e <floor+0x96>
 800c846:	4f29      	ldr	r7, [pc, #164]	@ (800c8ec <floor+0xf4>)
 800c848:	4137      	asrs	r7, r6
 800c84a:	ea01 0307 	and.w	r3, r1, r7
 800c84e:	4303      	orrs	r3, r0
 800c850:	d01d      	beq.n	800c88e <floor+0x96>
 800c852:	a323      	add	r3, pc, #140	@ (adr r3, 800c8e0 <floor+0xe8>)
 800c854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c858:	f7f3 fd18 	bl	800028c <__adddf3>
 800c85c:	2200      	movs	r2, #0
 800c85e:	2300      	movs	r3, #0
 800c860:	f7f4 f95a 	bl	8000b18 <__aeabi_dcmpgt>
 800c864:	2800      	cmp	r0, #0
 800c866:	d0eb      	beq.n	800c840 <floor+0x48>
 800c868:	2c00      	cmp	r4, #0
 800c86a:	bfbe      	ittt	lt
 800c86c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800c870:	4133      	asrlt	r3, r6
 800c872:	18e4      	addlt	r4, r4, r3
 800c874:	ea24 0407 	bic.w	r4, r4, r7
 800c878:	2500      	movs	r5, #0
 800c87a:	e7e1      	b.n	800c840 <floor+0x48>
 800c87c:	2e33      	cmp	r6, #51	@ 0x33
 800c87e:	dd0a      	ble.n	800c896 <floor+0x9e>
 800c880:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800c884:	d103      	bne.n	800c88e <floor+0x96>
 800c886:	4602      	mov	r2, r0
 800c888:	460b      	mov	r3, r1
 800c88a:	f7f3 fcff 	bl	800028c <__adddf3>
 800c88e:	ec41 0b10 	vmov	d0, r0, r1
 800c892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c896:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800c89a:	f04f 37ff 	mov.w	r7, #4294967295
 800c89e:	40df      	lsrs	r7, r3
 800c8a0:	4207      	tst	r7, r0
 800c8a2:	d0f4      	beq.n	800c88e <floor+0x96>
 800c8a4:	a30e      	add	r3, pc, #56	@ (adr r3, 800c8e0 <floor+0xe8>)
 800c8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8aa:	f7f3 fcef 	bl	800028c <__adddf3>
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	f7f4 f931 	bl	8000b18 <__aeabi_dcmpgt>
 800c8b6:	2800      	cmp	r0, #0
 800c8b8:	d0c2      	beq.n	800c840 <floor+0x48>
 800c8ba:	2c00      	cmp	r4, #0
 800c8bc:	da0a      	bge.n	800c8d4 <floor+0xdc>
 800c8be:	2e14      	cmp	r6, #20
 800c8c0:	d101      	bne.n	800c8c6 <floor+0xce>
 800c8c2:	3401      	adds	r4, #1
 800c8c4:	e006      	b.n	800c8d4 <floor+0xdc>
 800c8c6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	40b3      	lsls	r3, r6
 800c8ce:	441d      	add	r5, r3
 800c8d0:	4545      	cmp	r5, r8
 800c8d2:	d3f6      	bcc.n	800c8c2 <floor+0xca>
 800c8d4:	ea25 0507 	bic.w	r5, r5, r7
 800c8d8:	e7b2      	b.n	800c840 <floor+0x48>
 800c8da:	2500      	movs	r5, #0
 800c8dc:	462c      	mov	r4, r5
 800c8de:	e7af      	b.n	800c840 <floor+0x48>
 800c8e0:	8800759c 	.word	0x8800759c
 800c8e4:	7e37e43c 	.word	0x7e37e43c
 800c8e8:	bff00000 	.word	0xbff00000
 800c8ec:	000fffff 	.word	0x000fffff

0800c8f0 <_init>:
 800c8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8f2:	bf00      	nop
 800c8f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8f6:	bc08      	pop	{r3}
 800c8f8:	469e      	mov	lr, r3
 800c8fa:	4770      	bx	lr

0800c8fc <_fini>:
 800c8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8fe:	bf00      	nop
 800c900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c902:	bc08      	pop	{r3}
 800c904:	469e      	mov	lr, r3
 800c906:	4770      	bx	lr
